
NS_263_task_4_bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800200  00005408  0000549c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005408  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000768  0080022c  0080022c  000054c8  2**0
                  ALLOC
  3 .stab         000039b4  00000000  00000000  000054c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000adb  00000000  00000000  00008e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00009958  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000587a  00000000  00000000  00009a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000943  00000000  00000000  0000f2f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002110  00000000  00000000  0000fc35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  00011d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000929  00000000  00000000  0001246c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000049a0  00000000  00000000  00012d95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00017735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_1>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <ADC_Conversion>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e8 e0       	ldi	r30, 0x08	; 8
     17e:	f4 e5       	ldi	r31, 0x54	; 84
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	ac 32       	cpi	r26, 0x2C	; 44
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	19 e0       	ldi	r17, 0x09	; 9
     192:	ac e2       	ldi	r26, 0x2C	; 44
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	a4 39       	cpi	r26, 0x94	; 148
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 bb 23 	call	0x4776	; 0x4776 <main>
     1a4:	0c 94 02 2a 	jmp	0x5404	; 0x5404 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <rgb_port_config>:
*       and makes all pins high to initially turn off the led
*Example Call: rgb_port_config()
*/
void rgb_port_config (void)
{
	DDRB = DDRB | 0x0F; 
     1ac:	84 b1       	in	r24, 0x04	; 4
     1ae:	8f 60       	ori	r24, 0x0F	; 15
     1b0:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | 0x0F; // initially all off
     1b2:	85 b1       	in	r24, 0x05	; 5
     1b4:	8f 60       	ori	r24, 0x0F	; 15
     1b6:	85 b9       	out	0x05, r24	; 5
	/*
	PORTB = PORTB & 0xFD;//red
	PORTB = PORTB & 0xFB;//blue
	PORTB =PORTB & 0xF7;//green
	*/
}
     1b8:	08 95       	ret

000001ba <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ba:	86 e6       	ldi	r24, 0x66	; 102
     1bc:	9e e0       	ldi	r25, 0x0E	; 14
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_set_4bit+0x4>
     1c2:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1c4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1c6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1c8:	80 e3       	ldi	r24, 0x30	; 48
     1ca:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1cc:	42 9a       	sbi	0x08, 2	; 8
     1ce:	ef ef       	ldi	r30, 0xFF	; 255
     1d0:	f7 e4       	ldi	r31, 0x47	; 71
     1d2:	31 97       	sbiw	r30, 0x01	; 1
     1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_set_4bit+0x18>
     1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_set_4bit+0x1e>
     1d8:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1da:	42 98       	cbi	0x08, 2	; 8
     1dc:	e6 e6       	ldi	r30, 0x66	; 102
     1de:	fe e0       	ldi	r31, 0x0E	; 14
     1e0:	31 97       	sbiw	r30, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_set_4bit+0x26>
     1e4:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     1e6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     1e8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     1ea:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     1ec:	42 9a       	sbi	0x08, 2	; 8
     1ee:	ef ef       	ldi	r30, 0xFF	; 255
     1f0:	f7 e4       	ldi	r31, 0x47	; 71
     1f2:	31 97       	sbiw	r30, 0x01	; 1
     1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_set_4bit+0x38>
     1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_set_4bit+0x3e>
     1f8:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1fa:	42 98       	cbi	0x08, 2	; 8
     1fc:	e6 e6       	ldi	r30, 0x66	; 102
     1fe:	fe e0       	ldi	r31, 0x0E	; 14
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	f1 f7       	brne	.-4      	; 0x200 <lcd_set_4bit+0x46>
     204:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     206:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     208:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     20a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     20c:	42 9a       	sbi	0x08, 2	; 8
     20e:	8f ef       	ldi	r24, 0xFF	; 255
     210:	97 e4       	ldi	r25, 0x47	; 71
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_set_4bit+0x58>
     216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_set_4bit+0x5e>
     218:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     21a:	42 98       	cbi	0x08, 2	; 8
     21c:	e6 e6       	ldi	r30, 0x66	; 102
     21e:	fe e0       	ldi	r31, 0x0E	; 14
     220:	31 97       	sbiw	r30, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <lcd_set_4bit+0x66>
     224:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     226:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     228:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     22a:	80 e2       	ldi	r24, 0x20	; 32
     22c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     22e:	42 9a       	sbi	0x08, 2	; 8
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	97 e4       	ldi	r25, 0x47	; 71
     234:	01 97       	sbiw	r24, 0x01	; 1
     236:	f1 f7       	brne	.-4      	; 0x234 <lcd_set_4bit+0x7a>
     238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_set_4bit+0x80>
     23a:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     23c:	42 98       	cbi	0x08, 2	; 8

	
}
     23e:	08 95       	ret

00000240 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     240:	98 b1       	in	r25, 0x08	; 8
     242:	9f 70       	andi	r25, 0x0F	; 15
     244:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     246:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     248:	28 2f       	mov	r18, r24
     24a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     24c:	92 2b       	or	r25, r18
     24e:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     250:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     252:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     254:	42 9a       	sbi	0x08, 2	; 8
     256:	ef ef       	ldi	r30, 0xFF	; 255
     258:	f7 e4       	ldi	r31, 0x47	; 71
     25a:	31 97       	sbiw	r30, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_wr_command+0x1a>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_wr_command+0x20>
     260:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     262:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     264:	98 b1       	in	r25, 0x08	; 8
     266:	9f 70       	andi	r25, 0x0F	; 15
     268:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     26a:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     26c:	82 95       	swap	r24
     26e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     270:	89 2b       	or	r24, r25
     272:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     274:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     276:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     278:	42 9a       	sbi	0x08, 2	; 8
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	97 e4       	ldi	r25, 0x47	; 71
     27e:	01 97       	sbiw	r24, 0x01	; 1
     280:	f1 f7       	brne	.-4      	; 0x27e <lcd_wr_command+0x3e>
     282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_wr_command+0x44>
     284:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     286:	42 98       	cbi	0x08, 2	; 8
}
     288:	08 95       	ret

0000028a <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     28a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_set_4bit>
     28e:	86 e6       	ldi	r24, 0x66	; 102
     290:	9e e0       	ldi	r25, 0x0E	; 14
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0x8>
     296:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     298:	88 e2       	ldi	r24, 0x28	; 40
     29a:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
	lcd_wr_command(0x01);
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
	lcd_wr_command(0x06);
     2a4:	86 e0       	ldi	r24, 0x06	; 6
     2a6:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
	lcd_wr_command(0x0E);
     2aa:	8e e0       	ldi	r24, 0x0E	; 14
     2ac:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
	lcd_wr_command(0x80);
     2b0:	80 e8       	ldi	r24, 0x80	; 128
     2b2:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
		
}
     2b6:	08 95       	ret

000002b8 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     2b8:	98 b1       	in	r25, 0x08	; 8
     2ba:	9f 70       	andi	r25, 0x0F	; 15
     2bc:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2be:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     2c0:	28 2f       	mov	r18, r24
     2c2:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2c4:	92 2b       	or	r25, r18
     2c6:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     2c8:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ca:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2cc:	42 9a       	sbi	0x08, 2	; 8
     2ce:	ef ef       	ldi	r30, 0xFF	; 255
     2d0:	f7 e4       	ldi	r31, 0x47	; 71
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_wr_char+0x1a>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <lcd_wr_char+0x20>
     2d8:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2da:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     2dc:	98 b1       	in	r25, 0x08	; 8
     2de:	9f 70       	andi	r25, 0x0F	; 15
     2e0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     2e2:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     2e4:	82 95       	swap	r24
     2e6:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     2e8:	89 2b       	or	r24, r25
     2ea:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     2ec:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2ee:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2f0:	42 9a       	sbi	0x08, 2	; 8
     2f2:	8f ef       	ldi	r24, 0xFF	; 255
     2f4:	97 e4       	ldi	r25, 0x47	; 71
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_wr_char+0x3e>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_wr_char+0x44>
     2fc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2fe:	42 98       	cbi	0x08, 2	; 8
}
     300:	08 95       	ret

00000302 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     302:	80 e8       	ldi	r24, 0x80	; 128
     304:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
}
     308:	08 95       	ret

0000030a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	ec 01       	movw	r28, r24
	while(*str != '\0')
     310:	88 81       	ld	r24, Y
     312:	88 23       	and	r24, r24
     314:	31 f0       	breq	.+12     	; 0x322 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     316:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     318:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     31c:	89 91       	ld	r24, Y+
     31e:	88 23       	and	r24, r24
     320:	d9 f7       	brne	.-10     	; 0x318 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     328:	82 30       	cpi	r24, 0x02	; 2
     32a:	79 f0       	breq	.+30     	; 0x34a <lcd_cursor+0x22>
     32c:	83 30       	cpi	r24, 0x03	; 3
     32e:	18 f4       	brcc	.+6      	; 0x336 <lcd_cursor+0xe>
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	c9 f4       	brne	.+50     	; 0x366 <lcd_cursor+0x3e>
     334:	05 c0       	rjmp	.+10     	; 0x340 <lcd_cursor+0x18>
     336:	83 30       	cpi	r24, 0x03	; 3
     338:	69 f0       	breq	.+26     	; 0x354 <lcd_cursor+0x2c>
     33a:	84 30       	cpi	r24, 0x04	; 4
     33c:	a1 f4       	brne	.+40     	; 0x366 <lcd_cursor+0x3e>
     33e:	0f c0       	rjmp	.+30     	; 0x35e <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     340:	86 2f       	mov	r24, r22
     342:	81 58       	subi	r24, 0x81	; 129
     344:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
     348:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     34a:	86 2f       	mov	r24, r22
     34c:	81 54       	subi	r24, 0x41	; 65
     34e:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
     352:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     354:	86 2f       	mov	r24, r22
     356:	8d 56       	subi	r24, 0x6D	; 109
     358:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
     35c:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     35e:	86 2f       	mov	r24, r22
     360:	8d 52       	subi	r24, 0x2D	; 45
     362:	0e 94 20 01 	call	0x240	; 0x240 <lcd_wr_command>
     366:	08 95       	ret

00000368 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     368:	0f 93       	push	r16
     36a:	1f 93       	push	r17
     36c:	cf 93       	push	r28
     36e:	df 93       	push	r29
     370:	8a 01       	movw	r16, r20
     372:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     374:	88 23       	and	r24, r24
     376:	11 f0       	breq	.+4      	; 0x37c <lcd_print+0x14>
     378:	66 23       	and	r22, r22
     37a:	19 f4       	brne	.+6      	; 0x382 <lcd_print+0x1a>
	{
		lcd_home();
     37c:	0e 94 81 01 	call	0x302	; 0x302 <lcd_home>
     380:	02 c0       	rjmp	.+4      	; 0x386 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     382:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     386:	c5 30       	cpi	r28, 0x05	; 5
     388:	d1 05       	cpc	r29, r1
     38a:	71 f4       	brne	.+28     	; 0x3a8 <lcd_print+0x40>
	{
		million=value/10000+48;
     38c:	c8 01       	movw	r24, r16
     38e:	60 e1       	ldi	r22, 0x10	; 16
     390:	77 e2       	ldi	r23, 0x27	; 39
     392:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__udivmodhi4>
     396:	cb 01       	movw	r24, r22
     398:	c0 96       	adiw	r24, 0x30	; 48
     39a:	90 93 67 02 	sts	0x0267, r25
     39e:	80 93 66 02 	sts	0x0266, r24
		lcd_wr_char(million);
     3a2:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     3a8:	c4 30       	cpi	r28, 0x04	; 4
     3aa:	d1 05       	cpc	r29, r1
     3ac:	b9 f4       	brne	.+46     	; 0x3dc <lcd_print+0x74>
	{
		temp = value/1000;
     3ae:	c8 01       	movw	r24, r16
     3b0:	68 ee       	ldi	r22, 0xE8	; 232
     3b2:	73 e0       	ldi	r23, 0x03	; 3
     3b4:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__udivmodhi4>
     3b8:	cb 01       	movw	r24, r22
     3ba:	70 93 6b 02 	sts	0x026B, r23
     3be:	60 93 6a 02 	sts	0x026A, r22
		thousand = temp%10 + 48;
     3c2:	6a e0       	ldi	r22, 0x0A	; 10
     3c4:	70 e0       	ldi	r23, 0x00	; 0
     3c6:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__udivmodhi4>
     3ca:	c0 96       	adiw	r24, 0x30	; 48
     3cc:	90 93 8d 09 	sts	0x098D, r25
     3d0:	80 93 8c 09 	sts	0x098C, r24
		lcd_wr_char(thousand);
     3d4:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
		flag=1;
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	01 c0       	rjmp	.+2      	; 0x3de <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     3dc:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     3de:	c3 30       	cpi	r28, 0x03	; 3
     3e0:	d1 05       	cpc	r29, r1
     3e2:	11 f0       	breq	.+4      	; 0x3e8 <lcd_print+0x80>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	b1 f4       	brne	.+44     	; 0x414 <lcd_print+0xac>
	{
		temp = value/100;
     3e8:	c8 01       	movw	r24, r16
     3ea:	64 e6       	ldi	r22, 0x64	; 100
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__udivmodhi4>
     3f2:	cb 01       	movw	r24, r22
     3f4:	70 93 6b 02 	sts	0x026B, r23
     3f8:	60 93 6a 02 	sts	0x026A, r22
		hundred = temp%10 + 48;
     3fc:	6a e0       	ldi	r22, 0x0A	; 10
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__udivmodhi4>
     404:	c0 96       	adiw	r24, 0x30	; 48
     406:	90 93 89 09 	sts	0x0989, r25
     40a:	80 93 88 09 	sts	0x0988, r24
		lcd_wr_char(hundred);
     40e:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
		flag=1;
     412:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     414:	c2 30       	cpi	r28, 0x02	; 2
     416:	d1 05       	cpc	r29, r1
     418:	11 f0       	breq	.+4      	; 0x41e <lcd_print+0xb6>
     41a:	81 30       	cpi	r24, 0x01	; 1
     41c:	b1 f4       	brne	.+44     	; 0x44a <lcd_print+0xe2>
	{
		temp = value/10;
     41e:	2a e0       	ldi	r18, 0x0A	; 10
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	c8 01       	movw	r24, r16
     424:	b9 01       	movw	r22, r18
     426:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__udivmodhi4>
     42a:	cb 01       	movw	r24, r22
     42c:	70 93 6b 02 	sts	0x026B, r23
     430:	60 93 6a 02 	sts	0x026A, r22
		tens = temp%10 + 48;
     434:	b9 01       	movw	r22, r18
     436:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__udivmodhi4>
     43a:	c0 96       	adiw	r24, 0x30	; 48
     43c:	90 93 85 09 	sts	0x0985, r25
     440:	80 93 84 09 	sts	0x0984, r24
		lcd_wr_char(tens);
     444:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
		flag=1;
     448:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     44a:	c1 30       	cpi	r28, 0x01	; 1
     44c:	d1 05       	cpc	r29, r1
     44e:	11 f0       	breq	.+4      	; 0x454 <lcd_print+0xec>
     450:	81 30       	cpi	r24, 0x01	; 1
     452:	61 f4       	brne	.+24     	; 0x46c <lcd_print+0x104>
	{
		unit = value%10 + 48;
     454:	c8 01       	movw	r24, r16
     456:	6a e0       	ldi	r22, 0x0A	; 10
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	0e 94 2e 27 	call	0x4e5c	; 0x4e5c <__udivmodhi4>
     45e:	c0 96       	adiw	r24, 0x30	; 48
     460:	90 93 8b 09 	sts	0x098B, r25
     464:	80 93 8a 09 	sts	0x098A, r24
		lcd_wr_char(unit);
     468:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
	}
	if(digits>5)
     46c:	c6 30       	cpi	r28, 0x06	; 6
     46e:	d1 05       	cpc	r29, r1
     470:	1c f0       	brlt	.+6      	; 0x478 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     472:	85 e4       	ldi	r24, 0x45	; 69
     474:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <lcd_wr_char>
	}
	
}
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <print_line_sensor>:
void print_line_sensor(void)
{
	/*print_sensor(2,1,3);	//Prints value of White Line Sensor1
	print_sensor(2,5,2);	//Prints Value of White Line Sensor2
	print_sensor(2,9,1);	//Prints Value of White Line Sensor3*/
	lcd_print(1,1,left_line_sensor,3);
     482:	40 91 34 02 	lds	r20, 0x0234
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	61 e0       	ldi	r22, 0x01	; 1
     48a:	50 e0       	ldi	r21, 0x00	; 0
     48c:	23 e0       	ldi	r18, 0x03	; 3
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
	lcd_print(1,5,middle_line_sensor,3);
     494:	40 91 33 02 	lds	r20, 0x0233
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	65 e0       	ldi	r22, 0x05	; 5
     49c:	50 e0       	ldi	r21, 0x00	; 0
     49e:	23 e0       	ldi	r18, 0x03	; 3
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
	lcd_print(1,9,right_line_sensor,3);
     4a6:	40 91 32 02 	lds	r20, 0x0232
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	69 e0       	ldi	r22, 0x09	; 9
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	23 e0       	ldi	r18, 0x03	; 3
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
	lcd_print(2,7,dist,3);
     4b8:	40 91 6e 02 	lds	r20, 0x026E
     4bc:	50 91 6f 02 	lds	r21, 0x026F
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	67 e0       	ldi	r22, 0x07	; 7
     4c4:	23 e0       	ldi	r18, 0x03	; 3
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
}
     4cc:	08 95       	ret

000004ce <color_sensor_pin_config>:
void color_sensor_pin_config(void)
{
	/*****************************************
	Define DDR and PORT values for the port on which Color sensor is connected
	******************************************/
	DDRD = DDRD & 0x00;
     4ce:	8a b1       	in	r24, 0x0a	; 10
     4d0:	1a b8       	out	0x0a, r1	; 10
	DDRD = DDRD | 0xFE; //11111110 //Set the direction of PORTD pin 0 as input
     4d2:	8a b1       	in	r24, 0x0a	; 10
     4d4:	8e 6f       	ori	r24, 0xFE	; 254
     4d6:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | 0x01; //enable internal pull-up for PORTD 0 pin
     4d8:	58 9a       	sbi	0x0b, 0	; 11
	
	DDRB = DDRB | 0xF0;		//set PORTB PB4,PB5,PB6,PB7 as output for S0,S1,S2,S3 of color sensor respectively
     4da:	84 b1       	in	r24, 0x04	; 4
     4dc:	80 6f       	ori	r24, 0xF0	; 240
     4de:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB & 0x00;	//initially all low
     4e0:	85 b1       	in	r24, 0x05	; 5
     4e2:	15 b8       	out	0x05, r1	; 5
}
     4e4:	08 95       	ret

000004e6 <color_sensor_pin_interrupt_init>:
		by setting bit 0 of External Interrupt Control Register A(EICRA) as 0 and bit 1 of EICRA as 1  
*Example Call: color_sensor_pin_interrupt_init()
*/
void color_sensor_pin_interrupt_init(void) //Interrupt 0 enable
{
	cli(); //Clears the global interrupt  
     4e6:	f8 94       	cli
	EICRA = EICRA | 0x02; // INT0 is set to trigger with falling edge
     4e8:	e9 e6       	ldi	r30, 0x69	; 105
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x01; // Enable Interrupt INT0 for color sensor
     4f2:	e8 9a       	sbi	0x1d, 0	; 29
	sei(); // Enables the global interrupt
     4f4:	78 94       	sei
}
     4f6:	08 95       	ret

000004f8 <__vector_1>:
*Output: void
*Logic: This is the Interrupt Service Routine which increments pulse count by 1 each time it is called 
*Example Call: it is automatically called when an external interrupt is triggered on PD0/INT0
*/
ISR(INT0_vect) // Pass the timer number in place of n in INTn_vect
{
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
	//increment on receiving pulse from the color sensor
	pulse++;
     50a:	80 91 36 02 	lds	r24, 0x0236
     50e:	90 91 37 02 	lds	r25, 0x0237
     512:	a0 91 38 02 	lds	r26, 0x0238
     516:	b0 91 39 02 	lds	r27, 0x0239
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	a1 1d       	adc	r26, r1
     51e:	b1 1d       	adc	r27, r1
     520:	80 93 36 02 	sts	0x0236, r24
     524:	90 93 37 02 	sts	0x0237, r25
     528:	a0 93 38 02 	sts	0x0238, r26
     52c:	b0 93 39 02 	sts	0x0239, r27
}
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <filter_red>:
*Example Call:filter_red()
*/
void filter_red(void)    //Used to select red filter
{
	//Filter Select - red filter
	 PORTB = PORTB & 0xBF;//set S2 low
     542:	2e 98       	cbi	0x05, 6	; 5
	 PORTB = PORTB & 0x7F;//set S3 low
     544:	2f 98       	cbi	0x05, 7	; 5
}
     546:	08 95       	ret

00000548 <filter_green>:
*Example Call: filter_green()
*/
void filter_green(void)	//Used to select green filter
{
	//Filter Select - green filter
	PORTB = PORTB | 0x40;//set S2 High
     548:	2e 9a       	sbi	0x05, 6	; 5
	PORTB = PORTB | 0x80;//set S3 High
     54a:	2f 9a       	sbi	0x05, 7	; 5
}
     54c:	08 95       	ret

0000054e <filter_blue>:
*Example Call: filter_blue()
*/
void filter_blue(void)	//Used to select blue filter
{
	//Filter Select - blue filter
	PORTB = PORTB & 0xBF;//set S2 low
     54e:	2e 98       	cbi	0x05, 6	; 5
	PORTB = PORTB | 0x80;//set S3 High
     550:	2f 9a       	sbi	0x05, 7	; 5
}
     552:	08 95       	ret

00000554 <filter_clear>:
*Example Call: filter_clear()
*/
void filter_clear(void)	//select no filter
{
	//Filter Select - no filter
	PORTB = PORTB | 0X40;//set S2 High
     554:	2e 9a       	sbi	0x05, 6	; 5
	PORTB = PORTB & 0x7F;//set S3 Low
     556:	2f 98       	cbi	0x05, 7	; 5
}
     558:	08 95       	ret

0000055a <color_sensor_scaling>:
*/
void color_sensor_scaling()		//This function is used to select the scaled down version of the original frequency of the output generated by the color sensor, generally 20% scaling is preferable, though you can change the values as per your application by referring datasheet
{
	//Output Scaling 20% from datasheet
	
	PORTB = PORTB | 0x10;//set S0 high
     55a:	2c 9a       	sbi	0x05, 4	; 5
	PORTB = PORTB | 0x20;//set S1 high
     55c:	2d 9a       	sbi	0x05, 5	; 5
}
     55e:	08 95       	ret

00000560 <red_read>:
*Example Call: red_read()
*/
void red_read(void)
{
	//Red
	filter_red(); //select red filter
     560:	0e 94 a1 02 	call	0x542	; 0x542 <filter_red>
	pulse = 0;//reset the count to 0
     564:	10 92 36 02 	sts	0x0236, r1
     568:	10 92 37 02 	sts	0x0237, r1
     56c:	10 92 38 02 	sts	0x0238, r1
     570:	10 92 39 02 	sts	0x0239, r1
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	9f e7       	ldi	r25, 0x7F	; 127
     578:	a4 e0       	ldi	r26, 0x04	; 4
     57a:	81 50       	subi	r24, 0x01	; 1
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	a0 40       	sbci	r26, 0x00	; 0
     580:	e1 f7       	brne	.-8      	; 0x57a <red_read+0x1a>
     582:	00 c0       	rjmp	.+0      	; 0x584 <red_read+0x24>
     584:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse; //store the count in variable called red
     586:	80 91 36 02 	lds	r24, 0x0236
     58a:	90 91 37 02 	lds	r25, 0x0237
     58e:	a0 91 38 02 	lds	r26, 0x0238
     592:	b0 91 39 02 	lds	r27, 0x0239
     596:	80 93 74 02 	sts	0x0274, r24
     59a:	90 93 75 02 	sts	0x0275, r25
     59e:	a0 93 76 02 	sts	0x0276, r26
     5a2:	b0 93 77 02 	sts	0x0277, r27
}
     5a6:	08 95       	ret

000005a8 <green_read>:
*Example Call: green_read()
*/
void green_read(void) 
{
	//Green
	filter_green(); //select green filter
     5a8:	0e 94 a4 02 	call	0x548	; 0x548 <filter_green>
	pulse = 0; //reset the count to 0
     5ac:	10 92 36 02 	sts	0x0236, r1
     5b0:	10 92 37 02 	sts	0x0237, r1
     5b4:	10 92 38 02 	sts	0x0238, r1
     5b8:	10 92 39 02 	sts	0x0239, r1
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	9f e7       	ldi	r25, 0x7F	; 127
     5c0:	a4 e0       	ldi	r26, 0x04	; 4
     5c2:	81 50       	subi	r24, 0x01	; 1
     5c4:	90 40       	sbci	r25, 0x00	; 0
     5c6:	a0 40       	sbci	r26, 0x00	; 0
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <green_read+0x1a>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <green_read+0x24>
     5cc:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse; //store the count in variable called green
     5ce:	80 91 36 02 	lds	r24, 0x0236
     5d2:	90 91 37 02 	lds	r25, 0x0237
     5d6:	a0 91 38 02 	lds	r26, 0x0238
     5da:	b0 91 39 02 	lds	r27, 0x0239
     5de:	80 93 70 02 	sts	0x0270, r24
     5e2:	90 93 71 02 	sts	0x0271, r25
     5e6:	a0 93 72 02 	sts	0x0272, r26
     5ea:	b0 93 73 02 	sts	0x0273, r27
}
     5ee:	08 95       	ret

000005f0 <blue_read>:
*Example Call: blue_read()
*/
void blue_read(void)
{
	//Blue
	filter_blue(); //select blue filter
     5f0:	0e 94 a7 02 	call	0x54e	; 0x54e <filter_blue>
	pulse=0; //reset the count to 0
     5f4:	10 92 36 02 	sts	0x0236, r1
     5f8:	10 92 37 02 	sts	0x0237, r1
     5fc:	10 92 38 02 	sts	0x0238, r1
     600:	10 92 39 02 	sts	0x0239, r1
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	9f e7       	ldi	r25, 0x7F	; 127
     608:	a4 e0       	ldi	r26, 0x04	; 4
     60a:	81 50       	subi	r24, 0x01	; 1
     60c:	90 40       	sbci	r25, 0x00	; 0
     60e:	a0 40       	sbci	r26, 0x00	; 0
     610:	e1 f7       	brne	.-8      	; 0x60a <blue_read+0x1a>
     612:	00 c0       	rjmp	.+0      	; 0x614 <blue_read+0x24>
     614:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
     616:	80 91 36 02 	lds	r24, 0x0236
     61a:	90 91 37 02 	lds	r25, 0x0237
     61e:	a0 91 38 02 	lds	r26, 0x0238
     622:	b0 91 39 02 	lds	r27, 0x0239
     626:	80 93 62 02 	sts	0x0262, r24
     62a:	90 93 63 02 	sts	0x0263, r25
     62e:	a0 93 64 02 	sts	0x0264, r26
     632:	b0 93 65 02 	sts	0x0265, r27
}
     636:	08 95       	ret

00000638 <check_color>:
char check_color()
{
	  int black_color_threshold = 1800;
	  
	  
	  red_read();	//read pulses after selecting red filter
     638:	0e 94 b0 02 	call	0x560	; 0x560 <red_read>
     63c:	8f ef       	ldi	r24, 0xFF	; 255
     63e:	9f e7       	ldi	r25, 0x7F	; 127
     640:	a6 e1       	ldi	r26, 0x16	; 22
     642:	81 50       	subi	r24, 0x01	; 1
     644:	90 40       	sbci	r25, 0x00	; 0
     646:	a0 40       	sbci	r26, 0x00	; 0
     648:	e1 f7       	brne	.-8      	; 0x642 <check_color+0xa>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <check_color+0x14>
     64c:	00 00       	nop
	  _delay_ms(500);
	  green_read();	//read pulses after selecting green filter
     64e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <green_read>
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	9f e7       	ldi	r25, 0x7F	; 127
     656:	a6 e1       	ldi	r26, 0x16	; 22
     658:	81 50       	subi	r24, 0x01	; 1
     65a:	90 40       	sbci	r25, 0x00	; 0
     65c:	a0 40       	sbci	r26, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <check_color+0x20>
     660:	00 c0       	rjmp	.+0      	; 0x662 <check_color+0x2a>
     662:	00 00       	nop
	  _delay_ms(500);
	  blue_read();	//read pulses after selecting blue filter
     664:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <blue_read>
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	9f e7       	ldi	r25, 0x7F	; 127
     66c:	a6 e1       	ldi	r26, 0x16	; 22
     66e:	81 50       	subi	r24, 0x01	; 1
     670:	90 40       	sbci	r25, 0x00	; 0
     672:	a0 40       	sbci	r26, 0x00	; 0
     674:	e1 f7       	brne	.-8      	; 0x66e <check_color+0x36>
     676:	00 c0       	rjmp	.+0      	; 0x678 <check_color+0x40>
     678:	00 00       	nop
	  _delay_ms(500);
	  
	  
	  //if all three pulse counts are less than the threshold value then color is black
	  if(red < black_color_threshold && green < black_color_threshold && blue < black_color_threshold)
     67a:	80 91 74 02 	lds	r24, 0x0274
     67e:	90 91 75 02 	lds	r25, 0x0275
     682:	a0 91 76 02 	lds	r26, 0x0276
     686:	b0 91 77 02 	lds	r27, 0x0277
     68a:	88 30       	cpi	r24, 0x08	; 8
     68c:	27 e0       	ldi	r18, 0x07	; 7
     68e:	92 07       	cpc	r25, r18
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	a2 07       	cpc	r26, r18
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	b2 07       	cpc	r27, r18
     698:	28 f5       	brcc	.+74     	; 0x6e4 <check_color+0xac>
     69a:	80 91 70 02 	lds	r24, 0x0270
     69e:	90 91 71 02 	lds	r25, 0x0271
     6a2:	a0 91 72 02 	lds	r26, 0x0272
     6a6:	b0 91 73 02 	lds	r27, 0x0273
     6aa:	88 30       	cpi	r24, 0x08	; 8
     6ac:	27 e0       	ldi	r18, 0x07	; 7
     6ae:	92 07       	cpc	r25, r18
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	a2 07       	cpc	r26, r18
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	b2 07       	cpc	r27, r18
     6b8:	a8 f4       	brcc	.+42     	; 0x6e4 <check_color+0xac>
     6ba:	80 91 62 02 	lds	r24, 0x0262
     6be:	90 91 63 02 	lds	r25, 0x0263
     6c2:	a0 91 64 02 	lds	r26, 0x0264
     6c6:	b0 91 65 02 	lds	r27, 0x0265
     6ca:	88 30       	cpi	r24, 0x08	; 8
     6cc:	27 e0       	ldi	r18, 0x07	; 7
     6ce:	92 07       	cpc	r25, r18
     6d0:	20 e0       	ldi	r18, 0x00	; 0
     6d2:	a2 07       	cpc	r26, r18
     6d4:	20 e0       	ldi	r18, 0x00	; 0
     6d6:	b2 07       	cpc	r27, r18
     6d8:	28 f4       	brcc	.+10     	; 0x6e4 <check_color+0xac>
	  {
		//black
		PORTB |= 0x0F; //making all bits high to turn off led
     6da:	85 b1       	in	r24, 0x05	; 5
     6dc:	8f 60       	ori	r24, 0x0F	; 15
     6de:	85 b9       	out	0x05, r24	; 5
		return 'W';
     6e0:	87 e5       	ldi	r24, 0x57	; 87
     6e2:	08 95       	ret
	  }
	  else
	  {
		  //if red pulse count is greater than green and blue
		  if(red > green && red > blue)
     6e4:	40 91 74 02 	lds	r20, 0x0274
     6e8:	50 91 75 02 	lds	r21, 0x0275
     6ec:	60 91 76 02 	lds	r22, 0x0276
     6f0:	70 91 77 02 	lds	r23, 0x0277
     6f4:	80 91 70 02 	lds	r24, 0x0270
     6f8:	90 91 71 02 	lds	r25, 0x0271
     6fc:	a0 91 72 02 	lds	r26, 0x0272
     700:	b0 91 73 02 	lds	r27, 0x0273
     704:	84 17       	cp	r24, r20
     706:	95 07       	cpc	r25, r21
     708:	a6 07       	cpc	r26, r22
     70a:	b7 07       	cpc	r27, r23
     70c:	38 f5       	brcc	.+78     	; 0x75c <check_color+0x124>
     70e:	40 91 74 02 	lds	r20, 0x0274
     712:	50 91 75 02 	lds	r21, 0x0275
     716:	60 91 76 02 	lds	r22, 0x0276
     71a:	70 91 77 02 	lds	r23, 0x0277
     71e:	80 91 62 02 	lds	r24, 0x0262
     722:	90 91 63 02 	lds	r25, 0x0263
     726:	a0 91 64 02 	lds	r26, 0x0264
     72a:	b0 91 65 02 	lds	r27, 0x0265
     72e:	84 17       	cp	r24, r20
     730:	95 07       	cpc	r25, r21
     732:	a6 07       	cpc	r26, r22
     734:	b7 07       	cpc	r27, r23
     736:	90 f4       	brcc	.+36     	; 0x75c <check_color+0x124>
		  {
			PORTB |= 0x0F;	//first making all bits high to turn off led
     738:	85 b1       	in	r24, 0x05	; 5
     73a:	8f 60       	ori	r24, 0x0F	; 15
     73c:	85 b9       	out	0x05, r24	; 5
			PORTB &= 0xFD;	//making PB1 low for red color diode
     73e:	29 98       	cbi	0x05, 1	; 5
     740:	8f ef       	ldi	r24, 0xFF	; 255
     742:	9f ef       	ldi	r25, 0xFF	; 255
     744:	a9 e5       	ldi	r26, 0x59	; 89
     746:	81 50       	subi	r24, 0x01	; 1
     748:	90 40       	sbci	r25, 0x00	; 0
     74a:	a0 40       	sbci	r26, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <check_color+0x10e>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <check_color+0x118>
     750:	00 00       	nop
			_delay_ms(2000);
			PORTB |= 0x0F;
     752:	85 b1       	in	r24, 0x05	; 5
     754:	8f 60       	ori	r24, 0x0F	; 15
     756:	85 b9       	out	0x05, r24	; 5
			return 'R';
     758:	82 e5       	ldi	r24, 0x52	; 82
     75a:	08 95       	ret
		  }
		  //if green pulse count is greater than red and blue
		  else if(green > blue && green > red)
     75c:	40 91 70 02 	lds	r20, 0x0270
     760:	50 91 71 02 	lds	r21, 0x0271
     764:	60 91 72 02 	lds	r22, 0x0272
     768:	70 91 73 02 	lds	r23, 0x0273
     76c:	80 91 62 02 	lds	r24, 0x0262
     770:	90 91 63 02 	lds	r25, 0x0263
     774:	a0 91 64 02 	lds	r26, 0x0264
     778:	b0 91 65 02 	lds	r27, 0x0265
     77c:	84 17       	cp	r24, r20
     77e:	95 07       	cpc	r25, r21
     780:	a6 07       	cpc	r26, r22
     782:	b7 07       	cpc	r27, r23
     784:	38 f5       	brcc	.+78     	; 0x7d4 <check_color+0x19c>
     786:	40 91 70 02 	lds	r20, 0x0270
     78a:	50 91 71 02 	lds	r21, 0x0271
     78e:	60 91 72 02 	lds	r22, 0x0272
     792:	70 91 73 02 	lds	r23, 0x0273
     796:	80 91 74 02 	lds	r24, 0x0274
     79a:	90 91 75 02 	lds	r25, 0x0275
     79e:	a0 91 76 02 	lds	r26, 0x0276
     7a2:	b0 91 77 02 	lds	r27, 0x0277
     7a6:	84 17       	cp	r24, r20
     7a8:	95 07       	cpc	r25, r21
     7aa:	a6 07       	cpc	r26, r22
     7ac:	b7 07       	cpc	r27, r23
     7ae:	90 f4       	brcc	.+36     	; 0x7d4 <check_color+0x19c>
		  {
			PORTB |= 0x0F;	//first making all bits high to turn off led
     7b0:	85 b1       	in	r24, 0x05	; 5
     7b2:	8f 60       	ori	r24, 0x0F	; 15
     7b4:	85 b9       	out	0x05, r24	; 5
			PORTB &= 0xF7;	//making PB3 low for green color diode
     7b6:	2b 98       	cbi	0x05, 3	; 5
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	9f ef       	ldi	r25, 0xFF	; 255
     7bc:	a9 e5       	ldi	r26, 0x59	; 89
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	90 40       	sbci	r25, 0x00	; 0
     7c2:	a0 40       	sbci	r26, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <check_color+0x186>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <check_color+0x190>
     7c8:	00 00       	nop
			_delay_ms(2000);
			PORTB |= 0x0F;
     7ca:	85 b1       	in	r24, 0x05	; 5
     7cc:	8f 60       	ori	r24, 0x0F	; 15
     7ce:	85 b9       	out	0x05, r24	; 5
			return 'G';
     7d0:	87 e4       	ldi	r24, 0x47	; 71
     7d2:	08 95       	ret
		  }
		  //if blue pulse count is greater than green and red
		  else if(blue > red && blue > green)
     7d4:	40 91 62 02 	lds	r20, 0x0262
     7d8:	50 91 63 02 	lds	r21, 0x0263
     7dc:	60 91 64 02 	lds	r22, 0x0264
     7e0:	70 91 65 02 	lds	r23, 0x0265
     7e4:	80 91 74 02 	lds	r24, 0x0274
     7e8:	90 91 75 02 	lds	r25, 0x0275
     7ec:	a0 91 76 02 	lds	r26, 0x0276
     7f0:	b0 91 77 02 	lds	r27, 0x0277
     7f4:	84 17       	cp	r24, r20
     7f6:	95 07       	cpc	r25, r21
     7f8:	a6 07       	cpc	r26, r22
     7fa:	b7 07       	cpc	r27, r23
     7fc:	38 f5       	brcc	.+78     	; 0x84c <check_color+0x214>
     7fe:	40 91 62 02 	lds	r20, 0x0262
     802:	50 91 63 02 	lds	r21, 0x0263
     806:	60 91 64 02 	lds	r22, 0x0264
     80a:	70 91 65 02 	lds	r23, 0x0265
     80e:	80 91 70 02 	lds	r24, 0x0270
     812:	90 91 71 02 	lds	r25, 0x0271
     816:	a0 91 72 02 	lds	r26, 0x0272
     81a:	b0 91 73 02 	lds	r27, 0x0273
     81e:	84 17       	cp	r24, r20
     820:	95 07       	cpc	r25, r21
     822:	a6 07       	cpc	r26, r22
     824:	b7 07       	cpc	r27, r23
     826:	a0 f4       	brcc	.+40     	; 0x850 <check_color+0x218>
		  {
			PORTB |= 0x0F;	//first making all bits high to turn off led
     828:	85 b1       	in	r24, 0x05	; 5
     82a:	8f 60       	ori	r24, 0x0F	; 15
     82c:	85 b9       	out	0x05, r24	; 5
			PORTB &= 0xFB;	//making PB2 low for blue color diode
     82e:	2a 98       	cbi	0x05, 2	; 5
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	9f ef       	ldi	r25, 0xFF	; 255
     834:	a9 e5       	ldi	r26, 0x59	; 89
     836:	81 50       	subi	r24, 0x01	; 1
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	a0 40       	sbci	r26, 0x00	; 0
     83c:	e1 f7       	brne	.-8      	; 0x836 <check_color+0x1fe>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <check_color+0x208>
     840:	00 00       	nop
			_delay_ms(2000);
			PORTB |= 0x0F;
     842:	85 b1       	in	r24, 0x05	; 5
     844:	8f 60       	ori	r24, 0x0F	; 15
     846:	85 b9       	out	0x05, r24	; 5
			return 'B';
     848:	82 e4       	ldi	r24, 0x42	; 66
     84a:	08 95       	ret
		  }
	  }
	  return 'W';
     84c:	87 e5       	ldi	r24, 0x57	; 87
     84e:	08 95       	ret
     850:	87 e5       	ldi	r24, 0x57	; 87
}
     852:	08 95       	ret

00000854 <buzzer_pin_config>:
*Logic: configure output pin for buzzer
*Example Call: blue_read()
*/
void buzzer_pin_config (void)
{
	DDRE  = DDRE | 0x10;  //making PORTE 4 pin output
     854:	6c 9a       	sbi	0x0d, 4	; 13
	PORTE = PORTE | 0x00; //setting PORTE 4 pin to logic 0
     856:	8e b1       	in	r24, 0x0e	; 14
     858:	8e b9       	out	0x0e, r24	; 14
}
     85a:	08 95       	ret

0000085c <buzzer_on>:
*Logic: makes buzzer pin high for 3 seconds
*Example Call: buzzer_on()
*/
void buzzer_on()
{
	PORTE |= 0x10; 
     85c:	74 9a       	sbi	0x0e, 4	; 14
     85e:	8f ef       	ldi	r24, 0xFF	; 255
     860:	9f ef       	ldi	r25, 0xFF	; 255
     862:	a6 e8       	ldi	r26, 0x86	; 134
     864:	81 50       	subi	r24, 0x01	; 1
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	a0 40       	sbci	r26, 0x00	; 0
     86a:	e1 f7       	brne	.-8      	; 0x864 <buzzer_on+0x8>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <buzzer_on+0x12>
     86e:	00 00       	nop
	_delay_ms(3000);
	PORTE &= 0x00;
     870:	8e b1       	in	r24, 0x0e	; 14
     872:	1e b8       	out	0x0e, r1	; 14
}
     874:	08 95       	ret

00000876 <motion_pin_config>:


//Function to configure ports to enable robot's motion
void motion_pin_config (void)
{
	DDRA = 0x0F; //Output Port
     876:	8f e0       	ldi	r24, 0x0F	; 15
     878:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00; // Initially motor stop
     87a:	12 b8       	out	0x02, r1	; 2
	DDRL = 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     87c:	88 e1       	ldi	r24, 0x18	; 24
     87e:	80 93 0a 01 	sts	0x010A, r24
	PORTL = 0x00; //Initially low
     882:	10 92 0b 01 	sts	0x010B, r1
}
     886:	08 95       	ret

00000888 <servo1_pin_config>:


//Configure PORTH 3 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRH  = DDRH | 0x08;  //making PORTH 3 pin output
     888:	e1 e0       	ldi	r30, 0x01	; 1
     88a:	f1 e0       	ldi	r31, 0x01	; 1
     88c:	80 81       	ld	r24, Z
     88e:	88 60       	ori	r24, 0x08	; 8
     890:	80 83       	st	Z, r24
 PORTH = PORTH | 0x08; //setting PORTH 3 pin to logic 1
     892:	e2 e0       	ldi	r30, 0x02	; 2
     894:	f1 e0       	ldi	r31, 0x01	; 1
     896:	80 81       	ld	r24, Z
     898:	88 60       	ori	r24, 0x08	; 8
     89a:	80 83       	st	Z, r24
}
     89c:	08 95       	ret

0000089e <servo2_pin_config>:

//Configure PORTH 4 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRH  = DDRH | 0x10;  //making PORTH 4 pin output
     89e:	e1 e0       	ldi	r30, 0x01	; 1
     8a0:	f1 e0       	ldi	r31, 0x01	; 1
     8a2:	80 81       	ld	r24, Z
     8a4:	80 61       	ori	r24, 0x10	; 16
     8a6:	80 83       	st	Z, r24
 PORTH = PORTH | 0x10; //setting PORTH 4 pin to logic 1
     8a8:	e2 e0       	ldi	r30, 0x02	; 2
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	80 81       	ld	r24, Z
     8ae:	80 61       	ori	r24, 0x10	; 16
     8b0:	80 83       	st	Z, r24
}
     8b2:	08 95       	ret

000008b4 <lcd_port_config>:



void lcd_port_config(void)
{
	DDRC |= 0xFF;
     8b4:	87 b1       	in	r24, 0x07	; 7
     8b6:	8f ef       	ldi	r24, 0xFF	; 255
     8b8:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0x80; 
     8ba:	88 b1       	in	r24, 0x08	; 8
     8bc:	80 78       	andi	r24, 0x80	; 128
     8be:	88 b9       	out	0x08, r24	; 8
}
     8c0:	08 95       	ret

000008c2 <adc_pin_config>:


void adc_pin_config(void)
{	
	DDRK = DDRK & 0x00;
     8c2:	e7 e0       	ldi	r30, 0x07	; 7
     8c4:	f1 e0       	ldi	r31, 0x01	; 1
     8c6:	80 81       	ld	r24, Z
     8c8:	10 82       	st	Z, r1
	DDRF = DDRF & 0x00;
     8ca:	80 b3       	in	r24, 0x10	; 16
     8cc:	10 ba       	out	0x10, r1	; 16
}
     8ce:	08 95       	ret

000008d0 <timer4_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer4_init(void)
{
 TCCR4B = 0x00; //stop
     8d0:	e1 ea       	ldi	r30, 0xA1	; 161
     8d2:	f0 e0       	ldi	r31, 0x00	; 0
     8d4:	10 82       	st	Z, r1
 TCNT4H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     8d6:	8c ef       	ldi	r24, 0xFC	; 252
     8d8:	80 93 a5 00 	sts	0x00A5, r24
 TCNT4L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	80 93 a4 00 	sts	0x00A4, r24
 OCR4AH = 0x03;	//Output compare Register high value for servo 1
     8e2:	93 e0       	ldi	r25, 0x03	; 3
     8e4:	90 93 a9 00 	sts	0x00A9, r25
 OCR4AL = 0xFF;	//Output Compare Register low Value For servo 1
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	80 93 a8 00 	sts	0x00A8, r24
 OCR4BH = 0x03;	//Output compare Register high value for servo 2
     8ee:	90 93 ab 00 	sts	0x00AB, r25
 OCR4BL = 0xFF;	//Output Compare Register low Value For servo 2
     8f2:	80 93 aa 00 	sts	0x00AA, r24
 OCR4CH = 0x03;	//Output compare Register high value for servo 3
     8f6:	90 93 ad 00 	sts	0x00AD, r25
 OCR4CL = 0xFF;	//Output Compare Register low Value For servo 3
     8fa:	80 93 ac 00 	sts	0x00AC, r24
 ICR4H  = 0x03;	
     8fe:	90 93 a7 00 	sts	0x00A7, r25
 ICR4L  = 0xFF;
     902:	80 93 a6 00 	sts	0x00A6, r24
 TCCR4A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     906:	8b ea       	ldi	r24, 0xAB	; 171
     908:	80 93 a0 00 	sts	0x00A0, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR4B for Selecting FAST PWM Mode*/
 TCCR4C = 0x00;
     90c:	10 92 a2 00 	sts	0x00A2, r1
 TCCR4B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     910:	8c e0       	ldi	r24, 0x0C	; 12
     912:	80 83       	st	Z, r24
}
     914:	08 95       	ret

00000916 <timer5_init>:
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	//TCCR5B = 0x00;	//Stop
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     916:	89 ea       	ldi	r24, 0xA9	; 169
     918:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     91c:	8b e0       	ldi	r24, 0x0B	; 11
     91e:	80 93 21 01 	sts	0x0121, r24
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     922:	8f ef       	ldi	r24, 0xFF	; 255
     924:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x00;	//Counter lower 8-bit value to which OCR5xH value is compared with
     928:	10 92 24 01 	sts	0x0124, r1
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     92c:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     930:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     934:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     938:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     93c:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     940:	80 93 2c 01 	sts	0x012C, r24
	
}
     944:	08 95       	ret

00000946 <adc_init>:
{
	/*ADMUX = (1<<REFS0) | (1 << ADLAR);
	ADCSRA = (1 << ADEN) | (1 << ADIE) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
	DIDR0 = (1 << ADC0D);*/
	
	ADCSRA = 0x00;
     946:	ea e7       	ldi	r30, 0x7A	; 122
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	10 82       	st	Z, r1
	ADCSRB = 0x00;
     94c:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x60;
     950:	80 e6       	ldi	r24, 0x60	; 96
     952:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = 0x86;
     956:	86 e8       	ldi	r24, 0x86	; 134
     958:	80 83       	st	Z, r24
	ACSR = 0x80;
     95a:	80 e8       	ldi	r24, 0x80	; 128
     95c:	80 bf       	out	0x30, r24	; 48
	
}
     95e:	08 95       	ret

00000960 <ADC_Conversion>:


unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     960:	88 30       	cpi	r24, 0x08	; 8
     962:	18 f0       	brcs	.+6      	; 0x96a <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     964:	98 e0       	ldi	r25, 0x08	; 8
     966:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
	ADMUX= (ADMUX & 0xF8) | Ch;
     96a:	ec e7       	ldi	r30, 0x7C	; 124
     96c:	f0 e0       	ldi	r31, 0x00	; 0
     96e:	90 81       	ld	r25, Z
	unsigned char a;
	if(Ch>7)
	{
		ADCSRB = 0x08;
	}
	Ch = Ch & 0x07;
     970:	87 70       	andi	r24, 0x07	; 7
	ADMUX= (ADMUX & 0xF8) | Ch;
     972:	98 7f       	andi	r25, 0xF8	; 248
     974:	89 2b       	or	r24, r25
     976:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); 		//Set start conversion bit
     978:	ea e7       	ldi	r30, 0x7A	; 122
     97a:	f0 e0       	ldi	r31, 0x00	; 0
     97c:	80 81       	ld	r24, Z
     97e:	80 64       	ori	r24, 0x40	; 64
     980:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
     982:	80 81       	ld	r24, Z
     984:	84 ff       	sbrs	r24, 4
     986:	fd cf       	rjmp	.-6      	; 0x982 <ADC_Conversion+0x22>
	a=ADCH;
     988:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     98c:	ea e7       	ldi	r30, 0x7A	; 122
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	90 81       	ld	r25, Z
     992:	90 61       	ori	r25, 0x10	; 16
     994:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     996:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     99a:	08 95       	ret

0000099c <read_line_sensor>:
*
*/
void read_line_sensor()
{
	
	right_line_sensor = ADC_Conversion(1);
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
     9a2:	80 93 32 02 	sts	0x0232, r24
	middle_line_sensor = ADC_Conversion(2);
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
     9ac:	80 93 33 02 	sts	0x0233, r24
	left_line_sensor = ADC_Conversion(3);
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
     9b6:	80 93 34 02 	sts	0x0234, r24
}
     9ba:	08 95       	ret

000009bc <print_sensor>:
* Logic: uses ADC_Conversion function to read value of White line sensor and prints on lcd using lcd_print function 
* Example Call: print_sensor();
*
*/
void print_sensor(char row, char column, unsigned char channel)
{
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	d8 2f       	mov	r29, r24
     9c2:	c6 2f       	mov	r28, r22
     9c4:	84 2f       	mov	r24, r20
	ADC_Value=ADC_Conversion(channel);
     9c6:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
     9ca:	48 2f       	mov	r20, r24
     9cc:	80 93 35 02 	sts	0x0235, r24
	lcd_print(row,column,ADC_Value,3);
     9d0:	8d 2f       	mov	r24, r29
     9d2:	6c 2f       	mov	r22, r28
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	23 e0       	ldi	r18, 0x03	; 3
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
}
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <Sharp_GP2D12_estimation>:


// This Function calculates the actual distance in millimeters(mm) from the input
// analog value of Sharp Sensor. 
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     9e4:	0f 93       	push	r16
     9e6:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     9e8:	68 2f       	mov	r22, r24
     9ea:	70 e0       	ldi	r23, 0x00	; 0
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatunsisf>
     9f4:	2f ee       	ldi	r18, 0xEF	; 239
     9f6:	39 ec       	ldi	r19, 0xC9	; 201
     9f8:	43 e9       	ldi	r20, 0x93	; 147
     9fa:	5f e3       	ldi	r21, 0x3F	; 63
     9fc:	0e 94 c9 25 	call	0x4b92	; 0x4b92 <pow>
     a00:	b6 2f       	mov	r27, r22
     a02:	a7 2f       	mov	r26, r23
     a04:	38 2f       	mov	r19, r24
     a06:	29 2f       	mov	r18, r25
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	80 e8       	ldi	r24, 0x80	; 128
     a0e:	9f e3       	ldi	r25, 0x3F	; 63
     a10:	42 2f       	mov	r20, r18
     a12:	0b 2f       	mov	r16, r27
     a14:	1a 2f       	mov	r17, r26
     a16:	23 2f       	mov	r18, r19
     a18:	34 2f       	mov	r19, r20
     a1a:	a9 01       	movw	r20, r18
     a1c:	98 01       	movw	r18, r16
     a1e:	0e 94 3f 24 	call	0x487e	; 0x487e <__divsf3>
     a22:	2a e9       	ldi	r18, 0x9A	; 154
     a24:	39 ef       	ldi	r19, 0xF9	; 249
     a26:	4e e2       	ldi	r20, 0x2E	; 46
     a28:	55 e4       	ldi	r21, 0x45	; 69
     a2a:	0e 94 66 25 	call	0x4acc	; 0x4acc <__mulsf3>
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e2       	ldi	r20, 0x20	; 32
     a34:	51 e4       	ldi	r21, 0x41	; 65
     a36:	0e 94 66 25 	call	0x4acc	; 0x4acc <__mulsf3>
     a3a:	0e 94 a7 24 	call	0x494e	; 0x494e <__fixsfsi>
     a3e:	88 27       	eor	r24, r24
     a40:	77 fd       	sbrc	r23, 7
     a42:	80 95       	com	r24
     a44:	98 2f       	mov	r25, r24
     a46:	0e 94 da 24 	call	0x49b4	; 0x49b4 <__floatsisf>
	distanceInt = (int)distance;
     a4a:	0e 94 a7 24 	call	0x494e	; 0x494e <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     a4e:	86 2f       	mov	r24, r22
     a50:	97 2f       	mov	r25, r23
     a52:	23 e0       	ldi	r18, 0x03	; 3
     a54:	81 32       	cpi	r24, 0x21	; 33
     a56:	92 07       	cpc	r25, r18
     a58:	10 f0       	brcs	.+4      	; 0xa5e <Sharp_GP2D12_estimation+0x7a>
     a5a:	80 e2       	ldi	r24, 0x20	; 32
     a5c:	93 e0       	ldi	r25, 0x03	; 3
}
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <velocity>:



void velocity (unsigned char left_motor, unsigned char right_motor)
{
OCR5AL = (unsigned char)left_motor;
     a64:	80 93 28 01 	sts	0x0128, r24
OCR5BL = (unsigned char)right_motor;
     a68:	60 93 2a 01 	sts	0x012A, r22
}
     a6c:	08 95       	ret

00000a6e <forward>:



void forward (void)
{
	PORTA = 0x06;
     a6e:	86 e0       	ldi	r24, 0x06	; 6
     a70:	82 b9       	out	0x02, r24	; 2
}
     a72:	08 95       	ret

00000a74 <stop>:

void stop (void)
{
	PORTA = 0x00;
     a74:	12 b8       	out	0x02, r1	; 2
}
     a76:	08 95       	ret

00000a78 <backward>:

void backward(void)
{
	PORTA = 0x09;
     a78:	89 e0       	ldi	r24, 0x09	; 9
     a7a:	82 b9       	out	0x02, r24	; 2
}
     a7c:	08 95       	ret

00000a7e <soft_left>:

void soft_left(void)
{
	PORTA = 0x04;
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	82 b9       	out	0x02, r24	; 2
}
     a82:	08 95       	ret

00000a84 <soft_right>:

void soft_right(void)
{
	PORTA = 0x02;
     a84:	82 e0       	ldi	r24, 0x02	; 2
     a86:	82 b9       	out	0x02, r24	; 2
}
     a88:	08 95       	ret

00000a8a <left>:

void left(void)
{
	PORTA = 0x05;
     a8a:	85 e0       	ldi	r24, 0x05	; 5
     a8c:	82 b9       	out	0x02, r24	; 2
}
     a8e:	08 95       	ret

00000a90 <right>:

void right(void)
{
	PORTA = 0x0A;
     a90:	8a e0       	ldi	r24, 0x0A	; 10
     a92:	82 b9       	out	0x02, r24	; 2
}
     a94:	08 95       	ret

00000a96 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR4AH = 0x00;
     a96:	10 92 a9 00 	sts	0x00A9, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     a9a:	68 2f       	mov	r22, r24
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatunsisf>
     aa6:	2b e7       	ldi	r18, 0x7B	; 123
     aa8:	34 e1       	ldi	r19, 0x14	; 20
     aaa:	4e ee       	ldi	r20, 0xEE	; 238
     aac:	5f e3       	ldi	r21, 0x3F	; 63
     aae:	0e 94 3f 24 	call	0x487e	; 0x487e <__divsf3>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	4c e0       	ldi	r20, 0x0C	; 12
     ab8:	52 e4       	ldi	r21, 0x42	; 66
     aba:	0e 94 db 23 	call	0x47b6	; 0x47b6 <__addsf3>
 OCR4AH = 0x00;
 OCR4AL = (unsigned char) PositionPanServo;
     abe:	0e 94 ac 24 	call	0x4958	; 0x4958 <__fixunssfsi>
     ac2:	60 93 a8 00 	sts	0x00A8, r22
}
     ac6:	08 95       	ret

00000ac8 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR4BH = 0x00;
     ac8:	10 92 ab 00 	sts	0x00AB, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     acc:	68 2f       	mov	r22, r24
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__floatunsisf>
     ad8:	2b e7       	ldi	r18, 0x7B	; 123
     ada:	34 e1       	ldi	r19, 0x14	; 20
     adc:	4e ee       	ldi	r20, 0xEE	; 238
     ade:	5f e3       	ldi	r21, 0x3F	; 63
     ae0:	0e 94 3f 24 	call	0x487e	; 0x487e <__divsf3>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	4c e0       	ldi	r20, 0x0C	; 12
     aea:	52 e4       	ldi	r21, 0x42	; 66
     aec:	0e 94 db 23 	call	0x47b6	; 0x47b6 <__addsf3>
 OCR4BH = 0x00;
 OCR4BL = (unsigned char) PositionTiltServo;
     af0:	0e 94 ac 24 	call	0x4958	; 0x4958 <__fixunssfsi>
     af4:	60 93 aa 00 	sts	0x00AA, r22
}
     af8:	08 95       	ret

00000afa <servo_1_free>:


void servo_1_free (void) //makes servo 1 free rotating
{
 OCR4AH = 0x03; 
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	80 93 a9 00 	sts	0x00A9, r24
 OCR4AL = 0xFF; //Servo 1 off
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	80 93 a8 00 	sts	0x00A8, r24
}
     b06:	08 95       	ret

00000b08 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR4BH = 0x03;
     b08:	83 e0       	ldi	r24, 0x03	; 3
     b0a:	80 93 ab 00 	sts	0x00AB, r24
 OCR4BL = 0xFF; //Servo 2 off
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	80 93 aa 00 	sts	0x00AA, r24
}
     b14:	08 95       	ret

00000b16 <servo_set_pos>:
*Logic: sets initial servo position
*Example Call: servo_set_pos()
*/
void servo_set_pos(void)
{
	servo_1(155);
     b16:	8b e9       	ldi	r24, 0x9B	; 155
     b18:	0e 94 4b 05 	call	0xa96	; 0xa96 <servo_1>
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
     b1e:	9f ef       	ldi	r25, 0xFF	; 255
     b20:	ac e2       	ldi	r26, 0x2C	; 44
     b22:	81 50       	subi	r24, 0x01	; 1
     b24:	90 40       	sbci	r25, 0x00	; 0
     b26:	a0 40       	sbci	r26, 0x00	; 0
     b28:	e1 f7       	brne	.-8      	; 0xb22 <servo_set_pos+0xc>
     b2a:	00 c0       	rjmp	.+0      	; 0xb2c <servo_set_pos+0x16>
     b2c:	00 00       	nop
	_delay_ms(1000);
	servo_2(218);
     b2e:	8a ed       	ldi	r24, 0xDA	; 218
     b30:	0e 94 64 05 	call	0xac8	; 0xac8 <servo_2>
     b34:	8f ef       	ldi	r24, 0xFF	; 255
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	ac e2       	ldi	r26, 0x2C	; 44
     b3a:	81 50       	subi	r24, 0x01	; 1
     b3c:	90 40       	sbci	r25, 0x00	; 0
     b3e:	a0 40       	sbci	r26, 0x00	; 0
     b40:	e1 f7       	brne	.-8      	; 0xb3a <servo_set_pos+0x24>
     b42:	00 c0       	rjmp	.+0      	; 0xb44 <servo_set_pos+0x2e>
     b44:	00 00       	nop
	_delay_ms(1000);
	
	servo_1_free();
     b46:	0e 94 7d 05 	call	0xafa	; 0xafa <servo_1_free>
	servo_2_free();
     b4a:	0e 94 84 05 	call	0xb08	; 0xb08 <servo_2_free>
}
     b4e:	08 95       	ret

00000b50 <init_devices>:
* Example Call: init_devices();
*
*/
void init_devices(void)
{
	rgb_port_config();
     b50:	0e 94 d6 00 	call	0x1ac	; 0x1ac <rgb_port_config>
	buzzer_pin_config();
     b54:	0e 94 2a 04 	call	0x854	; 0x854 <buzzer_pin_config>
	
	color_sensor_pin_config();
     b58:	0e 94 67 02 	call	0x4ce	; 0x4ce <color_sensor_pin_config>
	color_sensor_pin_interrupt_init();
     b5c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <color_sensor_pin_interrupt_init>
	color_sensor_scaling();
     b60:	0e 94 ad 02 	call	0x55a	; 0x55a <color_sensor_scaling>
	
	motion_pin_config();
     b64:	0e 94 3b 04 	call	0x876	; 0x876 <motion_pin_config>
	servo1_pin_config(); 
     b68:	0e 94 44 04 	call	0x888	; 0x888 <servo1_pin_config>
	servo2_pin_config(); 
     b6c:	0e 94 4f 04 	call	0x89e	; 0x89e <servo2_pin_config>
	
	lcd_port_config();
     b70:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <lcd_port_config>
	adc_pin_config();
     b74:	0e 94 61 04 	call	0x8c2	; 0x8c2 <adc_pin_config>
	
	timer4_init();
     b78:	0e 94 68 04 	call	0x8d0	; 0x8d0 <timer4_init>
	timer5_init();
     b7c:	0e 94 8b 04 	call	0x916	; 0x916 <timer5_init>
	
	adc_init();
     b80:	0e 94 a3 04 	call	0x946	; 0x946 <adc_init>
	lcd_init();
     b84:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_init>
	
	PORTB = PORTB | 0xFF;	//switch of led
     b88:	85 b1       	in	r24, 0x05	; 5
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	85 b9       	out	0x05, r24	; 5
	servo_set_pos();
     b8e:	0e 94 8b 05 	call	0xb16	; 0xb16 <servo_set_pos>
}
     b92:	08 95       	ret

00000b94 <pick>:
*Output: picks up a nut
*Logic: moves arm down and grabs the nut and again moves up
*Example Call: pick()
*/
void pick(void)
{
     b94:	cf 93       	push	r28
     b96:	ca ed       	ldi	r28, 0xDA	; 218
		int i;
		
		//arm open
		for(i=218;i>=115;i--)
		{
			servo_2(i);
     b98:	8c 2f       	mov	r24, r28
     b9a:	0e 94 64 05 	call	0xac8	; 0xac8 <servo_2>
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	9f e8       	ldi	r25, 0x8F	; 143
     ba2:	01 97       	sbiw	r24, 0x01	; 1
     ba4:	f1 f7       	brne	.-4      	; 0xba2 <pick+0xe>
     ba6:	00 c0       	rjmp	.+0      	; 0xba8 <pick+0x14>
     ba8:	00 00       	nop
     baa:	c1 50       	subi	r28, 0x01	; 1
void pick(void)
{
		int i;
		
		//arm open
		for(i=218;i>=115;i--)
     bac:	c2 37       	cpi	r28, 0x72	; 114
     bae:	a1 f7       	brne	.-24     	; 0xb98 <pick+0x4>
		{
			servo_2(i);
			_delay_ms(10);
		}
		
		servo_2_free();
     bb0:	0e 94 84 05 	call	0xb08	; 0xb08 <servo_2_free>
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	9f e7       	ldi	r25, 0x7F	; 127
     bb8:	a6 e1       	ldi	r26, 0x16	; 22
     bba:	81 50       	subi	r24, 0x01	; 1
     bbc:	90 40       	sbci	r25, 0x00	; 0
     bbe:	a0 40       	sbci	r26, 0x00	; 0
     bc0:	e1 f7       	brne	.-8      	; 0xbba <pick+0x26>
     bc2:	00 c0       	rjmp	.+0      	; 0xbc4 <pick+0x30>
     bc4:	00 00       	nop
     bc6:	ca ea       	ldi	r28, 0xAA	; 170
		_delay_ms(500);
		
		//arm down
		for(i=170;i>=90;i--)
		{
			servo_1(i);
     bc8:	8c 2f       	mov	r24, r28
     bca:	0e 94 4b 05 	call	0xa96	; 0xa96 <servo_1>
     bce:	af ef       	ldi	r26, 0xFF	; 255
     bd0:	bf e8       	ldi	r27, 0x8F	; 143
     bd2:	11 97       	sbiw	r26, 0x01	; 1
     bd4:	f1 f7       	brne	.-4      	; 0xbd2 <pick+0x3e>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <pick+0x44>
     bd8:	00 00       	nop
     bda:	c1 50       	subi	r28, 0x01	; 1
		
		servo_2_free();
		_delay_ms(500);
		
		//arm down
		for(i=170;i>=90;i--)
     bdc:	c9 35       	cpi	r28, 0x59	; 89
     bde:	a1 f7       	brne	.-24     	; 0xbc8 <pick+0x34>
		{
			servo_1(i);
			_delay_ms(10);
		}
		servo_1_free();
     be0:	0e 94 7d 05 	call	0xafa	; 0xafa <servo_1_free>
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	9f e7       	ldi	r25, 0x7F	; 127
     be8:	a6 e1       	ldi	r26, 0x16	; 22
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	90 40       	sbci	r25, 0x00	; 0
     bee:	a0 40       	sbci	r26, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <pick+0x56>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <pick+0x60>
     bf4:	00 00       	nop
     bf6:	c3 e7       	ldi	r28, 0x73	; 115
		_delay_ms(500);
		
		//arm close
		for(i=115;i<=218;i++)
		{
			servo_2(i);
     bf8:	8c 2f       	mov	r24, r28
     bfa:	0e 94 64 05 	call	0xac8	; 0xac8 <servo_2>
     bfe:	af ef       	ldi	r26, 0xFF	; 255
     c00:	bf e8       	ldi	r27, 0x8F	; 143
     c02:	11 97       	sbiw	r26, 0x01	; 1
     c04:	f1 f7       	brne	.-4      	; 0xc02 <pick+0x6e>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <pick+0x74>
     c08:	00 00       	nop
     c0a:	cf 5f       	subi	r28, 0xFF	; 255
		}
		servo_1_free();
		_delay_ms(500);
		
		//arm close
		for(i=115;i<=218;i++)
     c0c:	cb 3d       	cpi	r28, 0xDB	; 219
     c0e:	a1 f7       	brne	.-24     	; 0xbf8 <pick+0x64>
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	9f e7       	ldi	r25, 0x7F	; 127
     c14:	a6 e1       	ldi	r26, 0x16	; 22
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	90 40       	sbci	r25, 0x00	; 0
     c1a:	a0 40       	sbci	r26, 0x00	; 0
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <pick+0x82>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <pick+0x8c>
     c20:	00 00       	nop
     c22:	ca e5       	ldi	r28, 0x5A	; 90
		_delay_ms(500);
		
		//arm up
		for(i=90;i<=170;i++)
		{
			servo_1(i);
     c24:	8c 2f       	mov	r24, r28
     c26:	0e 94 4b 05 	call	0xa96	; 0xa96 <servo_1>
     c2a:	af ef       	ldi	r26, 0xFF	; 255
     c2c:	bf e8       	ldi	r27, 0x8F	; 143
     c2e:	11 97       	sbiw	r26, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <pick+0x9a>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <pick+0xa0>
     c34:	00 00       	nop
     c36:	cf 5f       	subi	r28, 0xFF	; 255
		}
		//servo_2_free();
		_delay_ms(500);
		
		//arm up
		for(i=90;i<=170;i++)
     c38:	cb 3a       	cpi	r28, 0xAB	; 171
     c3a:	a1 f7       	brne	.-24     	; 0xc24 <pick+0x90>
		{
			servo_1(i);
			_delay_ms(10);
		}
		servo_1_free();
     c3c:	0e 94 7d 05 	call	0xafa	; 0xafa <servo_1_free>
		servo_2_free();
     c40:	0e 94 84 05 	call	0xb08	; 0xb08 <servo_2_free>
}
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <place>:
*Output: places a nut
*Logic: moves arm down and leaves the nut and again moves up
*Example Call: pick()
*/
void place(void)
{
     c48:	cf 93       	push	r28
     c4a:	ca ea       	ldi	r28, 0xAA	; 170
		int i;
		//arm down
		for(i=170;i>=90;i--)
		{
			servo_1(i);
     c4c:	8c 2f       	mov	r24, r28
     c4e:	0e 94 4b 05 	call	0xa96	; 0xa96 <servo_1>
     c52:	8f ef       	ldi	r24, 0xFF	; 255
     c54:	9f e8       	ldi	r25, 0x8F	; 143
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <place+0xe>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <place+0x14>
     c5c:	00 00       	nop
     c5e:	c1 50       	subi	r28, 0x01	; 1
*/
void place(void)
{
		int i;
		//arm down
		for(i=170;i>=90;i--)
     c60:	c9 35       	cpi	r28, 0x59	; 89
     c62:	a1 f7       	brne	.-24     	; 0xc4c <place+0x4>
		{
			servo_1(i);
			_delay_ms(10);
		}
		servo_1_free();
     c64:	0e 94 7d 05 	call	0xafa	; 0xafa <servo_1_free>
     c68:	8f ef       	ldi	r24, 0xFF	; 255
     c6a:	9f e7       	ldi	r25, 0x7F	; 127
     c6c:	a6 e1       	ldi	r26, 0x16	; 22
     c6e:	81 50       	subi	r24, 0x01	; 1
     c70:	90 40       	sbci	r25, 0x00	; 0
     c72:	a0 40       	sbci	r26, 0x00	; 0
     c74:	e1 f7       	brne	.-8      	; 0xc6e <place+0x26>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <place+0x30>
     c78:	00 00       	nop
     c7a:	ca ed       	ldi	r28, 0xDA	; 218
		_delay_ms(500);
		
		//arm open
		for(i=218;i>=115;i--)
		{
			servo_2(i);
     c7c:	8c 2f       	mov	r24, r28
     c7e:	0e 94 64 05 	call	0xac8	; 0xac8 <servo_2>
     c82:	af ef       	ldi	r26, 0xFF	; 255
     c84:	bf e8       	ldi	r27, 0x8F	; 143
     c86:	11 97       	sbiw	r26, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <place+0x3e>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <place+0x44>
     c8c:	00 00       	nop
     c8e:	c1 50       	subi	r28, 0x01	; 1
		}
		servo_1_free();
		_delay_ms(500);
		
		//arm open
		for(i=218;i>=115;i--)
     c90:	c2 37       	cpi	r28, 0x72	; 114
     c92:	a1 f7       	brne	.-24     	; 0xc7c <place+0x34>
		{
			servo_2(i);
			_delay_ms(10);
		}
		servo_2_free();
     c94:	0e 94 84 05 	call	0xb08	; 0xb08 <servo_2_free>
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	9f e7       	ldi	r25, 0x7F	; 127
     c9c:	a6 e1       	ldi	r26, 0x16	; 22
     c9e:	81 50       	subi	r24, 0x01	; 1
     ca0:	90 40       	sbci	r25, 0x00	; 0
     ca2:	a0 40       	sbci	r26, 0x00	; 0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <place+0x56>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <place+0x60>
     ca8:	00 00       	nop
     caa:	ca e5       	ldi	r28, 0x5A	; 90
		_delay_ms(500);
		
		//arm up
		for(i=90;i<=170;i++)
		{
			servo_1(i);
     cac:	8c 2f       	mov	r24, r28
     cae:	0e 94 4b 05 	call	0xa96	; 0xa96 <servo_1>
     cb2:	af ef       	ldi	r26, 0xFF	; 255
     cb4:	bf e8       	ldi	r27, 0x8F	; 143
     cb6:	11 97       	sbiw	r26, 0x01	; 1
     cb8:	f1 f7       	brne	.-4      	; 0xcb6 <place+0x6e>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <place+0x74>
     cbc:	00 00       	nop
     cbe:	cf 5f       	subi	r28, 0xFF	; 255
		}
		servo_2_free();
		_delay_ms(500);
		
		//arm up
		for(i=90;i<=170;i++)
     cc0:	cb 3a       	cpi	r28, 0xAB	; 171
     cc2:	a1 f7       	brne	.-24     	; 0xcac <place+0x64>
		{
			servo_1(i);
			_delay_ms(10);
		}
		servo_1_free();
     cc4:	0e 94 7d 05 	call	0xafa	; 0xafa <servo_1_free>
     cc8:	8f ef       	ldi	r24, 0xFF	; 255
     cca:	9f e7       	ldi	r25, 0x7F	; 127
     ccc:	a6 e1       	ldi	r26, 0x16	; 22
     cce:	81 50       	subi	r24, 0x01	; 1
     cd0:	90 40       	sbci	r25, 0x00	; 0
     cd2:	a0 40       	sbci	r26, 0x00	; 0
     cd4:	e1 f7       	brne	.-8      	; 0xcce <place+0x86>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <place+0x90>
     cd8:	00 00       	nop
     cda:	c3 e7       	ldi	r28, 0x73	; 115
			_delay_ms(500);
			
		//arm close
		for(i=115;i<=220;i++)
		{
			servo_2(i);
     cdc:	8c 2f       	mov	r24, r28
     cde:	0e 94 64 05 	call	0xac8	; 0xac8 <servo_2>
     ce2:	af ef       	ldi	r26, 0xFF	; 255
     ce4:	bf e8       	ldi	r27, 0x8F	; 143
     ce6:	11 97       	sbiw	r26, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <place+0x9e>
     cea:	00 c0       	rjmp	.+0      	; 0xcec <place+0xa4>
     cec:	00 00       	nop
     cee:	cf 5f       	subi	r28, 0xFF	; 255
		servo_1_free();
		
			_delay_ms(500);
			
		//arm close
		for(i=115;i<=220;i++)
     cf0:	cd 3d       	cpi	r28, 0xDD	; 221
     cf2:	a1 f7       	brne	.-24     	; 0xcdc <place+0x94>
		{
			servo_2(i);
			_delay_ms(10);
		}
		servo_2_free();
     cf4:	0e 94 84 05 	call	0xb08	; 0xb08 <servo_2_free>
     cf8:	8f ef       	ldi	r24, 0xFF	; 255
     cfa:	9f e7       	ldi	r25, 0x7F	; 127
     cfc:	a6 e1       	ldi	r26, 0x16	; 22
     cfe:	81 50       	subi	r24, 0x01	; 1
     d00:	90 40       	sbci	r25, 0x00	; 0
     d02:	a0 40       	sbci	r26, 0x00	; 0
     d04:	e1 f7       	brne	.-8      	; 0xcfe <place+0xb6>
     d06:	00 c0       	rjmp	.+0      	; 0xd08 <place+0xc0>
     d08:	00 00       	nop
		_delay_ms(500);
}
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <init>:
* Logic: initialize front and rear of queue
* Example Call: init(&q);
*
*/
void init(queue *q)
{
     d0e:	fc 01       	movw	r30, r24
	q->front = -1;
     d10:	8f ef       	ldi	r24, 0xFF	; 255
     d12:	9f ef       	ldi	r25, 0xFF	; 255
     d14:	95 af       	sts	0x75, r25
     d16:	84 af       	sts	0x74, r24
	q->rear = -1;
     d18:	97 af       	sts	0x77, r25
     d1a:	86 af       	sts	0x76, r24
}
     d1c:	08 95       	ret

00000d1e <enqueue>:
* Logic: inserts an element in queue
* Example Call: enqueue(&q,data)
*
*/
void enqueue(queue *q, int data)
{
     d1e:	fc 01       	movw	r30, r24
	if (q->rear == MAX - 1)
     d20:	86 ad       	sts	0x66, r24
     d22:	97 ad       	sts	0x67, r25
     d24:	8d 31       	cpi	r24, 0x1D	; 29
     d26:	91 05       	cpc	r25, r1
     d28:	d1 f0       	breq	.+52     	; 0xd5e <enqueue+0x40>
		return;
	else if (q->rear == -1 && q->front == -1)
     d2a:	2f ef       	ldi	r18, 0xFF	; 255
     d2c:	8f 3f       	cpi	r24, 0xFF	; 255
     d2e:	92 07       	cpc	r25, r18
     d30:	69 f4       	brne	.+26     	; 0xd4c <enqueue+0x2e>
     d32:	24 ad       	sts	0x64, r18
     d34:	35 ad       	sts	0x65, r19
     d36:	4f ef       	ldi	r20, 0xFF	; 255
     d38:	2f 3f       	cpi	r18, 0xFF	; 255
     d3a:	34 07       	cpc	r19, r20
     d3c:	39 f4       	brne	.+14     	; 0xd4c <enqueue+0x2e>
	{
		q->rear = q->front = 0;
     d3e:	15 ae       	sts	0xb5, r17
     d40:	14 ae       	sts	0xb4, r17
     d42:	17 ae       	sts	0xb7, r17
     d44:	16 ae       	sts	0xb6, r17
		q->data[q->rear] = data;
     d46:	71 83       	std	Z+1, r23	; 0x01
     d48:	60 83       	st	Z, r22
     d4a:	08 95       	ret
	}
	else
	{
		q->rear++;
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	97 af       	sts	0x77, r25
     d50:	86 af       	sts	0x76, r24
		q->data[q->rear] = data;
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	e8 0f       	add	r30, r24
     d58:	f9 1f       	adc	r31, r25
     d5a:	71 83       	std	Z+1, r23	; 0x01
     d5c:	60 83       	st	Z, r22
     d5e:	08 95       	ret

00000d60 <dequeue>:
* Logic: deletes an element from queue
* Example Call: dequeue(&q)
*
*/
int dequeue(queue *q)
{
     d60:	fc 01       	movw	r30, r24
	int temp;
	if (q->rear == -1 && q->front == -1)
     d62:	26 ad       	sts	0x66, r18
     d64:	37 ad       	sts	0x67, r19
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	2f 3f       	cpi	r18, 0xFF	; 255
     d6a:	38 07       	cpc	r19, r24
     d6c:	39 f4       	brne	.+14     	; 0xd7c <dequeue+0x1c>
     d6e:	84 ad       	sts	0x64, r24
     d70:	95 ad       	sts	0x65, r25
     d72:	2f ef       	ldi	r18, 0xFF	; 255
     d74:	8f 3f       	cpi	r24, 0xFF	; 255
     d76:	92 07       	cpc	r25, r18
     d78:	a9 f4       	brne	.+42     	; 0xda4 <dequeue+0x44>
     d7a:	20 c0       	rjmp	.+64     	; 0xdbc <dequeue+0x5c>
		return -1;
	else if (q->front == q->rear)
     d7c:	84 ad       	sts	0x64, r24
     d7e:	95 ad       	sts	0x65, r25
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	79 f4       	brne	.+30     	; 0xda4 <dequeue+0x44>
	{
		temp = q->data[q->front];
     d86:	d9 01       	movw	r26, r18
     d88:	aa 0f       	add	r26, r26
     d8a:	bb 1f       	adc	r27, r27
     d8c:	ae 0f       	add	r26, r30
     d8e:	bf 1f       	adc	r27, r31
     d90:	2d 91       	ld	r18, X+
     d92:	3c 91       	ld	r19, X
     d94:	11 97       	sbiw	r26, 0x01	; 1
		q->front = -1;
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	9f ef       	ldi	r25, 0xFF	; 255
     d9a:	95 af       	sts	0x75, r25
     d9c:	84 af       	sts	0x74, r24
		q->rear = -1;
     d9e:	97 af       	sts	0x77, r25
     da0:	86 af       	sts	0x76, r24
     da2:	0e c0       	rjmp	.+28     	; 0xdc0 <dequeue+0x60>
	}
	else
	{
		temp = q->data[q->front];
     da4:	dc 01       	movw	r26, r24
     da6:	aa 0f       	add	r26, r26
     da8:	bb 1f       	adc	r27, r27
     daa:	ae 0f       	add	r26, r30
     dac:	bf 1f       	adc	r27, r31
     dae:	2d 91       	ld	r18, X+
     db0:	3c 91       	ld	r19, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
		q->front++;
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	95 af       	sts	0x75, r25
     db8:	84 af       	sts	0x74, r24
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <dequeue+0x60>
*/
int dequeue(queue *q)
{
	int temp;
	if (q->rear == -1 && q->front == -1)
		return -1;
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
	{
		temp = q->data[q->front];
		q->front++;
	}
	return temp;
}
     dc0:	82 2f       	mov	r24, r18
     dc2:	93 2f       	mov	r25, r19
     dc4:	08 95       	ret

00000dc6 <isEmpty>:
* Logic: checks if front and rear of queue bot are -1 if true queue is empty else not
* Example Call: isEmpty(&q)
*
*/
int isEmpty(queue *q)
{
     dc6:	fc 01       	movw	r30, r24
	if (q->rear == -1 && q->front == -1)
     dc8:	86 ad       	sts	0x66, r24
     dca:	97 ad       	sts	0x67, r25
     dcc:	2f ef       	ldi	r18, 0xFF	; 255
     dce:	8f 3f       	cpi	r24, 0xFF	; 255
     dd0:	92 07       	cpc	r25, r18
     dd2:	59 f4       	brne	.+22     	; 0xdea <isEmpty+0x24>
* Output: int (returns 1 if empty and 0 if not empty)
* Logic: checks if front and rear of queue bot are -1 if true queue is empty else not
* Example Call: isEmpty(&q)
*
*/
int isEmpty(queue *q)
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	24 ad       	sts	0x64, r18
     dda:	35 ad       	sts	0x65, r19
     ddc:	4f ef       	ldi	r20, 0xFF	; 255
     dde:	2f 3f       	cpi	r18, 0xFF	; 255
     de0:	34 07       	cpc	r19, r20
     de2:	29 f0       	breq	.+10     	; 0xdee <isEmpty+0x28>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	08 95       	ret
{
	if (q->rear == -1 && q->front == -1)
		return 1;
	else
		return 0;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
}
     dee:	08 95       	ret

00000df0 <create_adjacency_matrix>:
* Example Call: create_adjacency_matrix(nodes)
*
*/

void create_adjacency_matrix(int no_of_node)
{
     df0:	9c 01       	movw	r18, r24
	int i, j;
	for (i = 0; i < no_of_node; i++)
     df2:	18 16       	cp	r1, r24
     df4:	19 06       	cpc	r1, r25
     df6:	6c f0       	brlt	.+26     	; 0xe12 <create_adjacency_matrix+0x22>
     df8:	1d c0       	rjmp	.+58     	; 0xe34 <create_adjacency_matrix+0x44>
	{
		for (j = 0; j < no_of_node; j++)
		{
			graph[i][j] = 0;	
     dfa:	11 92       	st	Z+, r1
     dfc:	11 92       	st	Z+, r1
void create_adjacency_matrix(int no_of_node)
{
	int i, j;
	for (i = 0; i < no_of_node; i++)
	{
		for (j = 0; j < no_of_node; j++)
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	82 17       	cp	r24, r18
     e02:	93 07       	cpc	r25, r19
     e04:	d1 f7       	brne	.-12     	; 0xdfa <create_adjacency_matrix+0xa>
*/

void create_adjacency_matrix(int no_of_node)
{
	int i, j;
	for (i = 0; i < no_of_node; i++)
     e06:	4f 5f       	subi	r20, 0xFF	; 255
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	42 17       	cp	r20, r18
     e0c:	53 07       	cpc	r21, r19
     e0e:	39 f4       	brne	.+14     	; 0xe1e <create_adjacency_matrix+0x2e>
     e10:	11 c0       	rjmp	.+34     	; 0xe34 <create_adjacency_matrix+0x44>
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
* Logic: represents graphical arena in a matrix. If there is an edge between node 1 and node 2 then graph[1][2]=1 and graph[2][1]=1 and if no edge then 0
* Example Call: create_adjacency_matrix(nodes)
*
*/

void create_adjacency_matrix(int no_of_node)
     e16:	6c e3       	ldi	r22, 0x3C	; 60
     e18:	70 e0       	ldi	r23, 0x00	; 0
     e1a:	a0 e0       	ldi	r26, 0x00	; 0
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	46 9f       	mul	r20, r22
     e20:	f0 01       	movw	r30, r0
     e22:	47 9f       	mul	r20, r23
     e24:	f0 0d       	add	r31, r0
     e26:	56 9f       	mul	r21, r22
     e28:	f0 0d       	add	r31, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	e6 58       	subi	r30, 0x86	; 134
     e2e:	fd 4f       	sbci	r31, 0xFD	; 253
     e30:	cd 01       	movw	r24, r26
     e32:	e3 cf       	rjmp	.-58     	; 0xdfa <create_adjacency_matrix+0xa>
			graph[i][j] = 0;	
		}
	}


	graph[0][2] = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	90 93 7f 02 	sts	0x027F, r25
     e3c:	80 93 7e 02 	sts	0x027E, r24
	graph[2][3] = 1;
     e40:	90 93 f9 02 	sts	0x02F9, r25
     e44:	80 93 f8 02 	sts	0x02F8, r24
	graph[2][4] = 1;
     e48:	90 93 fb 02 	sts	0x02FB, r25
     e4c:	80 93 fa 02 	sts	0x02FA, r24
	graph[2][14] = 1;
     e50:	90 93 0f 03 	sts	0x030F, r25
     e54:	80 93 0e 03 	sts	0x030E, r24
	graph[4][5] = 1;
     e58:	90 93 75 03 	sts	0x0375, r25
     e5c:	80 93 74 03 	sts	0x0374, r24
	graph[14][15] = 1;
     e60:	90 93 e1 05 	sts	0x05E1, r25
     e64:	80 93 e0 05 	sts	0x05E0, r24
	graph[5][6] = 1;
     e68:	90 93 b3 03 	sts	0x03B3, r25
     e6c:	80 93 b2 03 	sts	0x03B2, r24
	graph[15][16] = 1;
     e70:	90 93 1f 06 	sts	0x061F, r25
     e74:	80 93 1e 06 	sts	0x061E, r24
	graph[6][7] = 1;
     e78:	90 93 f1 03 	sts	0x03F1, r25
     e7c:	80 93 f0 03 	sts	0x03F0, r24
	graph[16][17] = 1;
     e80:	90 93 5d 06 	sts	0x065D, r25
     e84:	80 93 5c 06 	sts	0x065C, r24
	graph[7][8] = 1;
     e88:	90 93 2f 04 	sts	0x042F, r25
     e8c:	80 93 2e 04 	sts	0x042E, r24
	graph[17][18] = 1;
     e90:	90 93 9b 06 	sts	0x069B, r25
     e94:	80 93 9a 06 	sts	0x069A, r24
	graph[4][9] = 1;
     e98:	90 93 7d 03 	sts	0x037D, r25
     e9c:	80 93 7c 03 	sts	0x037C, r24
	graph[14][19] = 1;
     ea0:	90 93 e9 05 	sts	0x05E9, r25
     ea4:	80 93 e8 05 	sts	0x05E8, r24
	graph[9][10] = 1;
     ea8:	90 93 ab 04 	sts	0x04AB, r25
     eac:	80 93 aa 04 	sts	0x04AA, r24
	graph[19][20] = 1;
     eb0:	90 93 17 07 	sts	0x0717, r25
     eb4:	80 93 16 07 	sts	0x0716, r24
	graph[7][10] = 1;
     eb8:	90 93 33 04 	sts	0x0433, r25
     ebc:	80 93 32 04 	sts	0x0432, r24
	graph[17][20] = 1;
     ec0:	90 93 9f 06 	sts	0x069F, r25
     ec4:	80 93 9e 06 	sts	0x069E, r24
	graph[19][22] = 1;
     ec8:	90 93 1b 07 	sts	0x071B, r25
     ecc:	80 93 1a 07 	sts	0x071A, r24
	graph[9][12] = 1;
     ed0:	90 93 af 04 	sts	0x04AF, r25
     ed4:	80 93 ae 04 	sts	0x04AE, r24
	graph[10][13] = 1;
     ed8:	90 93 ed 04 	sts	0x04ED, r25
     edc:	80 93 ec 04 	sts	0x04EC, r24
	graph[20][23] = 1;
     ee0:	90 93 59 07 	sts	0x0759, r25
     ee4:	80 93 58 07 	sts	0x0758, r24
	graph[3][11] = 1;
     ee8:	90 93 45 03 	sts	0x0345, r25
     eec:	80 93 44 03 	sts	0x0344, r24
	graph[11][12] = 1;
     ef0:	90 93 27 05 	sts	0x0527, r25
     ef4:	80 93 26 05 	sts	0x0526, r24
	graph[12][13] = 1;
     ef8:	90 93 65 05 	sts	0x0565, r25
     efc:	80 93 64 05 	sts	0x0564, r24
	graph[3][21] = 1;
     f00:	90 93 59 03 	sts	0x0359, r25
     f04:	80 93 58 03 	sts	0x0358, r24
	graph[21][22] = 1;
     f08:	90 93 93 07 	sts	0x0793, r25
     f0c:	80 93 92 07 	sts	0x0792, r24
	graph[22][23] = 1;
     f10:	90 93 d1 07 	sts	0x07D1, r25
     f14:	80 93 d0 07 	sts	0x07D0, r24
	graph[15][1] = 1;
     f18:	90 93 01 06 	sts	0x0601, r25
     f1c:	80 93 00 06 	sts	0x0600, r24
	graph[5][1] = 1;
     f20:	90 93 a9 03 	sts	0x03A9, r25
     f24:	80 93 a8 03 	sts	0x03A8, r24
	graph[1][24] = 1;
     f28:	90 93 e7 02 	sts	0x02E7, r25
     f2c:	80 93 e6 02 	sts	0x02E6, r24
	graph[24][25] = 1;
     f30:	90 93 4d 08 	sts	0x084D, r25
     f34:	80 93 4c 08 	sts	0x084C, r24
	graph[25][26] = 1;
     f38:	90 93 8b 08 	sts	0x088B, r25
     f3c:	80 93 8a 08 	sts	0x088A, r24
	graph[25][27] = 1;
     f40:	90 93 8d 08 	sts	0x088D, r25
     f44:	80 93 8c 08 	sts	0x088C, r24
	 


	graph[2][0] = 1;
     f48:	90 93 f3 02 	sts	0x02F3, r25
     f4c:	80 93 f2 02 	sts	0x02F2, r24
	graph[3][2] = 1;
     f50:	90 93 33 03 	sts	0x0333, r25
     f54:	80 93 32 03 	sts	0x0332, r24
	graph[4][2] = 1;
     f58:	90 93 6f 03 	sts	0x036F, r25
     f5c:	80 93 6e 03 	sts	0x036E, r24
	graph[14][2] = 1;
     f60:	90 93 c7 05 	sts	0x05C7, r25
     f64:	80 93 c6 05 	sts	0x05C6, r24
	graph[5][4] = 1;
     f68:	90 93 af 03 	sts	0x03AF, r25
     f6c:	80 93 ae 03 	sts	0x03AE, r24
	graph[15][14] = 1;
     f70:	90 93 1b 06 	sts	0x061B, r25
     f74:	80 93 1a 06 	sts	0x061A, r24
	graph[6][5] = 1;
     f78:	90 93 ed 03 	sts	0x03ED, r25
     f7c:	80 93 ec 03 	sts	0x03EC, r24
	graph[16][15] = 1;
     f80:	90 93 59 06 	sts	0x0659, r25
     f84:	80 93 58 06 	sts	0x0658, r24
	graph[7][6] = 1;
     f88:	90 93 2b 04 	sts	0x042B, r25
     f8c:	80 93 2a 04 	sts	0x042A, r24
	graph[17][16] = 1;
     f90:	90 93 97 06 	sts	0x0697, r25
     f94:	80 93 96 06 	sts	0x0696, r24
	graph[8][7] = 1;
     f98:	90 93 69 04 	sts	0x0469, r25
     f9c:	80 93 68 04 	sts	0x0468, r24
	graph[18][17] = 1;
     fa0:	90 93 d5 06 	sts	0x06D5, r25
     fa4:	80 93 d4 06 	sts	0x06D4, r24
	graph[9][4] = 1;
     fa8:	90 93 9f 04 	sts	0x049F, r25
     fac:	80 93 9e 04 	sts	0x049E, r24
	graph[19][14] = 1;
     fb0:	90 93 0b 07 	sts	0x070B, r25
     fb4:	80 93 0a 07 	sts	0x070A, r24
	graph[10][9] = 1;
     fb8:	90 93 e5 04 	sts	0x04E5, r25
     fbc:	80 93 e4 04 	sts	0x04E4, r24
	graph[20][19] = 1;
     fc0:	90 93 51 07 	sts	0x0751, r25
     fc4:	80 93 50 07 	sts	0x0750, r24
	graph[10][7] = 1;
     fc8:	90 93 e1 04 	sts	0x04E1, r25
     fcc:	80 93 e0 04 	sts	0x04E0, r24
	graph[20][17] = 1;
     fd0:	90 93 4d 07 	sts	0x074D, r25
     fd4:	80 93 4c 07 	sts	0x074C, r24
	graph[22][19] = 1;
     fd8:	90 93 c9 07 	sts	0x07C9, r25
     fdc:	80 93 c8 07 	sts	0x07C8, r24
	graph[12][9] = 1;
     fe0:	90 93 5d 05 	sts	0x055D, r25
     fe4:	80 93 5c 05 	sts	0x055C, r24
	graph[13][10] = 1;
     fe8:	90 93 9b 05 	sts	0x059B, r25
     fec:	80 93 9a 05 	sts	0x059A, r24
	graph[23][20] = 1;
     ff0:	90 93 07 08 	sts	0x0807, r25
     ff4:	80 93 06 08 	sts	0x0806, r24
	graph[11][3] = 1;
     ff8:	90 93 15 05 	sts	0x0515, r25
     ffc:	80 93 14 05 	sts	0x0514, r24
	graph[12][11] = 1;
    1000:	90 93 61 05 	sts	0x0561, r25
    1004:	80 93 60 05 	sts	0x0560, r24
	graph[13][12] = 1;
    1008:	90 93 9f 05 	sts	0x059F, r25
    100c:	80 93 9e 05 	sts	0x059E, r24
	graph[21][3] = 1;
    1010:	90 93 6d 07 	sts	0x076D, r25
    1014:	80 93 6c 07 	sts	0x076C, r24
	graph[22][21] = 1;
    1018:	90 93 cd 07 	sts	0x07CD, r25
    101c:	80 93 cc 07 	sts	0x07CC, r24
	graph[23][22] = 1;
    1020:	90 93 0b 08 	sts	0x080B, r25
    1024:	80 93 0a 08 	sts	0x080A, r24
	graph[1][15] = 1;
    1028:	90 93 d5 02 	sts	0x02D5, r25
    102c:	80 93 d4 02 	sts	0x02D4, r24
	graph[1][5] = 1;
    1030:	90 93 c1 02 	sts	0x02C1, r25
    1034:	80 93 c0 02 	sts	0x02C0, r24
	graph[24][1] = 1;
    1038:	90 93 1d 08 	sts	0x081D, r25
    103c:	80 93 1c 08 	sts	0x081C, r24
	graph[25][24] = 1;
    1040:	90 93 87 08 	sts	0x0887, r25
    1044:	80 93 86 08 	sts	0x0886, r24
	graph[26][25] = 1;
    1048:	90 93 c5 08 	sts	0x08C5, r25
    104c:	80 93 c4 08 	sts	0x08C4, r24
	graph[27][25] = 1;
    1050:	90 93 01 09 	sts	0x0901, r25
    1054:	80 93 00 09 	sts	0x0900, r24
}
    1058:	08 95       	ret

0000105a <breadth_first_search>:
* Logic: uses breadth first search algorithm to find path between the given nodes and stores path in path[] array
* Example Call: breadth_first_search(source,dest)
*
*/
void breadth_first_search(int source, int dest)
{
    105a:	2f 92       	push	r2
    105c:	3f 92       	push	r3
    105e:	4f 92       	push	r4
    1060:	5f 92       	push	r5
    1062:	6f 92       	push	r6
    1064:	7f 92       	push	r7
    1066:	8f 92       	push	r8
    1068:	9f 92       	push	r9
    106a:	af 92       	push	r10
    106c:	bf 92       	push	r11
    106e:	cf 92       	push	r12
    1070:	df 92       	push	r13
    1072:	ef 92       	push	r14
    1074:	ff 92       	push	r15
    1076:	0f 93       	push	r16
    1078:	1f 93       	push	r17
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	c6 5c       	subi	r28, 0xC6	; 198
    1084:	d0 40       	sbci	r29, 0x00	; 0
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cd 53       	subi	r28, 0x3D	; 61
    1092:	df 4f       	sbci	r29, 0xFF	; 255
    1094:	99 83       	std	Y+1, r25	; 0x01
    1096:	88 83       	st	Y, r24
    1098:	c3 5c       	subi	r28, 0xC3	; 195
    109a:	d0 40       	sbci	r29, 0x00	; 0
    109c:	cb 53       	subi	r28, 0x3B	; 59
    109e:	df 4f       	sbci	r29, 0xFF	; 255
    10a0:	68 83       	st	Y, r22
    10a2:	c5 5c       	subi	r28, 0xC5	; 197
    10a4:	d0 40       	sbci	r29, 0x00	; 0
    10a6:	ca 53       	subi	r28, 0x3A	; 58
    10a8:	df 4f       	sbci	r29, 0xFF	; 255
    10aa:	78 83       	st	Y, r23
    10ac:	c6 5c       	subi	r28, 0xC6	; 198
    10ae:	d0 40       	sbci	r29, 0x00	; 0
	int no_nodes=28,path1[20];
	queue q;
	init(&q);
    10b0:	ce 01       	movw	r24, r28
    10b2:	89 96       	adiw	r24, 0x29	; 41
    10b4:	0e 94 87 06 	call	0xd0e	; 0xd0e <init>
    10b8:	8e 01       	movw	r16, r28
    10ba:	0b 55       	subi	r16, 0x5B	; 91
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	0f 2e       	mov	r0, r31
    10c0:	f9 e6       	ldi	r31, 0x69	; 105
    10c2:	ef 2e       	mov	r14, r31
    10c4:	ff 24       	eor	r15, r15
    10c6:	f0 2d       	mov	r31, r0
    10c8:	ec 0e       	add	r14, r28
    10ca:	fd 1e       	adc	r15, r29
* Output: void
* Logic: uses breadth first search algorithm to find path between the given nodes and stores path in path[] array
* Example Call: breadth_first_search(source,dest)
*
*/
void breadth_first_search(int source, int dest)
    10cc:	c8 01       	movw	r24, r16
    10ce:	4c 96       	adiw	r24, 0x1c	; 28
    10d0:	d7 01       	movw	r26, r14
    10d2:	f8 01       	movw	r30, r16
	int distance[30], previous[30], u, v, i, j = 0; //f = 0;
	char color[30];
	for (v = 0; v < no_nodes; v++)	//initialise distance of all nodes=-1 , color='w' and preious=-1
	{
		distance[v] = -1;
		color[v] = 'w';
    10d4:	47 e7       	ldi	r20, 0x77	; 119
		previous[v] = -1;
    10d6:	2f ef       	ldi	r18, 0xFF	; 255
    10d8:	3f ef       	ldi	r19, 0xFF	; 255
	int distance[30], previous[30], u, v, i, j = 0; //f = 0;
	char color[30];
	for (v = 0; v < no_nodes; v++)	//initialise distance of all nodes=-1 , color='w' and preious=-1
	{
		distance[v] = -1;
		color[v] = 'w';
    10da:	41 93       	st	Z+, r20
		previous[v] = -1;
    10dc:	2d 93       	st	X+, r18
    10de:	3d 93       	st	X+, r19
	int no_nodes=28,path1[20];
	queue q;
	init(&q);
	int distance[30], previous[30], u, v, i, j = 0; //f = 0;
	char color[30];
	for (v = 0; v < no_nodes; v++)	//initialise distance of all nodes=-1 , color='w' and preious=-1
    10e0:	e8 17       	cp	r30, r24
    10e2:	f9 07       	cpc	r31, r25
    10e4:	d1 f7       	brne	.-12     	; 0x10da <breadth_first_search+0x80>
		distance[v] = -1;
		color[v] = 'w';
		previous[v] = -1;
	}
	distance[source] = 0;					//distance of source node is 0
	color[source] = 'g';					//color is made grey as it is visited
    10e6:	e5 ea       	ldi	r30, 0xA5	; 165
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	ec 0f       	add	r30, r28
    10ec:	fd 1f       	adc	r31, r29
    10ee:	cd 53       	subi	r28, 0x3D	; 61
    10f0:	df 4f       	sbci	r29, 0xFF	; 255
    10f2:	28 81       	ld	r18, Y
    10f4:	39 81       	ldd	r19, Y+1	; 0x01
    10f6:	c3 5c       	subi	r28, 0xC3	; 195
    10f8:	d0 40       	sbci	r29, 0x00	; 0
    10fa:	e2 0f       	add	r30, r18
    10fc:	f3 1f       	adc	r31, r19
    10fe:	87 e6       	ldi	r24, 0x67	; 103
    1100:	80 83       	st	Z, r24
	previous[source] = source;				//previous of source is source
    1102:	f9 01       	movw	r30, r18
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	89 e6       	ldi	r24, 0x69	; 105
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	8c 0f       	add	r24, r28
    110e:	9d 1f       	adc	r25, r29
    1110:	e8 0f       	add	r30, r24
    1112:	f9 1f       	adc	r31, r25
    1114:	31 83       	std	Z+1, r19	; 0x01
    1116:	20 83       	st	Z, r18
	enqueue(&q, source);					//source is enqueued in queue
    1118:	ce 01       	movw	r24, r28
    111a:	89 96       	adiw	r24, 0x29	; 41
    111c:	b9 01       	movw	r22, r18
    111e:	0e 94 8f 06 	call	0xd1e	; 0xd1e <enqueue>
* Output: void
* Logic: uses breadth first search algorithm to find path between the given nodes and stores path in path[] array
* Example Call: breadth_first_search(source,dest)
*
*/
void breadth_first_search(int source, int dest)
    1122:	6e 2c       	mov	r6, r14
    1124:	5f 2c       	mov	r5, r15
    1126:	40 2e       	mov	r4, r16
    1128:	31 2e       	mov	r3, r17
		{
			if (graph[u][v] == 1)				//check adjacents nodes of current dequeued node
			{
				if (color[v] == 'w')				//if it is unvisited then visit it and enqueue it in queue and increment distance by 1
				{
					color[v] = 'g';
    112a:	0f 2e       	mov	r0, r31
    112c:	f7 e6       	ldi	r31, 0x67	; 103
    112e:	7f 2e       	mov	r7, r31
    1130:	f0 2d       	mov	r31, r0
					enqueue(&q, v);
					//printf("%d is enqueued\n", v);
				}
			}
		}
		color[u] = 'b';							//color of dequeued node is made b which indicates it is processed
    1132:	0f 2e       	mov	r0, r31
    1134:	f2 e6       	ldi	r31, 0x62	; 98
    1136:	2f 2e       	mov	r2, r31
    1138:	f0 2d       	mov	r31, r0
	distance[source] = 0;					//distance of source node is 0
	color[source] = 'g';					//color is made grey as it is visited
	previous[source] = source;				//previous of source is source
	enqueue(&q, source);					//source is enqueued in queue
	//printf("%d is enqueued\n", source);
	while (!isEmpty(&q))			
    113a:	43 c0       	rjmp	.+134    	; 0x11c2 <breadth_first_search+0x168>
	{
		u = dequeue(&q);					//dequeue front element of queue
    113c:	ce 01       	movw	r24, r28
    113e:	89 96       	adiw	r24, 0x29	; 41
    1140:	0e 94 b0 06 	call	0xd60	; 0xd60 <dequeue>
    1144:	4c 01       	movw	r8, r24
* Output: void
* Logic: uses breadth first search algorithm to find path between the given nodes and stores path in path[] array
* Example Call: breadth_first_search(source,dest)
*
*/
void breadth_first_search(int source, int dest)
    1146:	ac e3       	ldi	r26, 0x3C	; 60
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	8a 9e       	mul	r8, r26
    114c:	c0 01       	movw	r24, r0
    114e:	8b 9e       	mul	r8, r27
    1150:	90 0d       	add	r25, r0
    1152:	9a 9e       	mul	r9, r26
    1154:	90 0d       	add	r25, r0
    1156:	11 24       	eor	r1, r1
    1158:	0f 2e       	mov	r0, r31
    115a:	fa e7       	ldi	r31, 0x7A	; 122
    115c:	af 2e       	mov	r10, r31
    115e:	f2 e0       	ldi	r31, 0x02	; 2
    1160:	bf 2e       	mov	r11, r31
    1162:	f0 2d       	mov	r31, r0
    1164:	a8 0e       	add	r10, r24
    1166:	b9 1e       	adc	r11, r25
    1168:	c6 2c       	mov	r12, r6
    116a:	d5 2c       	mov	r13, r5
    116c:	e4 2c       	mov	r14, r4
    116e:	f3 2c       	mov	r15, r3
	//printf("%d is enqueued\n", source);
	while (!isEmpty(&q))			
	{
		u = dequeue(&q);					//dequeue front element of queue
		//printf("%d is dequeued\n", u);
		for (v = 0; v < no_nodes; v++)			//loop to process all nodes
    1170:	00 e0       	ldi	r16, 0x00	; 0
    1172:	10 e0       	ldi	r17, 0x00	; 0
		{
			if (graph[u][v] == 1)				//check adjacents nodes of current dequeued node
    1174:	f5 01       	movw	r30, r10
    1176:	81 91       	ld	r24, Z+
    1178:	91 91       	ld	r25, Z+
    117a:	5f 01       	movw	r10, r30
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	91 05       	cpc	r25, r1
    1180:	69 f4       	brne	.+26     	; 0x119c <breadth_first_search+0x142>
			{
				if (color[v] == 'w')				//if it is unvisited then visit it and enqueue it in queue and increment distance by 1
    1182:	d7 01       	movw	r26, r14
    1184:	8c 91       	ld	r24, X
    1186:	87 37       	cpi	r24, 0x77	; 119
    1188:	49 f4       	brne	.+18     	; 0x119c <breadth_first_search+0x142>
				{
					color[v] = 'g';
    118a:	7c 92       	st	X, r7
					distance[v] = distance[u] + 1;
					previous[v] = u;
    118c:	f6 01       	movw	r30, r12
    118e:	91 82       	std	Z+1, r9	; 0x01
    1190:	80 82       	st	Z, r8
					enqueue(&q, v);
    1192:	ce 01       	movw	r24, r28
    1194:	89 96       	adiw	r24, 0x29	; 41
    1196:	b8 01       	movw	r22, r16
    1198:	0e 94 8f 06 	call	0xd1e	; 0xd1e <enqueue>
	//printf("%d is enqueued\n", source);
	while (!isEmpty(&q))			
	{
		u = dequeue(&q);					//dequeue front element of queue
		//printf("%d is dequeued\n", u);
		for (v = 0; v < no_nodes; v++)			//loop to process all nodes
    119c:	0f 5f       	subi	r16, 0xFF	; 255
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	08 94       	sec
    11a2:	e1 1c       	adc	r14, r1
    11a4:	f1 1c       	adc	r15, r1
    11a6:	22 e0       	ldi	r18, 0x02	; 2
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	c2 0e       	add	r12, r18
    11ac:	d3 1e       	adc	r13, r19
    11ae:	0c 31       	cpi	r16, 0x1C	; 28
    11b0:	11 05       	cpc	r17, r1
    11b2:	01 f7       	brne	.-64     	; 0x1174 <breadth_first_search+0x11a>
					enqueue(&q, v);
					//printf("%d is enqueued\n", v);
				}
			}
		}
		color[u] = 'b';							//color of dequeued node is made b which indicates it is processed
    11b4:	e5 ea       	ldi	r30, 0xA5	; 165
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	ec 0f       	add	r30, r28
    11ba:	fd 1f       	adc	r31, r29
    11bc:	e8 0d       	add	r30, r8
    11be:	f9 1d       	adc	r31, r9
    11c0:	20 82       	st	Z, r2
	distance[source] = 0;					//distance of source node is 0
	color[source] = 'g';					//color is made grey as it is visited
	previous[source] = source;				//previous of source is source
	enqueue(&q, source);					//source is enqueued in queue
	//printf("%d is enqueued\n", source);
	while (!isEmpty(&q))			
    11c2:	ce 01       	movw	r24, r28
    11c4:	89 96       	adiw	r24, 0x29	; 41
    11c6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <isEmpty>
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <breadth_first_search+0x176>
    11ce:	b6 cf       	rjmp	.-148    	; 0x113c <breadth_first_search+0xe2>
		color[u] = 'b';							//color of dequeued node is made b which indicates it is processed
	}
	
	
	i = dest;
	path[0] = dest;
    11d0:	cb 53       	subi	r28, 0x3B	; 59
    11d2:	df 4f       	sbci	r29, 0xFF	; 255
    11d4:	38 81       	ld	r19, Y
    11d6:	c5 5c       	subi	r28, 0xC5	; 197
    11d8:	d0 40       	sbci	r29, 0x00	; 0
    11da:	30 93 3a 02 	sts	0x023A, r19
    11de:	ca 53       	subi	r28, 0x3A	; 58
    11e0:	df 4f       	sbci	r29, 0xFF	; 255
    11e2:	88 81       	ld	r24, Y
    11e4:	c6 5c       	subi	r28, 0xC6	; 198
    11e6:	d0 40       	sbci	r29, 0x00	; 0
    11e8:	80 93 3b 02 	sts	0x023B, r24
	path_length = 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	90 93 79 02 	sts	0x0279, r25
    11f4:	80 93 78 02 	sts	0x0278, r24
    11f8:	4c e3       	ldi	r20, 0x3C	; 60
    11fa:	52 e0       	ldi	r21, 0x02	; 2
    11fc:	da 01       	movw	r26, r20
		}
		color[u] = 'b';							//color of dequeued node is made b which indicates it is processed
	}
	
	
	i = dest;
    11fe:	83 2f       	mov	r24, r19
    1200:	ca 53       	subi	r28, 0x3A	; 58
    1202:	df 4f       	sbci	r29, 0xFF	; 255
    1204:	98 81       	ld	r25, Y
    1206:	c6 5c       	subi	r28, 0xC6	; 198
    1208:	d0 40       	sbci	r29, 0x00	; 0
	path[0] = dest;
	path_length = 1;
    120a:	21 e0       	ldi	r18, 0x01	; 1
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <breadth_first_search+0x1b8>
	do {										//store calculated path in path[] array
		path[path_length++] = previous[i];
    1210:	9b 01       	movw	r18, r22
    1212:	fc 01       	movw	r30, r24
    1214:	ee 0f       	add	r30, r30
    1216:	ff 1f       	adc	r31, r31
    1218:	89 e6       	ldi	r24, 0x69	; 105
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	8c 0f       	add	r24, r28
    121e:	9d 1f       	adc	r25, r29
    1220:	e8 0f       	add	r30, r24
    1222:	f9 1f       	adc	r31, r25
    1224:	80 81       	ld	r24, Z
    1226:	91 81       	ldd	r25, Z+1	; 0x01
    1228:	8d 93       	st	X+, r24
    122a:	9d 93       	st	X+, r25
    122c:	b9 01       	movw	r22, r18
    122e:	6f 5f       	subi	r22, 0xFF	; 255
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
		i = path[path_length - 1];
	} while (i != source);		
    1232:	cd 53       	subi	r28, 0x3D	; 61
    1234:	df 4f       	sbci	r29, 0xFF	; 255
    1236:	e8 81       	ld	r30, Y
    1238:	f9 81       	ldd	r31, Y+1	; 0x01
    123a:	c3 5c       	subi	r28, 0xC3	; 195
    123c:	d0 40       	sbci	r29, 0x00	; 0
    123e:	e8 17       	cp	r30, r24
    1240:	f9 07       	cpc	r31, r25
    1242:	31 f7       	brne	.-52     	; 0x1210 <breadth_first_search+0x1b6>
    1244:	60 93 78 02 	sts	0x0278, r22
    1248:	70 93 79 02 	sts	0x0279, r23

	for (i = 0,j= path_length -1; j>= 0; j--,i++)
    124c:	33 23       	and	r19, r19
    124e:	84 f0       	brlt	.+32     	; 0x1270 <breadth_first_search+0x216>
* Output: void
* Logic: uses breadth first search algorithm to find path between the given nodes and stores path in path[] array
* Example Call: breadth_first_search(source,dest)
*
*/
void breadth_first_search(int source, int dest)
    1250:	f9 01       	movw	r30, r18
    1252:	ee 0f       	add	r30, r30
    1254:	ff 1f       	adc	r31, r31
    1256:	e4 5c       	subi	r30, 0xC4	; 196
    1258:	fd 4f       	sbci	r31, 0xFD	; 253
	do {										//store calculated path in path[] array
		path[path_length++] = previous[i];
		i = path[path_length - 1];
	} while (i != source);		

	for (i = 0,j= path_length -1; j>= 0; j--,i++)
    125a:	de 01       	movw	r26, r28
    125c:	11 96       	adiw	r26, 0x01	; 1
* Output: void
* Logic: uses breadth first search algorithm to find path between the given nodes and stores path in path[] array
* Example Call: breadth_first_search(source,dest)
*
*/
void breadth_first_search(int source, int dest)
    125e:	2a e3       	ldi	r18, 0x3A	; 58
    1260:	32 e0       	ldi	r19, 0x02	; 2
		i = path[path_length - 1];
	} while (i != source);		

	for (i = 0,j= path_length -1; j>= 0; j--,i++)
	{
		path1[i] = path[j];
    1262:	92 91       	ld	r25, -Z
    1264:	82 91       	ld	r24, -Z
    1266:	8d 93       	st	X+, r24
    1268:	9d 93       	st	X+, r25
	do {										//store calculated path in path[] array
		path[path_length++] = previous[i];
		i = path[path_length - 1];
	} while (i != source);		

	for (i = 0,j= path_length -1; j>= 0; j--,i++)
    126a:	e2 17       	cp	r30, r18
    126c:	f3 07       	cpc	r31, r19
    126e:	c9 f7       	brne	.-14     	; 0x1262 <breadth_first_search+0x208>
	{
		path1[i] = path[j];
	}

	path[0] = -1;
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	9f ef       	ldi	r25, 0xFF	; 255
    1274:	90 93 3b 02 	sts	0x023B, r25
    1278:	80 93 3a 02 	sts	0x023A, r24
	/*if (obstacle_found == 1)
	{
		path[0] = strt_node;
	}*/

	for (i = 0; i < path_length; i++)
    127c:	16 16       	cp	r1, r22
    127e:	17 06       	cpc	r1, r23
    1280:	84 f4       	brge	.+32     	; 0x12a2 <breadth_first_search+0x248>
    1282:	fe 01       	movw	r30, r28
    1284:	31 96       	adiw	r30, 0x01	; 1
* Output: void
* Logic: uses breadth first search algorithm to find path between the given nodes and stores path in path[] array
* Example Call: breadth_first_search(source,dest)
*
*/
void breadth_first_search(int source, int dest)
    1286:	cb 01       	movw	r24, r22
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	8e 0f       	add	r24, r30
    128e:	9f 1f       	adc	r25, r31
		path[0] = strt_node;
	}*/

	for (i = 0; i < path_length; i++)
	{
		path[i+1] = path1[i];
    1290:	21 91       	ld	r18, Z+
    1292:	31 91       	ld	r19, Z+
    1294:	da 01       	movw	r26, r20
    1296:	2d 93       	st	X+, r18
    1298:	3d 93       	st	X+, r19
    129a:	ad 01       	movw	r20, r26
	/*if (obstacle_found == 1)
	{
		path[0] = strt_node;
	}*/

	for (i = 0; i < path_length; i++)
    129c:	e8 17       	cp	r30, r24
    129e:	f9 07       	cpc	r31, r25
    12a0:	b9 f7       	brne	.-18     	; 0x1290 <breadth_first_search+0x236>
	{
		path[i+1] = path1[i];
	}
	printf("\n");
    12a2:	8a e0       	ldi	r24, 0x0A	; 10
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <putchar>
	for (i = 0; i <= path_length; i++)
    12aa:	80 91 78 02 	lds	r24, 0x0278
    12ae:	90 91 79 02 	lds	r25, 0x0279
    12b2:	99 23       	and	r25, r25
    12b4:	6c f1       	brlt	.+90     	; 0x1310 <breadth_first_search+0x2b6>
    12b6:	0f 2e       	mov	r0, r31
    12b8:	fa e3       	ldi	r31, 0x3A	; 58
    12ba:	ef 2e       	mov	r14, r31
    12bc:	f2 e0       	ldi	r31, 0x02	; 2
    12be:	ff 2e       	mov	r15, r31
    12c0:	f0 2d       	mov	r31, r0
    12c2:	00 e0       	ldi	r16, 0x00	; 0
    12c4:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("%d ", path[i]);
    12c6:	0f 2e       	mov	r0, r31
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	cf 2e       	mov	r12, r31
    12cc:	f2 e0       	ldi	r31, 0x02	; 2
    12ce:	df 2e       	mov	r13, r31
    12d0:	f0 2d       	mov	r31, r0
    12d2:	f7 01       	movw	r30, r14
    12d4:	81 91       	ld	r24, Z+
    12d6:	91 91       	ld	r25, Z+
    12d8:	7f 01       	movw	r14, r30
    12da:	00 d0       	rcall	.+0      	; 0x12dc <breadth_first_search+0x282>
    12dc:	0f 92       	push	r0
    12de:	ad b7       	in	r26, 0x3d	; 61
    12e0:	be b7       	in	r27, 0x3e	; 62
    12e2:	12 96       	adiw	r26, 0x02	; 2
    12e4:	dc 92       	st	X, r13
    12e6:	ce 92       	st	-X, r12
    12e8:	11 97       	sbiw	r26, 0x01	; 1
    12ea:	14 96       	adiw	r26, 0x04	; 4
    12ec:	9c 93       	st	X, r25
    12ee:	8e 93       	st	-X, r24
    12f0:	13 97       	sbiw	r26, 0x03	; 3
    12f2:	0e 94 42 27 	call	0x4e84	; 0x4e84 <printf>
	for (i = 0; i < path_length; i++)
	{
		path[i+1] = path1[i];
	}
	printf("\n");
	for (i = 0; i <= path_length; i++)
    12f6:	0f 5f       	subi	r16, 0xFF	; 255
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	80 91 78 02 	lds	r24, 0x0278
    1306:	90 91 79 02 	lds	r25, 0x0279
    130a:	80 17       	cp	r24, r16
    130c:	91 07       	cpc	r25, r17
    130e:	0c f7       	brge	.-62     	; 0x12d2 <breadth_first_search+0x278>
	{
		printf("%d ", path[i]);
	}
	printf("\n");
    1310:	8a e0       	ldi	r24, 0x0A	; 10
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 54 27 	call	0x4ea8	; 0x4ea8 <putchar>

}
    1318:	ca 53       	subi	r28, 0x3A	; 58
    131a:	df 4f       	sbci	r29, 0xFF	; 255
    131c:	0f b6       	in	r0, 0x3f	; 63
    131e:	f8 94       	cli
    1320:	de bf       	out	0x3e, r29	; 62
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	cd bf       	out	0x3d, r28	; 61
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	bf 90       	pop	r11
    1338:	af 90       	pop	r10
    133a:	9f 90       	pop	r9
    133c:	8f 90       	pop	r8
    133e:	7f 90       	pop	r7
    1340:	6f 90       	pop	r6
    1342:	5f 90       	pop	r5
    1344:	4f 90       	pop	r4
    1346:	3f 90       	pop	r3
    1348:	2f 90       	pop	r2
    134a:	08 95       	ret

0000134c <left_turn_wls>:
*/
void left_turn_wls(void)
{
	while (1)
	{
		left();
    134c:	0e 94 45 05 	call	0xa8a	; 0xa8a <left>
		velocity(85,85);
    1350:	85 e5       	ldi	r24, 0x55	; 85
    1352:	65 e5       	ldi	r22, 0x55	; 85
    1354:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    1358:	8f ef       	ldi	r24, 0xFF	; 255
    135a:	9f e8       	ldi	r25, 0x8F	; 143
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <left_turn_wls+0x10>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <left_turn_wls+0x16>
    1362:	00 00       	nop
		_delay_ms(10);
		stop();
    1364:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		if (ADC_Conversion(2) >= THRESHOLD)
    1368:	82 e0       	ldi	r24, 0x02	; 2
    136a:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
    136e:	86 31       	cpi	r24, 0x16	; 22
    1370:	68 f3       	brcs	.-38     	; 0x134c <left_turn_wls>
		{
			stop();
    1372:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			break;
		}			
	}
}
    1376:	08 95       	ret

00001378 <right_turn_wls>:
*/
void right_turn_wls(void)
{
	while (1)
	{
		right();
    1378:	0e 94 48 05 	call	0xa90	; 0xa90 <right>
		velocity(85,85);
    137c:	85 e5       	ldi	r24, 0x55	; 85
    137e:	65 e5       	ldi	r22, 0x55	; 85
    1380:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	9f e8       	ldi	r25, 0x8F	; 143
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <right_turn_wls+0x10>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <right_turn_wls+0x16>
    138e:	00 00       	nop
		_delay_ms(10);
		stop();
    1390:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		if (ADC_Conversion(2) >= THRESHOLD)
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
    139a:	86 31       	cpi	r24, 0x16	; 22
    139c:	68 f3       	brcs	.-38     	; 0x1378 <right_turn_wls>
		{
			stop();
    139e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			break;
		}			
	}
}
    13a2:	08 95       	ret

000013a4 <sharp_left_turn_wls>:
* Example Call: left_turn_wls(); //Turns left until black line is encountered
*
*/
void sharp_left_turn_wls(void)
{
	left();
    13a4:	0e 94 45 05 	call	0xa8a	; 0xa8a <left>
	velocity(95,95);
    13a8:	8f e5       	ldi	r24, 0x5F	; 95
    13aa:	6f e5       	ldi	r22, 0x5F	; 95
    13ac:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	9f e7       	ldi	r25, 0x7F	; 127
    13b4:	a6 e1       	ldi	r26, 0x16	; 22
    13b6:	81 50       	subi	r24, 0x01	; 1
    13b8:	90 40       	sbci	r25, 0x00	; 0
    13ba:	a0 40       	sbci	r26, 0x00	; 0
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <sharp_left_turn_wls+0x12>
    13be:	00 c0       	rjmp	.+0      	; 0x13c0 <sharp_left_turn_wls+0x1c>
    13c0:	00 00       	nop
	_delay_ms(500);
	while (1)
	{
		left();
    13c2:	0e 94 45 05 	call	0xa8a	; 0xa8a <left>
		velocity(95,95);
    13c6:	8f e5       	ldi	r24, 0x5F	; 95
    13c8:	6f e5       	ldi	r22, 0x5F	; 95
    13ca:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    13ce:	89 e9       	ldi	r24, 0x99	; 153
    13d0:	99 e5       	ldi	r25, 0x59	; 89
    13d2:	a1 e0       	ldi	r26, 0x01	; 1
    13d4:	81 50       	subi	r24, 0x01	; 1
    13d6:	90 40       	sbci	r25, 0x00	; 0
    13d8:	a0 40       	sbci	r26, 0x00	; 0
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <sharp_left_turn_wls+0x30>
    13dc:	00 00       	nop
		_delay_ms(30);
		stop();
    13de:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		if (ADC_Conversion(2) >= THRESHOLD)
    13e2:	82 e0       	ldi	r24, 0x02	; 2
    13e4:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
    13e8:	86 31       	cpi	r24, 0x16	; 22
    13ea:	58 f3       	brcs	.-42     	; 0x13c2 <sharp_left_turn_wls+0x1e>
		{
			stop();
    13ec:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			break;
		}			
	}
}
    13f0:	08 95       	ret

000013f2 <sharp_right_turn_wls>:
* Logic: Uses white line sensors to turn right until black line is encountered even if already on balck line
* Example Call: right_turn_wls(); //Turns right until black line is encountered
*/
void sharp_right_turn_wls(void)
{
	right();
    13f2:	0e 94 48 05 	call	0xa90	; 0xa90 <right>
	velocity(95,95);
    13f6:	8f e5       	ldi	r24, 0x5F	; 95
    13f8:	6f e5       	ldi	r22, 0x5F	; 95
    13fa:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f e7       	ldi	r25, 0x7F	; 127
    1402:	a6 e1       	ldi	r26, 0x16	; 22
    1404:	81 50       	subi	r24, 0x01	; 1
    1406:	90 40       	sbci	r25, 0x00	; 0
    1408:	a0 40       	sbci	r26, 0x00	; 0
    140a:	e1 f7       	brne	.-8      	; 0x1404 <sharp_right_turn_wls+0x12>
    140c:	00 c0       	rjmp	.+0      	; 0x140e <sharp_right_turn_wls+0x1c>
    140e:	00 00       	nop
	_delay_ms(500);
	while (1)
	{
		right();
    1410:	0e 94 48 05 	call	0xa90	; 0xa90 <right>
		velocity(95,95);
    1414:	8f e5       	ldi	r24, 0x5F	; 95
    1416:	6f e5       	ldi	r22, 0x5F	; 95
    1418:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    141c:	89 e9       	ldi	r24, 0x99	; 153
    141e:	99 e5       	ldi	r25, 0x59	; 89
    1420:	a1 e0       	ldi	r26, 0x01	; 1
    1422:	81 50       	subi	r24, 0x01	; 1
    1424:	90 40       	sbci	r25, 0x00	; 0
    1426:	a0 40       	sbci	r26, 0x00	; 0
    1428:	e1 f7       	brne	.-8      	; 0x1422 <sharp_right_turn_wls+0x30>
    142a:	00 00       	nop
		_delay_ms(30);
		stop();
    142c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		if (ADC_Conversion(2) >= THRESHOLD)
    1430:	82 e0       	ldi	r24, 0x02	; 2
    1432:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
    1436:	86 31       	cpi	r24, 0x16	; 22
    1438:	58 f3       	brcs	.-42     	; 0x1410 <sharp_right_turn_wls+0x1e>
		{
			stop();
    143a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			break;
		}			
	}
}
    143e:	08 95       	ret

00001440 <check_object>:
* Example Call: check_object();
*
*/
int check_object()
{
	sharp = ADC_Conversion(8);
    1440:	88 e0       	ldi	r24, 0x08	; 8
    1442:	0e 94 b0 04 	call	0x960	; 0x960 <ADC_Conversion>
    1446:	80 93 31 02 	sts	0x0231, r24
	dist = Sharp_GP2D12_estimation(sharp);
    144a:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <Sharp_GP2D12_estimation>
    144e:	ac 01       	movw	r20, r24
    1450:	90 93 6f 02 	sts	0x026F, r25
    1454:	80 93 6e 02 	sts	0x026E, r24
	lcd_print(2,6,dist,3);
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	66 e0       	ldi	r22, 0x06	; 6
    145c:	23 e0       	ldi	r18, 0x03	; 3
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
	if (dist <= 100)	//if distance is less than 10 cm
    1464:	80 91 6e 02 	lds	r24, 0x026E
    1468:	90 91 6f 02 	lds	r25, 0x026F
    146c:	85 36       	cpi	r24, 0x65	; 101
    146e:	91 05       	cpc	r25, r1
    1470:	a8 f4       	brcc	.+42     	; 0x149c <check_object+0x5c>
	{
		stop();
    1472:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		PORTB |= 0x0F; //first making all bits high to turn off led
    1476:	85 b1       	in	r24, 0x05	; 5
    1478:	8f 60       	ori	r24, 0x0F	; 15
    147a:	85 b9       	out	0x05, r24	; 5
		PORTB &= 0xFB; //glow blue
    147c:	2a 98       	cbi	0x05, 2	; 5
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	a9 e5       	ldi	r26, 0x59	; 89
    1484:	81 50       	subi	r24, 0x01	; 1
    1486:	90 40       	sbci	r25, 0x00	; 0
    1488:	a0 40       	sbci	r26, 0x00	; 0
    148a:	e1 f7       	brne	.-8      	; 0x1484 <check_object+0x44>
    148c:	00 c0       	rjmp	.+0      	; 0x148e <check_object+0x4e>
    148e:	00 00       	nop
		_delay_ms(2000);
		PORTB |= 0x0F;
    1490:	85 b1       	in	r24, 0x05	; 5
    1492:	8f 60       	ori	r24, 0x0F	; 15
    1494:	85 b9       	out	0x05, r24	; 5
		
		return 1;
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	08 95       	ret
	}
	return 0;
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
}
    14a0:	08 95       	ret

000014a2 <forward_wls>:
		 stop the bot and return control and make value of flag obstacle_found=1
* Example Call: forward_wls(2); //Goes forward by two nodes
*
*/
void forward_wls(unsigned char node)
{
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
	int nodes_covered = 0;		//counter for nodes
	int obj=0;					//stores value returned by check_object
    14b2:	ee 24       	eor	r14, r14
    14b4:	ff 24       	eor	r15, r15
* Example Call: forward_wls(2); //Goes forward by two nodes
*
*/
void forward_wls(unsigned char node)
{
	int nodes_covered = 0;		//counter for nodes
    14b6:	00 e0       	ldi	r16, 0x00	; 0
    14b8:	10 e0       	ldi	r17, 0x00	; 0
	int obj=0;					//stores value returned by check_object
	while (1)
	{
		
		if ( path[path_counter+1] < 24 && obs_cnt < 1)		// check if object is present in path; don't check in upper part of arena
    14ba:	ca e3       	ldi	r28, 0x3A	; 58
    14bc:	d2 e0       	ldi	r29, 0x02	; 2
			
		}
		

		//if nodes covered is equal to given no. of nodes then stop bot and return control to calling function 
		if (nodes_covered == node)	
    14be:	c8 2e       	mov	r12, r24
    14c0:	dd 24       	eor	r13, r13
	int nodes_covered = 0;		//counter for nodes
	int obj=0;					//stores value returned by check_object
	while (1)
	{
		
		if ( path[path_counter+1] < 24 && obs_cnt < 1)		// check if object is present in path; don't check in upper part of arena
    14c2:	e0 91 82 09 	lds	r30, 0x0982
    14c6:	f0 91 83 09 	lds	r31, 0x0983
    14ca:	31 96       	adiw	r30, 0x01	; 1
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	ec 0f       	add	r30, r28
    14d2:	fd 1f       	adc	r31, r29
    14d4:	80 81       	ld	r24, Z
    14d6:	91 81       	ldd	r25, Z+1	; 0x01
    14d8:	88 31       	cpi	r24, 0x18	; 24
    14da:	91 05       	cpc	r25, r1
    14dc:	54 f4       	brge	.+20     	; 0x14f2 <forward_wls+0x50>
    14de:	80 91 2c 02 	lds	r24, 0x022C
    14e2:	90 91 2d 02 	lds	r25, 0x022D
    14e6:	18 16       	cp	r1, r24
    14e8:	19 06       	cpc	r1, r25
    14ea:	1c f0       	brlt	.+6      	; 0x14f2 <forward_wls+0x50>
		   obj = check_object();
    14ec:	0e 94 20 0a 	call	0x1440	; 0x1440 <check_object>
    14f0:	7c 01       	movw	r14, r24
		   
		if ( obj == 1 )			// if obstacle is found make obstacle_found flag 1, increase obstacle couunt and return
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	e8 16       	cp	r14, r24
    14f6:	f1 04       	cpc	r15, r1
    14f8:	d9 f4       	brne	.+54     	; 0x1530 <forward_wls+0x8e>
		{
			stop();
    14fa:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			obs_cnt++;
    14fe:	80 91 2c 02 	lds	r24, 0x022C
    1502:	90 91 2d 02 	lds	r25, 0x022D
    1506:	01 96       	adiw	r24, 0x01	; 1
    1508:	90 93 2d 02 	sts	0x022D, r25
    150c:	80 93 2c 02 	sts	0x022C, r24
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	9f e7       	ldi	r25, 0x7F	; 127
    1514:	a6 e1       	ldi	r26, 0x16	; 22
    1516:	81 50       	subi	r24, 0x01	; 1
    1518:	90 40       	sbci	r25, 0x00	; 0
    151a:	a0 40       	sbci	r26, 0x00	; 0
    151c:	e1 f7       	brne	.-8      	; 0x1516 <forward_wls+0x74>
    151e:	00 c0       	rjmp	.+0      	; 0x1520 <forward_wls+0x7e>
    1520:	00 00       	nop
			_delay_ms(500);
			obstacle_found = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	90 93 2f 02 	sts	0x022F, r25
    152a:	80 93 2e 02 	sts	0x022E, r24
			obj=0;
			return;
    152e:	a0 c1       	rjmp	.+832    	; 0x1870 <forward_wls+0x3ce>
    1530:	af ef       	ldi	r26, 0xFF	; 255
    1532:	b7 e4       	ldi	r27, 0x47	; 71
    1534:	11 97       	sbiw	r26, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <forward_wls+0x92>
    1538:	00 c0       	rjmp	.+0      	; 0x153a <forward_wls+0x98>
    153a:	00 00       	nop
		}
		
		_delay_ms(5);
		
		//read values of line sensor
		read_line_sensor();
    153c:	0e 94 ce 04 	call	0x99c	; 0x99c <read_line_sensor>
    1540:	ef ef       	ldi	r30, 0xFF	; 255
    1542:	f7 e4       	ldi	r31, 0x47	; 71
    1544:	31 97       	sbiw	r30, 0x01	; 1
    1546:	f1 f7       	brne	.-4      	; 0x1544 <forward_wls+0xa2>
    1548:	00 c0       	rjmp	.+0      	; 0x154a <forward_wls+0xa8>
    154a:	00 00       	nop
		_delay_ms(5);
		
		//print values of line sensor
		//print_line_sensor();
		
		if(middle_line_sensor>=THRESHOLD && left_line_sensor<=THRESHOLD && right_line_sensor<=THRESHOLD) // Center on black line-010 ; go foward
    154c:	80 91 33 02 	lds	r24, 0x0233
    1550:	86 31       	cpi	r24, 0x16	; 22
    1552:	78 f0       	brcs	.+30     	; 0x1572 <forward_wls+0xd0>
    1554:	90 91 34 02 	lds	r25, 0x0234
    1558:	97 31       	cpi	r25, 0x17	; 23
    155a:	58 f4       	brcc	.+22     	; 0x1572 <forward_wls+0xd0>
    155c:	90 91 32 02 	lds	r25, 0x0232
    1560:	97 31       	cpi	r25, 0x17	; 23
    1562:	38 f4       	brcc	.+14     	; 0x1572 <forward_wls+0xd0>
		{	
			velocity(93,95); 
    1564:	8d e5       	ldi	r24, 0x5D	; 93
    1566:	6f e5       	ldi	r22, 0x5F	; 95
    1568:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
			forward();
    156c:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    1570:	bb c0       	rjmp	.+374    	; 0x16e8 <forward_wls+0x246>
		}

		else if((left_line_sensor>=THRESHOLD && middle_line_sensor<THRESHOLD) ) //left sensor on black line and middle out of line take left turn to get back on black line
    1572:	20 91 34 02 	lds	r18, 0x0234
    1576:	26 31       	cpi	r18, 0x16	; 22
    1578:	28 f0       	brcs	.+10     	; 0x1584 <forward_wls+0xe2>
    157a:	86 31       	cpi	r24, 0x16	; 22
    157c:	18 f4       	brcc	.+6      	; 0x1584 <forward_wls+0xe2>
		{
			left_turn_wls();
    157e:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
    1582:	b2 c0       	rjmp	.+356    	; 0x16e8 <forward_wls+0x246>
		}

		else if((right_line_sensor>=THRESHOLD && middle_line_sensor<=THRESHOLD)) //right sensor on black line and middle out of line take right turn to get back on black line
    1584:	90 91 32 02 	lds	r25, 0x0232
    1588:	96 31       	cpi	r25, 0x16	; 22
    158a:	28 f0       	brcs	.+10     	; 0x1596 <forward_wls+0xf4>
    158c:	87 31       	cpi	r24, 0x17	; 23
    158e:	18 f4       	brcc	.+6      	; 0x1596 <forward_wls+0xf4>
		{	
			
			right_turn_wls();
    1590:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
    1594:	a9 c0       	rjmp	.+338    	; 0x16e8 <forward_wls+0x246>
		}
		
		else if((right_line_sensor<=0x0F && middle_line_sensor<=0x0F && left_line_sensor<=0x0F)) //sometimes all three sensors detect white line and bot stops at one place so make it go slight left or right to bring on line
    1596:	90 31       	cpi	r25, 0x10	; 16
    1598:	08 f0       	brcs	.+2      	; 0x159c <forward_wls+0xfa>
    159a:	a6 c0       	rjmp	.+332    	; 0x16e8 <forward_wls+0x246>
    159c:	80 31       	cpi	r24, 0x10	; 16
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <forward_wls+0x100>
    15a0:	a3 c0       	rjmp	.+326    	; 0x16e8 <forward_wls+0x246>
    15a2:	20 31       	cpi	r18, 0x10	; 16
    15a4:	08 f0       	brcs	.+2      	; 0x15a8 <forward_wls+0x106>
    15a6:	a0 c0       	rjmp	.+320    	; 0x16e8 <forward_wls+0x246>
		{	
			if((current_node == 23 && path[path_counter+1]==20) || (current_node == 5 && path[path_counter+1]==1) || (current_node == 1 && path[path_counter+1]==15) || (current_node == 17 && path[path_counter+1]==20) || (current_node == 10 && path[path_counter+1]==7) || (current_node == 4 && path[path_counter+1]==5) || (current_node == 15 && path[path_counter+1]==14))
    15a8:	20 91 86 09 	lds	r18, 0x0986
    15ac:	30 91 87 09 	lds	r19, 0x0987
    15b0:	27 31       	cpi	r18, 0x17	; 23
    15b2:	31 05       	cpc	r19, r1
    15b4:	89 f4       	brne	.+34     	; 0x15d8 <forward_wls+0x136>
    15b6:	80 91 82 09 	lds	r24, 0x0982
    15ba:	90 91 83 09 	lds	r25, 0x0983
    15be:	01 96       	adiw	r24, 0x01	; 1
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	8c 0f       	add	r24, r28
    15c6:	9d 1f       	adc	r25, r29
    15c8:	dc 01       	movw	r26, r24
    15ca:	8d 91       	ld	r24, X+
    15cc:	9c 91       	ld	r25, X
    15ce:	11 97       	sbiw	r26, 0x01	; 1
    15d0:	84 31       	cpi	r24, 0x14	; 20
    15d2:	91 05       	cpc	r25, r1
    15d4:	41 f5       	brne	.+80     	; 0x1626 <forward_wls+0x184>
    15d6:	6f c0       	rjmp	.+222    	; 0x16b6 <forward_wls+0x214>
    15d8:	25 30       	cpi	r18, 0x05	; 5
    15da:	31 05       	cpc	r19, r1
    15dc:	81 f4       	brne	.+32     	; 0x15fe <forward_wls+0x15c>
    15de:	80 91 82 09 	lds	r24, 0x0982
    15e2:	90 91 83 09 	lds	r25, 0x0983
    15e6:	01 96       	adiw	r24, 0x01	; 1
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	8c 0f       	add	r24, r28
    15ee:	9d 1f       	adc	r25, r29
    15f0:	fc 01       	movw	r30, r24
    15f2:	80 81       	ld	r24, Z
    15f4:	91 81       	ldd	r25, Z+1	; 0x01
    15f6:	81 30       	cpi	r24, 0x01	; 1
    15f8:	91 05       	cpc	r25, r1
    15fa:	41 f5       	brne	.+80     	; 0x164c <forward_wls+0x1aa>
    15fc:	5c c0       	rjmp	.+184    	; 0x16b6 <forward_wls+0x214>
    15fe:	21 30       	cpi	r18, 0x01	; 1
    1600:	31 05       	cpc	r19, r1
    1602:	89 f4       	brne	.+34     	; 0x1626 <forward_wls+0x184>
    1604:	80 91 82 09 	lds	r24, 0x0982
    1608:	90 91 83 09 	lds	r25, 0x0983
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	8c 0f       	add	r24, r28
    1614:	9d 1f       	adc	r25, r29
    1616:	dc 01       	movw	r26, r24
    1618:	8d 91       	ld	r24, X+
    161a:	9c 91       	ld	r25, X
    161c:	11 97       	sbiw	r26, 0x01	; 1
    161e:	8f 30       	cpi	r24, 0x0F	; 15
    1620:	91 05       	cpc	r25, r1
    1622:	31 f5       	brne	.+76     	; 0x1670 <forward_wls+0x1ce>
    1624:	48 c0       	rjmp	.+144    	; 0x16b6 <forward_wls+0x214>
    1626:	21 31       	cpi	r18, 0x11	; 17
    1628:	31 05       	cpc	r19, r1
    162a:	81 f4       	brne	.+32     	; 0x164c <forward_wls+0x1aa>
    162c:	80 91 82 09 	lds	r24, 0x0982
    1630:	90 91 83 09 	lds	r25, 0x0983
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	88 0f       	add	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	8c 0f       	add	r24, r28
    163c:	9d 1f       	adc	r25, r29
    163e:	fc 01       	movw	r30, r24
    1640:	80 81       	ld	r24, Z
    1642:	91 81       	ldd	r25, Z+1	; 0x01
    1644:	84 31       	cpi	r24, 0x14	; 20
    1646:	91 05       	cpc	r25, r1
    1648:	29 f5       	brne	.+74     	; 0x1694 <forward_wls+0x1f2>
    164a:	35 c0       	rjmp	.+106    	; 0x16b6 <forward_wls+0x214>
    164c:	2a 30       	cpi	r18, 0x0A	; 10
    164e:	31 05       	cpc	r19, r1
    1650:	79 f4       	brne	.+30     	; 0x1670 <forward_wls+0x1ce>
    1652:	e0 91 82 09 	lds	r30, 0x0982
    1656:	f0 91 83 09 	lds	r31, 0x0983
    165a:	31 96       	adiw	r30, 0x01	; 1
    165c:	ee 0f       	add	r30, r30
    165e:	ff 1f       	adc	r31, r31
    1660:	ec 0f       	add	r30, r28
    1662:	fd 1f       	adc	r31, r29
    1664:	80 81       	ld	r24, Z
    1666:	91 81       	ldd	r25, Z+1	; 0x01
    1668:	87 30       	cpi	r24, 0x07	; 7
    166a:	91 05       	cpc	r25, r1
    166c:	89 f5       	brne	.+98     	; 0x16d0 <forward_wls+0x22e>
    166e:	23 c0       	rjmp	.+70     	; 0x16b6 <forward_wls+0x214>
    1670:	24 30       	cpi	r18, 0x04	; 4
    1672:	31 05       	cpc	r19, r1
    1674:	79 f4       	brne	.+30     	; 0x1694 <forward_wls+0x1f2>
    1676:	e0 91 82 09 	lds	r30, 0x0982
    167a:	f0 91 83 09 	lds	r31, 0x0983
    167e:	31 96       	adiw	r30, 0x01	; 1
    1680:	ee 0f       	add	r30, r30
    1682:	ff 1f       	adc	r31, r31
    1684:	ec 0f       	add	r30, r28
    1686:	fd 1f       	adc	r31, r29
    1688:	80 81       	ld	r24, Z
    168a:	91 81       	ldd	r25, Z+1	; 0x01
    168c:	85 30       	cpi	r24, 0x05	; 5
    168e:	91 05       	cpc	r25, r1
    1690:	f9 f4       	brne	.+62     	; 0x16d0 <forward_wls+0x22e>
    1692:	11 c0       	rjmp	.+34     	; 0x16b6 <forward_wls+0x214>
    1694:	2f 30       	cpi	r18, 0x0F	; 15
    1696:	31 05       	cpc	r19, r1
    1698:	d9 f4       	brne	.+54     	; 0x16d0 <forward_wls+0x22e>
    169a:	e0 91 82 09 	lds	r30, 0x0982
    169e:	f0 91 83 09 	lds	r31, 0x0983
    16a2:	31 96       	adiw	r30, 0x01	; 1
    16a4:	ee 0f       	add	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	ec 0f       	add	r30, r28
    16aa:	fd 1f       	adc	r31, r29
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	8e 30       	cpi	r24, 0x0E	; 14
    16b2:	91 05       	cpc	r25, r1
    16b4:	69 f4       	brne	.+26     	; 0x16d0 <forward_wls+0x22e>
			{
				right();
    16b6:	0e 94 48 05 	call	0xa90	; 0xa90 <right>
    16ba:	89 e9       	ldi	r24, 0x99	; 153
    16bc:	99 e9       	ldi	r25, 0x99	; 153
    16be:	a3 e0       	ldi	r26, 0x03	; 3
    16c0:	81 50       	subi	r24, 0x01	; 1
    16c2:	90 40       	sbci	r25, 0x00	; 0
    16c4:	a0 40       	sbci	r26, 0x00	; 0
    16c6:	e1 f7       	brne	.-8      	; 0x16c0 <forward_wls+0x21e>
    16c8:	00 00       	nop
				_delay_ms(80);
				stop();
    16ca:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <forward_wls+0x246>
			}
			else
			{
				left();
    16d0:	0e 94 45 05 	call	0xa8a	; 0xa8a <left>
    16d4:	89 e9       	ldi	r24, 0x99	; 153
    16d6:	99 e9       	ldi	r25, 0x99	; 153
    16d8:	a3 e0       	ldi	r26, 0x03	; 3
    16da:	81 50       	subi	r24, 0x01	; 1
    16dc:	90 40       	sbci	r25, 0x00	; 0
    16de:	a0 40       	sbci	r26, 0x00	; 0
    16e0:	e1 f7       	brne	.-8      	; 0x16da <forward_wls+0x238>
    16e2:	00 00       	nop
				_delay_ms(80);
				stop();
    16e4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			
		}
		
		//node detection		
		
		if(path[path_counter+1]!=8 && path[path_counter+1]!=18 && path[path_counter+1]!=26 && path[path_counter+1]!=27)
    16e8:	e0 91 82 09 	lds	r30, 0x0982
    16ec:	f0 91 83 09 	lds	r31, 0x0983
    16f0:	31 96       	adiw	r30, 0x01	; 1
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ec 0f       	add	r30, r28
    16f8:	fd 1f       	adc	r31, r29
    16fa:	80 81       	ld	r24, Z
    16fc:	91 81       	ldd	r25, Z+1	; 0x01
    16fe:	88 30       	cpi	r24, 0x08	; 8
    1700:	91 05       	cpc	r25, r1
    1702:	09 f4       	brne	.+2      	; 0x1706 <forward_wls+0x264>
    1704:	81 c0       	rjmp	.+258    	; 0x1808 <forward_wls+0x366>
    1706:	82 31       	cpi	r24, 0x12	; 18
    1708:	91 05       	cpc	r25, r1
    170a:	09 f4       	brne	.+2      	; 0x170e <forward_wls+0x26c>
    170c:	7d c0       	rjmp	.+250    	; 0x1808 <forward_wls+0x366>
    170e:	8a 31       	cpi	r24, 0x1A	; 26
    1710:	91 05       	cpc	r25, r1
    1712:	09 f4       	brne	.+2      	; 0x1716 <forward_wls+0x274>
    1714:	79 c0       	rjmp	.+242    	; 0x1808 <forward_wls+0x366>
    1716:	8b 31       	cpi	r24, 0x1B	; 27
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <forward_wls+0x27c>
    171c:	75 c0       	rjmp	.+234    	; 0x1808 <forward_wls+0x366>
		{
			
			if(middle_line_sensor>THRESHOLD && left_line_sensor>THRESHOLD && right_line_sensor<THRESHOLD)//110
    171e:	80 91 33 02 	lds	r24, 0x0233
    1722:	87 31       	cpi	r24, 0x17	; 23
    1724:	d8 f0       	brcs	.+54     	; 0x175c <forward_wls+0x2ba>
    1726:	90 91 34 02 	lds	r25, 0x0234
    172a:	97 31       	cpi	r25, 0x17	; 23
    172c:	b8 f0       	brcs	.+46     	; 0x175c <forward_wls+0x2ba>
    172e:	90 91 32 02 	lds	r25, 0x0232
    1732:	96 31       	cpi	r25, 0x16	; 22
    1734:	98 f4       	brcc	.+38     	; 0x175c <forward_wls+0x2ba>
			{
				forward();
    1736:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
				velocity(90,90);
    173a:	8a e5       	ldi	r24, 0x5A	; 90
    173c:	6a e5       	ldi	r22, 0x5A	; 90
    173e:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    1742:	89 e9       	ldi	r24, 0x99	; 153
    1744:	99 e5       	ldi	r25, 0x59	; 89
    1746:	a3 e1       	ldi	r26, 0x13	; 19
    1748:	81 50       	subi	r24, 0x01	; 1
    174a:	90 40       	sbci	r25, 0x00	; 0
    174c:	a0 40       	sbci	r26, 0x00	; 0
    174e:	e1 f7       	brne	.-8      	; 0x1748 <forward_wls+0x2a6>
    1750:	00 00       	nop
				_delay_ms(430);
				stop();
    1752:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
				nodes_covered++;
    1756:	0f 5f       	subi	r16, 0xFF	; 255
    1758:	1f 4f       	sbci	r17, 0xFF	; 255
    175a:	84 c0       	rjmp	.+264    	; 0x1864 <forward_wls+0x3c2>
				//return;
			}
			else if(middle_line_sensor<THRESHOLD && left_line_sensor>THRESHOLD && right_line_sensor>THRESHOLD)//101
    175c:	86 31       	cpi	r24, 0x16	; 22
    175e:	d8 f4       	brcc	.+54     	; 0x1796 <forward_wls+0x2f4>
    1760:	90 91 34 02 	lds	r25, 0x0234
    1764:	97 31       	cpi	r25, 0x17	; 23
    1766:	b8 f0       	brcs	.+46     	; 0x1796 <forward_wls+0x2f4>
    1768:	90 91 32 02 	lds	r25, 0x0232
    176c:	97 31       	cpi	r25, 0x17	; 23
    176e:	98 f0       	brcs	.+38     	; 0x1796 <forward_wls+0x2f4>
			{
				forward();
    1770:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
				velocity(90,90);
    1774:	8a e5       	ldi	r24, 0x5A	; 90
    1776:	6a e5       	ldi	r22, 0x5A	; 90
    1778:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    177c:	89 e9       	ldi	r24, 0x99	; 153
    177e:	99 e5       	ldi	r25, 0x59	; 89
    1780:	a3 e1       	ldi	r26, 0x13	; 19
    1782:	81 50       	subi	r24, 0x01	; 1
    1784:	90 40       	sbci	r25, 0x00	; 0
    1786:	a0 40       	sbci	r26, 0x00	; 0
    1788:	e1 f7       	brne	.-8      	; 0x1782 <forward_wls+0x2e0>
    178a:	00 00       	nop
				_delay_ms(430);
				stop();
    178c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
				nodes_covered++;
    1790:	0f 5f       	subi	r16, 0xFF	; 255
    1792:	1f 4f       	sbci	r17, 0xFF	; 255
    1794:	67 c0       	rjmp	.+206    	; 0x1864 <forward_wls+0x3c2>
				//return;
			}
			else if(middle_line_sensor>THRESHOLD && left_line_sensor>THRESHOLD && right_line_sensor>THRESHOLD)//111
    1796:	87 31       	cpi	r24, 0x17	; 23
    1798:	08 f4       	brcc	.+2      	; 0x179c <forward_wls+0x2fa>
    179a:	64 c0       	rjmp	.+200    	; 0x1864 <forward_wls+0x3c2>
    179c:	80 91 34 02 	lds	r24, 0x0234
    17a0:	87 31       	cpi	r24, 0x17	; 23
    17a2:	b8 f0       	brcs	.+46     	; 0x17d2 <forward_wls+0x330>
    17a4:	90 91 32 02 	lds	r25, 0x0232
    17a8:	97 31       	cpi	r25, 0x17	; 23
    17aa:	98 f0       	brcs	.+38     	; 0x17d2 <forward_wls+0x330>
			{
				forward();
    17ac:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
				velocity(90,90);
    17b0:	8a e5       	ldi	r24, 0x5A	; 90
    17b2:	6a e5       	ldi	r22, 0x5A	; 90
    17b4:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    17b8:	89 e9       	ldi	r24, 0x99	; 153
    17ba:	99 e5       	ldi	r25, 0x59	; 89
    17bc:	a3 e1       	ldi	r26, 0x13	; 19
    17be:	81 50       	subi	r24, 0x01	; 1
    17c0:	90 40       	sbci	r25, 0x00	; 0
    17c2:	a0 40       	sbci	r26, 0x00	; 0
    17c4:	e1 f7       	brne	.-8      	; 0x17be <forward_wls+0x31c>
    17c6:	00 00       	nop
				_delay_ms(430);
				stop();
    17c8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
				nodes_covered++;
    17cc:	0f 5f       	subi	r16, 0xFF	; 255
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	49 c0       	rjmp	.+146    	; 0x1864 <forward_wls+0x3c2>
				//return;
			}
			else if(middle_line_sensor>THRESHOLD && left_line_sensor<THRESHOLD && right_line_sensor>THRESHOLD)//011
    17d2:	86 31       	cpi	r24, 0x16	; 22
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <forward_wls+0x336>
    17d6:	46 c0       	rjmp	.+140    	; 0x1864 <forward_wls+0x3c2>
    17d8:	80 91 32 02 	lds	r24, 0x0232
    17dc:	87 31       	cpi	r24, 0x17	; 23
    17de:	08 f4       	brcc	.+2      	; 0x17e2 <forward_wls+0x340>
    17e0:	41 c0       	rjmp	.+130    	; 0x1864 <forward_wls+0x3c2>
			{
				forward();
    17e2:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
				velocity(90,90);
    17e6:	8a e5       	ldi	r24, 0x5A	; 90
    17e8:	6a e5       	ldi	r22, 0x5A	; 90
    17ea:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    17ee:	89 e9       	ldi	r24, 0x99	; 153
    17f0:	99 e5       	ldi	r25, 0x59	; 89
    17f2:	a3 e1       	ldi	r26, 0x13	; 19
    17f4:	81 50       	subi	r24, 0x01	; 1
    17f6:	90 40       	sbci	r25, 0x00	; 0
    17f8:	a0 40       	sbci	r26, 0x00	; 0
    17fa:	e1 f7       	brne	.-8      	; 0x17f4 <forward_wls+0x352>
    17fc:	00 00       	nop
				_delay_ms(430);
				stop();
    17fe:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
				nodes_covered++;
    1802:	0f 5f       	subi	r16, 0xFF	; 255
    1804:	1f 4f       	sbci	r17, 0xFF	; 255
    1806:	2e c0       	rjmp	.+92     	; 0x1864 <forward_wls+0x3c2>
				//return;
			}
		}
		 
		else if(middle_line_sensor >=0x76 && (left_line_sensor >= 0x09 || right_line_sensor >= 0x09))
    1808:	80 91 33 02 	lds	r24, 0x0233
    180c:	86 37       	cpi	r24, 0x76	; 118
    180e:	50 f1       	brcs	.+84     	; 0x1864 <forward_wls+0x3c2>
    1810:	80 91 34 02 	lds	r24, 0x0234
    1814:	89 30       	cpi	r24, 0x09	; 9
    1816:	20 f4       	brcc	.+8      	; 0x1820 <forward_wls+0x37e>
    1818:	80 91 32 02 	lds	r24, 0x0232
    181c:	89 30       	cpi	r24, 0x09	; 9
    181e:	10 f1       	brcs	.+68     	; 0x1864 <forward_wls+0x3c2>
		{
			
			PORTB |= 0x0F; //first making all bits high to turn off led
    1820:	85 b1       	in	r24, 0x05	; 5
    1822:	8f 60       	ori	r24, 0x0F	; 15
    1824:	85 b9       	out	0x05, r24	; 5
			PORTB &= 0xFB; //glow blue
    1826:	2a 98       	cbi	0x05, 2	; 5
    1828:	8f ef       	ldi	r24, 0xFF	; 255
    182a:	9f e3       	ldi	r25, 0x3F	; 63
    182c:	a2 e0       	ldi	r26, 0x02	; 2
    182e:	81 50       	subi	r24, 0x01	; 1
    1830:	90 40       	sbci	r25, 0x00	; 0
    1832:	a0 40       	sbci	r26, 0x00	; 0
    1834:	e1 f7       	brne	.-8      	; 0x182e <forward_wls+0x38c>
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <forward_wls+0x396>
    1838:	00 00       	nop
			_delay_ms(50);
			PORTB |= 0x0F;
    183a:	85 b1       	in	r24, 0x05	; 5
    183c:	8f 60       	ori	r24, 0x0F	; 15
    183e:	85 b9       	out	0x05, r24	; 5
			forward();
    1840:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
			velocity(90,90);
    1844:	8a e5       	ldi	r24, 0x5A	; 90
    1846:	6a e5       	ldi	r22, 0x5A	; 90
    1848:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    184c:	89 e9       	ldi	r24, 0x99	; 153
    184e:	99 e5       	ldi	r25, 0x59	; 89
    1850:	a3 e1       	ldi	r26, 0x13	; 19
    1852:	81 50       	subi	r24, 0x01	; 1
    1854:	90 40       	sbci	r25, 0x00	; 0
    1856:	a0 40       	sbci	r26, 0x00	; 0
    1858:	e1 f7       	brne	.-8      	; 0x1852 <forward_wls+0x3b0>
    185a:	00 00       	nop
			_delay_ms(430);
			stop();
    185c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			nodes_covered++;
    1860:	0f 5f       	subi	r16, 0xFF	; 255
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
			
		}
		

		//if nodes covered is equal to given no. of nodes then stop bot and return control to calling function 
		if (nodes_covered == node)	
    1864:	c0 16       	cp	r12, r16
    1866:	d1 06       	cpc	r13, r17
    1868:	09 f0       	breq	.+2      	; 0x186c <forward_wls+0x3ca>
    186a:	2b ce       	rjmp	.-938    	; 0x14c2 <forward_wls+0x20>
		{
			stop();			
    186c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			return;
		}
			
	}
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	cf 90       	pop	r12
    1880:	08 95       	ret

00001882 <travel_path>:
* Logic: this function specifies for each node that bot should turn in which direction based on the previous, current node and next node 
* Example Call: travel_path();
*
*/
void travel_path()
{
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
	int i;

	current_node = path[1];
    188e:	80 91 3c 02 	lds	r24, 0x023C
    1892:	90 91 3d 02 	lds	r25, 0x023D
    1896:	90 93 87 09 	sts	0x0987, r25
    189a:	80 93 86 09 	sts	0x0986, r24
	obstacle_found = 0;
    189e:	10 92 2f 02 	sts	0x022F, r1
    18a2:	10 92 2e 02 	sts	0x022E, r1

	for (i = 0; i < path_length; i++)
    18a6:	80 91 78 02 	lds	r24, 0x0278
    18aa:	90 91 79 02 	lds	r25, 0x0279
    18ae:	18 16       	cp	r1, r24
    18b0:	19 06       	cpc	r1, r25
    18b2:	14 f0       	brlt	.+4      	; 0x18b8 <travel_path+0x36>
    18b4:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__stack+0x15e5>
    18b8:	08 e3       	ldi	r16, 0x38	; 56
    18ba:	12 e0       	ldi	r17, 0x02	; 2
    18bc:	c0 e0       	ldi	r28, 0x00	; 0
    18be:	d0 e0       	ldi	r29, 0x00	; 0
	{
		
		path_counter = i;
    18c0:	d0 93 83 09 	sts	0x0983, r29
    18c4:	c0 93 82 09 	sts	0x0982, r28
		
		//print current and next node on lcd
		lcd_print(2,14,abs(path[i+1]),2);
    18c8:	21 96       	adiw	r28, 0x01	; 1
* Output: void
* Logic: this function specifies for each node that bot should turn in which direction based on the previous, current node and next node 
* Example Call: travel_path();
*
*/
void travel_path()
    18ca:	78 01       	movw	r14, r16
	{
		
		path_counter = i;
		
		//print current and next node on lcd
		lcd_print(2,14,abs(path[i+1]),2);
    18cc:	d8 01       	movw	r26, r16
    18ce:	14 96       	adiw	r26, 0x04	; 4
    18d0:	4d 91       	ld	r20, X+
    18d2:	5c 91       	ld	r21, X
    18d4:	15 97       	sbiw	r26, 0x05	; 5
    18d6:	55 23       	and	r21, r21
    18d8:	1c f4       	brge	.+6      	; 0x18e0 <travel_path+0x5e>
    18da:	50 95       	com	r21
    18dc:	41 95       	neg	r20
    18de:	5f 4f       	sbci	r21, 0xFF	; 255
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	6e e0       	ldi	r22, 0x0E	; 14
    18e4:	22 e0       	ldi	r18, 0x02	; 2
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
		lcd_print(1,15,current_node,2);
    18ec:	40 91 86 09 	lds	r20, 0x0986
    18f0:	50 91 87 09 	lds	r21, 0x0987
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	6f e0       	ldi	r22, 0x0F	; 15
    18f8:	22 e0       	ldi	r18, 0x02	; 2
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_print>
		

		if (current_node == 0)
    1900:	80 91 86 09 	lds	r24, 0x0986
    1904:	90 91 87 09 	lds	r25, 0x0987
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f4       	brne	.+26     	; 0x1926 <travel_path+0xa4>
		{
			if (path[i + 1] == 2)
    190c:	f7 01       	movw	r30, r14
    190e:	84 81       	ldd	r24, Z+4	; 0x04
    1910:	95 81       	ldd	r25, Z+5	; 0x05
    1912:	82 30       	cpi	r24, 0x02	; 2
    1914:	91 05       	cpc	r25, r1
    1916:	11 f0       	breq	.+4      	; 0x191c <travel_path+0x9a>
    1918:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
				forward_wls(1);
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1922:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
		}

		else if (current_node == 1)
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	91 05       	cpc	r25, r1
    192a:	09 f0       	breq	.+2      	; 0x192e <travel_path+0xac>
    192c:	aa c0       	rjmp	.+340    	; 0x1a82 <travel_path+0x200>
		{
			if (path[i + 1] == 24 && path[i-1]==5)
    192e:	d7 01       	movw	r26, r14
    1930:	14 96       	adiw	r26, 0x04	; 4
    1932:	8d 91       	ld	r24, X+
    1934:	9c 91       	ld	r25, X
    1936:	15 97       	sbiw	r26, 0x05	; 5
    1938:	88 31       	cpi	r24, 0x18	; 24
    193a:	91 05       	cpc	r25, r1
    193c:	89 f5       	brne	.+98     	; 0x19a0 <travel_path+0x11e>
    193e:	2d 91       	ld	r18, X+
    1940:	3c 91       	ld	r19, X
    1942:	11 97       	sbiw	r26, 0x01	; 1
    1944:	25 30       	cpi	r18, 0x05	; 5
    1946:	31 05       	cpc	r19, r1
    1948:	91 f4       	brne	.+36     	; 0x196e <travel_path+0xec>
			{
				sharp_left_turn_wls();
    194a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    194e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	9f e7       	ldi	r25, 0x7F	; 127
    1956:	a4 e0       	ldi	r26, 0x04	; 4
    1958:	81 50       	subi	r24, 0x01	; 1
    195a:	90 40       	sbci	r25, 0x00	; 0
    195c:	a0 40       	sbci	r26, 0x00	; 0
    195e:	e1 f7       	brne	.-8      	; 0x1958 <travel_path+0xd6>
    1960:	00 c0       	rjmp	.+0      	; 0x1962 <travel_path+0xe0>
    1962:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    196a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 24 && path[i-1]==15)
    196e:	d7 01       	movw	r26, r14
    1970:	2d 91       	ld	r18, X+
    1972:	3c 91       	ld	r19, X
    1974:	11 97       	sbiw	r26, 0x01	; 1
    1976:	2f 30       	cpi	r18, 0x0F	; 15
    1978:	31 05       	cpc	r19, r1
    197a:	91 f4       	brne	.+36     	; 0x19a0 <travel_path+0x11e>
			{
				sharp_right_turn_wls();
    197c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1980:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1984:	8f ef       	ldi	r24, 0xFF	; 255
    1986:	9f e7       	ldi	r25, 0x7F	; 127
    1988:	a4 e0       	ldi	r26, 0x04	; 4
    198a:	81 50       	subi	r24, 0x01	; 1
    198c:	90 40       	sbci	r25, 0x00	; 0
    198e:	a0 40       	sbci	r26, 0x00	; 0
    1990:	e1 f7       	brne	.-8      	; 0x198a <travel_path+0x108>
    1992:	00 c0       	rjmp	.+0      	; 0x1994 <travel_path+0x112>
    1994:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    199c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 5 && path[i-1]==24)
    19a0:	85 30       	cpi	r24, 0x05	; 5
    19a2:	91 05       	cpc	r25, r1
    19a4:	c9 f4       	brne	.+50     	; 0x19d8 <travel_path+0x156>
    19a6:	d7 01       	movw	r26, r14
    19a8:	2d 91       	ld	r18, X+
    19aa:	3c 91       	ld	r19, X
    19ac:	11 97       	sbiw	r26, 0x01	; 1
    19ae:	28 31       	cpi	r18, 0x18	; 24
    19b0:	31 05       	cpc	r19, r1
    19b2:	91 f4       	brne	.+36     	; 0x19d8 <travel_path+0x156>
			{
				sharp_right_turn_wls();
    19b4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    19b8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    19bc:	8f ef       	ldi	r24, 0xFF	; 255
    19be:	9f e7       	ldi	r25, 0x7F	; 127
    19c0:	a4 e0       	ldi	r26, 0x04	; 4
    19c2:	81 50       	subi	r24, 0x01	; 1
    19c4:	90 40       	sbci	r25, 0x00	; 0
    19c6:	a0 40       	sbci	r26, 0x00	; 0
    19c8:	e1 f7       	brne	.-8      	; 0x19c2 <travel_path+0x140>
    19ca:	00 c0       	rjmp	.+0      	; 0x19cc <travel_path+0x14a>
    19cc:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    19d4:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 15 && path[i-1]==24)
    19d8:	8f 30       	cpi	r24, 0x0F	; 15
    19da:	91 05       	cpc	r25, r1
    19dc:	91 f5       	brne	.+100    	; 0x1a42 <travel_path+0x1c0>
    19de:	d7 01       	movw	r26, r14
    19e0:	2d 91       	ld	r18, X+
    19e2:	3c 91       	ld	r19, X
    19e4:	11 97       	sbiw	r26, 0x01	; 1
    19e6:	28 31       	cpi	r18, 0x18	; 24
    19e8:	31 05       	cpc	r19, r1
    19ea:	91 f4       	brne	.+36     	; 0x1a10 <travel_path+0x18e>
			{
				sharp_left_turn_wls();
    19ec:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    19f0:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	9f e7       	ldi	r25, 0x7F	; 127
    19f8:	a4 e0       	ldi	r26, 0x04	; 4
    19fa:	81 50       	subi	r24, 0x01	; 1
    19fc:	90 40       	sbci	r25, 0x00	; 0
    19fe:	a0 40       	sbci	r26, 0x00	; 0
    1a00:	e1 f7       	brne	.-8      	; 0x19fa <travel_path+0x178>
    1a02:	00 c0       	rjmp	.+0      	; 0x1a04 <travel_path+0x182>
    1a04:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1a0c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 15 && path[i-1]==5)
    1a10:	d7 01       	movw	r26, r14
    1a12:	2d 91       	ld	r18, X+
    1a14:	3c 91       	ld	r19, X
    1a16:	11 97       	sbiw	r26, 0x01	; 1
    1a18:	25 30       	cpi	r18, 0x05	; 5
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	91 f4       	brne	.+36     	; 0x1a42 <travel_path+0x1c0>
			{
				right_turn_wls();
    1a1e:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    1a22:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	9f e7       	ldi	r25, 0x7F	; 127
    1a2a:	a4 e0       	ldi	r26, 0x04	; 4
    1a2c:	81 50       	subi	r24, 0x01	; 1
    1a2e:	90 40       	sbci	r25, 0x00	; 0
    1a30:	a0 40       	sbci	r26, 0x00	; 0
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <travel_path+0x1aa>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <travel_path+0x1b4>
    1a36:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1a3e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 5 && path[i-1]==15)
    1a42:	85 30       	cpi	r24, 0x05	; 5
    1a44:	91 05       	cpc	r25, r1
    1a46:	11 f0       	breq	.+4      	; 0x1a4c <travel_path+0x1ca>
    1a48:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    1a4c:	d7 01       	movw	r26, r14
    1a4e:	8d 91       	ld	r24, X+
    1a50:	9c 91       	ld	r25, X
    1a52:	11 97       	sbiw	r26, 0x01	; 1
    1a54:	8f 30       	cpi	r24, 0x0F	; 15
    1a56:	91 05       	cpc	r25, r1
    1a58:	11 f0       	breq	.+4      	; 0x1a5e <travel_path+0x1dc>
    1a5a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				left_turn_wls();
    1a5e:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    1a62:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	9f e7       	ldi	r25, 0x7F	; 127
    1a6a:	a4 e0       	ldi	r26, 0x04	; 4
    1a6c:	81 50       	subi	r24, 0x01	; 1
    1a6e:	90 40       	sbci	r25, 0x00	; 0
    1a70:	a0 40       	sbci	r26, 0x00	; 0
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <travel_path+0x1ea>
    1a74:	00 c0       	rjmp	.+0      	; 0x1a76 <travel_path+0x1f4>
    1a76:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1a7e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 2)
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	91 05       	cpc	r25, r1
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <travel_path+0x208>
    1a88:	36 c1       	rjmp	.+620    	; 0x1cf6 <travel_path+0x474>
		{
			if (path[i + 1] == 3 && path[i-1]==0)
    1a8a:	d7 01       	movw	r26, r14
    1a8c:	14 96       	adiw	r26, 0x04	; 4
    1a8e:	8d 91       	ld	r24, X+
    1a90:	9c 91       	ld	r25, X
    1a92:	15 97       	sbiw	r26, 0x05	; 5
    1a94:	83 30       	cpi	r24, 0x03	; 3
    1a96:	91 05       	cpc	r25, r1
    1a98:	59 f4       	brne	.+22     	; 0x1ab0 <travel_path+0x22e>
    1a9a:	2d 91       	ld	r18, X+
    1a9c:	3c 91       	ld	r19, X
    1a9e:	11 97       	sbiw	r26, 0x01	; 1
    1aa0:	21 15       	cp	r18, r1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	29 f4       	brne	.+10     	; 0x1ab0 <travel_path+0x22e>
				forward_wls(1);
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1aac:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>

			else if (path[i + 1] == 4 && path[i - 1] == 0)
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	c1 f4       	brne	.+48     	; 0x1ae6 <travel_path+0x264>
    1ab6:	f7 01       	movw	r30, r14
    1ab8:	20 81       	ld	r18, Z
    1aba:	31 81       	ldd	r19, Z+1	; 0x01
    1abc:	21 15       	cp	r18, r1
    1abe:	31 05       	cpc	r19, r1
    1ac0:	91 f4       	brne	.+36     	; 0x1ae6 <travel_path+0x264>
			{
				sharp_right_turn_wls();
    1ac2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1ac6:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1aca:	8f ef       	ldi	r24, 0xFF	; 255
    1acc:	9f e7       	ldi	r25, 0x7F	; 127
    1ace:	a4 e0       	ldi	r26, 0x04	; 4
    1ad0:	81 50       	subi	r24, 0x01	; 1
    1ad2:	90 40       	sbci	r25, 0x00	; 0
    1ad4:	a0 40       	sbci	r26, 0x00	; 0
    1ad6:	e1 f7       	brne	.-8      	; 0x1ad0 <travel_path+0x24e>
    1ad8:	00 c0       	rjmp	.+0      	; 0x1ada <travel_path+0x258>
    1ada:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1ae2:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 14 && path[i - 1] == 0)
    1ae6:	8e 30       	cpi	r24, 0x0E	; 14
    1ae8:	91 05       	cpc	r25, r1
    1aea:	c9 f4       	brne	.+50     	; 0x1b1e <travel_path+0x29c>
    1aec:	d7 01       	movw	r26, r14
    1aee:	2d 91       	ld	r18, X+
    1af0:	3c 91       	ld	r19, X
    1af2:	11 97       	sbiw	r26, 0x01	; 1
    1af4:	21 15       	cp	r18, r1
    1af6:	31 05       	cpc	r19, r1
    1af8:	91 f4       	brne	.+36     	; 0x1b1e <travel_path+0x29c>
			{
				sharp_left_turn_wls();
    1afa:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1afe:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1b02:	8f ef       	ldi	r24, 0xFF	; 255
    1b04:	9f e7       	ldi	r25, 0x7F	; 127
    1b06:	a4 e0       	ldi	r26, 0x04	; 4
    1b08:	81 50       	subi	r24, 0x01	; 1
    1b0a:	90 40       	sbci	r25, 0x00	; 0
    1b0c:	a0 40       	sbci	r26, 0x00	; 0
    1b0e:	e1 f7       	brne	.-8      	; 0x1b08 <travel_path+0x286>
    1b10:	00 c0       	rjmp	.+0      	; 0x1b12 <travel_path+0x290>
    1b12:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1b1a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 0 && path[i - 1] == 3)
    1b1e:	00 97       	sbiw	r24, 0x00	; 0
    1b20:	61 f4       	brne	.+24     	; 0x1b3a <travel_path+0x2b8>
    1b22:	d7 01       	movw	r26, r14
    1b24:	2d 91       	ld	r18, X+
    1b26:	3c 91       	ld	r19, X
    1b28:	11 97       	sbiw	r26, 0x01	; 1
    1b2a:	23 30       	cpi	r18, 0x03	; 3
    1b2c:	31 05       	cpc	r19, r1
    1b2e:	29 f4       	brne	.+10     	; 0x1b3a <travel_path+0x2b8>
			{
				forward_wls(1);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1b36:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 4 && path[i - 1] == 3)
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	c1 f4       	brne	.+48     	; 0x1b70 <travel_path+0x2ee>
    1b40:	f7 01       	movw	r30, r14
    1b42:	20 81       	ld	r18, Z
    1b44:	31 81       	ldd	r19, Z+1	; 0x01
    1b46:	23 30       	cpi	r18, 0x03	; 3
    1b48:	31 05       	cpc	r19, r1
    1b4a:	91 f4       	brne	.+36     	; 0x1b70 <travel_path+0x2ee>
			{
				sharp_left_turn_wls();
    1b4c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1b50:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1b54:	8f ef       	ldi	r24, 0xFF	; 255
    1b56:	9f e7       	ldi	r25, 0x7F	; 127
    1b58:	a4 e0       	ldi	r26, 0x04	; 4
    1b5a:	81 50       	subi	r24, 0x01	; 1
    1b5c:	90 40       	sbci	r25, 0x00	; 0
    1b5e:	a0 40       	sbci	r26, 0x00	; 0
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <travel_path+0x2d8>
    1b62:	00 c0       	rjmp	.+0      	; 0x1b64 <travel_path+0x2e2>
    1b64:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1b6c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 14 && path[i - 1] == 3)
    1b70:	8e 30       	cpi	r24, 0x0E	; 14
    1b72:	91 05       	cpc	r25, r1
    1b74:	91 f5       	brne	.+100    	; 0x1bda <travel_path+0x358>
    1b76:	d7 01       	movw	r26, r14
    1b78:	2d 91       	ld	r18, X+
    1b7a:	3c 91       	ld	r19, X
    1b7c:	11 97       	sbiw	r26, 0x01	; 1
    1b7e:	23 30       	cpi	r18, 0x03	; 3
    1b80:	31 05       	cpc	r19, r1
    1b82:	91 f4       	brne	.+36     	; 0x1ba8 <travel_path+0x326>
			{
				sharp_right_turn_wls();
    1b84:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1b88:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1b8c:	8f ef       	ldi	r24, 0xFF	; 255
    1b8e:	9f e7       	ldi	r25, 0x7F	; 127
    1b90:	a4 e0       	ldi	r26, 0x04	; 4
    1b92:	81 50       	subi	r24, 0x01	; 1
    1b94:	90 40       	sbci	r25, 0x00	; 0
    1b96:	a0 40       	sbci	r26, 0x00	; 0
    1b98:	e1 f7       	brne	.-8      	; 0x1b92 <travel_path+0x310>
    1b9a:	00 c0       	rjmp	.+0      	; 0x1b9c <travel_path+0x31a>
    1b9c:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1ba4:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 14 && path[i - 1] == 4)
    1ba8:	d7 01       	movw	r26, r14
    1baa:	2d 91       	ld	r18, X+
    1bac:	3c 91       	ld	r19, X
    1bae:	11 97       	sbiw	r26, 0x01	; 1
    1bb0:	24 30       	cpi	r18, 0x04	; 4
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	91 f4       	brne	.+36     	; 0x1bda <travel_path+0x358>
			{
				left_turn_wls();
    1bb6:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    1bba:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	9f e7       	ldi	r25, 0x7F	; 127
    1bc2:	a4 e0       	ldi	r26, 0x04	; 4
    1bc4:	81 50       	subi	r24, 0x01	; 1
    1bc6:	90 40       	sbci	r25, 0x00	; 0
    1bc8:	a0 40       	sbci	r26, 0x00	; 0
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <travel_path+0x342>
    1bcc:	00 c0       	rjmp	.+0      	; 0x1bce <travel_path+0x34c>
    1bce:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1bd6:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 3 && path[i - 1] == 4)
    1bda:	83 30       	cpi	r24, 0x03	; 3
    1bdc:	91 05       	cpc	r25, r1
    1bde:	c9 f4       	brne	.+50     	; 0x1c12 <travel_path+0x390>
    1be0:	d7 01       	movw	r26, r14
    1be2:	2d 91       	ld	r18, X+
    1be4:	3c 91       	ld	r19, X
    1be6:	11 97       	sbiw	r26, 0x01	; 1
    1be8:	24 30       	cpi	r18, 0x04	; 4
    1bea:	31 05       	cpc	r19, r1
    1bec:	91 f4       	brne	.+36     	; 0x1c12 <travel_path+0x390>
			{
				sharp_right_turn_wls();
    1bee:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1bf2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	9f e7       	ldi	r25, 0x7F	; 127
    1bfa:	a4 e0       	ldi	r26, 0x04	; 4
    1bfc:	81 50       	subi	r24, 0x01	; 1
    1bfe:	90 40       	sbci	r25, 0x00	; 0
    1c00:	a0 40       	sbci	r26, 0x00	; 0
    1c02:	e1 f7       	brne	.-8      	; 0x1bfc <travel_path+0x37a>
    1c04:	00 c0       	rjmp	.+0      	; 0x1c06 <travel_path+0x384>
    1c06:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1c0e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 0 && path[i - 1] == 4)
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	c9 f4       	brne	.+50     	; 0x1c48 <travel_path+0x3c6>
    1c16:	d7 01       	movw	r26, r14
    1c18:	2d 91       	ld	r18, X+
    1c1a:	3c 91       	ld	r19, X
    1c1c:	11 97       	sbiw	r26, 0x01	; 1
    1c1e:	24 30       	cpi	r18, 0x04	; 4
    1c20:	31 05       	cpc	r19, r1
    1c22:	91 f4       	brne	.+36     	; 0x1c48 <travel_path+0x3c6>
			{
				sharp_left_turn_wls();
    1c24:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1c28:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f e7       	ldi	r25, 0x7F	; 127
    1c30:	a4 e0       	ldi	r26, 0x04	; 4
    1c32:	81 50       	subi	r24, 0x01	; 1
    1c34:	90 40       	sbci	r25, 0x00	; 0
    1c36:	a0 40       	sbci	r26, 0x00	; 0
    1c38:	e1 f7       	brne	.-8      	; 0x1c32 <travel_path+0x3b0>
    1c3a:	00 c0       	rjmp	.+0      	; 0x1c3c <travel_path+0x3ba>
    1c3c:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1c44:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 4 && path[i - 1] == 14)
    1c48:	84 30       	cpi	r24, 0x04	; 4
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	c9 f4       	brne	.+50     	; 0x1c80 <travel_path+0x3fe>
    1c4e:	d7 01       	movw	r26, r14
    1c50:	2d 91       	ld	r18, X+
    1c52:	3c 91       	ld	r19, X
    1c54:	11 97       	sbiw	r26, 0x01	; 1
    1c56:	2e 30       	cpi	r18, 0x0E	; 14
    1c58:	31 05       	cpc	r19, r1
    1c5a:	91 f4       	brne	.+36     	; 0x1c80 <travel_path+0x3fe>
			{
				right_turn_wls();
    1c5c:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    1c60:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1c64:	8f ef       	ldi	r24, 0xFF	; 255
    1c66:	9f e7       	ldi	r25, 0x7F	; 127
    1c68:	a4 e0       	ldi	r26, 0x04	; 4
    1c6a:	81 50       	subi	r24, 0x01	; 1
    1c6c:	90 40       	sbci	r25, 0x00	; 0
    1c6e:	a0 40       	sbci	r26, 0x00	; 0
    1c70:	e1 f7       	brne	.-8      	; 0x1c6a <travel_path+0x3e8>
    1c72:	00 c0       	rjmp	.+0      	; 0x1c74 <travel_path+0x3f2>
    1c74:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1c7c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 3 && path[i - 1] == 14)
    1c80:	83 30       	cpi	r24, 0x03	; 3
    1c82:	91 05       	cpc	r25, r1
    1c84:	c9 f4       	brne	.+50     	; 0x1cb8 <travel_path+0x436>
    1c86:	d7 01       	movw	r26, r14
    1c88:	2d 91       	ld	r18, X+
    1c8a:	3c 91       	ld	r19, X
    1c8c:	11 97       	sbiw	r26, 0x01	; 1
    1c8e:	2e 30       	cpi	r18, 0x0E	; 14
    1c90:	31 05       	cpc	r19, r1
    1c92:	91 f4       	brne	.+36     	; 0x1cb8 <travel_path+0x436>
			{
				sharp_left_turn_wls();
    1c94:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1c98:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1c9c:	8f ef       	ldi	r24, 0xFF	; 255
    1c9e:	9f e7       	ldi	r25, 0x7F	; 127
    1ca0:	a4 e0       	ldi	r26, 0x04	; 4
    1ca2:	81 50       	subi	r24, 0x01	; 1
    1ca4:	90 40       	sbci	r25, 0x00	; 0
    1ca6:	a0 40       	sbci	r26, 0x00	; 0
    1ca8:	e1 f7       	brne	.-8      	; 0x1ca2 <travel_path+0x420>
    1caa:	00 c0       	rjmp	.+0      	; 0x1cac <travel_path+0x42a>
    1cac:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1cb4:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 0 && path[i - 1] == 14)
    1cb8:	00 97       	sbiw	r24, 0x00	; 0
    1cba:	11 f0       	breq	.+4      	; 0x1cc0 <travel_path+0x43e>
    1cbc:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    1cc0:	d7 01       	movw	r26, r14
    1cc2:	8d 91       	ld	r24, X+
    1cc4:	9c 91       	ld	r25, X
    1cc6:	11 97       	sbiw	r26, 0x01	; 1
    1cc8:	8e 30       	cpi	r24, 0x0E	; 14
    1cca:	91 05       	cpc	r25, r1
    1ccc:	11 f0       	breq	.+4      	; 0x1cd2 <travel_path+0x450>
    1cce:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    1cd2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1cd6:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	9f e7       	ldi	r25, 0x7F	; 127
    1cde:	a4 e0       	ldi	r26, 0x04	; 4
    1ce0:	81 50       	subi	r24, 0x01	; 1
    1ce2:	90 40       	sbci	r25, 0x00	; 0
    1ce4:	a0 40       	sbci	r26, 0x00	; 0
    1ce6:	e1 f7       	brne	.-8      	; 0x1ce0 <travel_path+0x45e>
    1ce8:	00 c0       	rjmp	.+0      	; 0x1cea <travel_path+0x468>
    1cea:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1cf2:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}

		}

		else if (current_node == 3)
    1cf6:	83 30       	cpi	r24, 0x03	; 3
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	09 f0       	breq	.+2      	; 0x1cfe <travel_path+0x47c>
    1cfc:	95 c0       	rjmp	.+298    	; 0x1e28 <travel_path+0x5a6>
		{
			if (path[i + 1] == 11 && path[i - 1] == 2)
    1cfe:	d7 01       	movw	r26, r14
    1d00:	14 96       	adiw	r26, 0x04	; 4
    1d02:	8d 91       	ld	r24, X+
    1d04:	9c 91       	ld	r25, X
    1d06:	15 97       	sbiw	r26, 0x05	; 5
    1d08:	8b 30       	cpi	r24, 0x0B	; 11
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	c1 f4       	brne	.+48     	; 0x1d3e <travel_path+0x4bc>
    1d0e:	2d 91       	ld	r18, X+
    1d10:	3c 91       	ld	r19, X
    1d12:	11 97       	sbiw	r26, 0x01	; 1
    1d14:	22 30       	cpi	r18, 0x02	; 2
    1d16:	31 05       	cpc	r19, r1
    1d18:	91 f4       	brne	.+36     	; 0x1d3e <travel_path+0x4bc>
			{
				sharp_right_turn_wls();
    1d1a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1d1e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1d22:	8f ef       	ldi	r24, 0xFF	; 255
    1d24:	9f e7       	ldi	r25, 0x7F	; 127
    1d26:	a4 e0       	ldi	r26, 0x04	; 4
    1d28:	81 50       	subi	r24, 0x01	; 1
    1d2a:	90 40       	sbci	r25, 0x00	; 0
    1d2c:	a0 40       	sbci	r26, 0x00	; 0
    1d2e:	e1 f7       	brne	.-8      	; 0x1d28 <travel_path+0x4a6>
    1d30:	00 c0       	rjmp	.+0      	; 0x1d32 <travel_path+0x4b0>
    1d32:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1d3a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 21 && path[i - 1] == 2)
    1d3e:	85 31       	cpi	r24, 0x15	; 21
    1d40:	91 05       	cpc	r25, r1
    1d42:	c9 f4       	brne	.+50     	; 0x1d76 <travel_path+0x4f4>
    1d44:	d7 01       	movw	r26, r14
    1d46:	2d 91       	ld	r18, X+
    1d48:	3c 91       	ld	r19, X
    1d4a:	11 97       	sbiw	r26, 0x01	; 1
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	91 f4       	brne	.+36     	; 0x1d76 <travel_path+0x4f4>
			{
				sharp_left_turn_wls();
    1d52:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1d56:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	9f e7       	ldi	r25, 0x7F	; 127
    1d5e:	a4 e0       	ldi	r26, 0x04	; 4
    1d60:	81 50       	subi	r24, 0x01	; 1
    1d62:	90 40       	sbci	r25, 0x00	; 0
    1d64:	a0 40       	sbci	r26, 0x00	; 0
    1d66:	e1 f7       	brne	.-8      	; 0x1d60 <travel_path+0x4de>
    1d68:	00 c0       	rjmp	.+0      	; 0x1d6a <travel_path+0x4e8>
    1d6a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1d6c:	81 e0       	ldi	r24, 0x01	; 1
    1d6e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1d72:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 2 && path[i - 1] == 11)
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	91 05       	cpc	r25, r1
    1d7a:	c9 f4       	brne	.+50     	; 0x1dae <travel_path+0x52c>
    1d7c:	d7 01       	movw	r26, r14
    1d7e:	2d 91       	ld	r18, X+
    1d80:	3c 91       	ld	r19, X
    1d82:	11 97       	sbiw	r26, 0x01	; 1
    1d84:	2b 30       	cpi	r18, 0x0B	; 11
    1d86:	31 05       	cpc	r19, r1
    1d88:	91 f4       	brne	.+36     	; 0x1dae <travel_path+0x52c>
			{
				sharp_left_turn_wls();
    1d8a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1d8e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1d92:	8f ef       	ldi	r24, 0xFF	; 255
    1d94:	9f e7       	ldi	r25, 0x7F	; 127
    1d96:	a4 e0       	ldi	r26, 0x04	; 4
    1d98:	81 50       	subi	r24, 0x01	; 1
    1d9a:	90 40       	sbci	r25, 0x00	; 0
    1d9c:	a0 40       	sbci	r26, 0x00	; 0
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <travel_path+0x516>
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <travel_path+0x520>
    1da2:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1daa:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 21 && path[i - 1] == 11)
    1dae:	85 31       	cpi	r24, 0x15	; 21
    1db0:	91 05       	cpc	r25, r1
    1db2:	61 f4       	brne	.+24     	; 0x1dcc <travel_path+0x54a>
    1db4:	d7 01       	movw	r26, r14
    1db6:	2d 91       	ld	r18, X+
    1db8:	3c 91       	ld	r19, X
    1dba:	11 97       	sbiw	r26, 0x01	; 1
    1dbc:	2b 30       	cpi	r18, 0x0B	; 11
    1dbe:	31 05       	cpc	r19, r1
    1dc0:	29 f4       	brne	.+10     	; 0x1dcc <travel_path+0x54a>
			{
				forward_wls(1);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1dc8:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 2 && path[i - 1] == 21)
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	91 05       	cpc	r25, r1
    1dd0:	c1 f4       	brne	.+48     	; 0x1e02 <travel_path+0x580>
    1dd2:	f7 01       	movw	r30, r14
    1dd4:	20 81       	ld	r18, Z
    1dd6:	31 81       	ldd	r19, Z+1	; 0x01
    1dd8:	25 31       	cpi	r18, 0x15	; 21
    1dda:	31 05       	cpc	r19, r1
    1ddc:	91 f4       	brne	.+36     	; 0x1e02 <travel_path+0x580>
			{
				sharp_right_turn_wls();
    1dde:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1de2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1de6:	8f ef       	ldi	r24, 0xFF	; 255
    1de8:	9f e7       	ldi	r25, 0x7F	; 127
    1dea:	a4 e0       	ldi	r26, 0x04	; 4
    1dec:	81 50       	subi	r24, 0x01	; 1
    1dee:	90 40       	sbci	r25, 0x00	; 0
    1df0:	a0 40       	sbci	r26, 0x00	; 0
    1df2:	e1 f7       	brne	.-8      	; 0x1dec <travel_path+0x56a>
    1df4:	00 c0       	rjmp	.+0      	; 0x1df6 <travel_path+0x574>
    1df6:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1dfe:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 11 && path[i - 1] == 21)
    1e02:	8b 30       	cpi	r24, 0x0B	; 11
    1e04:	91 05       	cpc	r25, r1
    1e06:	11 f0       	breq	.+4      	; 0x1e0c <travel_path+0x58a>
    1e08:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    1e0c:	d7 01       	movw	r26, r14
    1e0e:	8d 91       	ld	r24, X+
    1e10:	9c 91       	ld	r25, X
    1e12:	11 97       	sbiw	r26, 0x01	; 1
    1e14:	85 31       	cpi	r24, 0x15	; 21
    1e16:	91 05       	cpc	r25, r1
    1e18:	11 f0       	breq	.+4      	; 0x1e1e <travel_path+0x59c>
    1e1a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				forward_wls(1);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1e24:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 4)
    1e28:	84 30       	cpi	r24, 0x04	; 4
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <travel_path+0x5ae>
    1e2e:	aa c0       	rjmp	.+340    	; 0x1f84 <travel_path+0x702>
		{
			if (path[i + 1] == 9 && path[i - 1] == 2)
    1e30:	f7 01       	movw	r30, r14
    1e32:	84 81       	ldd	r24, Z+4	; 0x04
    1e34:	95 81       	ldd	r25, Z+5	; 0x05
    1e36:	89 30       	cpi	r24, 0x09	; 9
    1e38:	91 05       	cpc	r25, r1
    1e3a:	b9 f4       	brne	.+46     	; 0x1e6a <travel_path+0x5e8>
    1e3c:	20 81       	ld	r18, Z
    1e3e:	31 81       	ldd	r19, Z+1	; 0x01
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	31 05       	cpc	r19, r1
    1e44:	91 f4       	brne	.+36     	; 0x1e6a <travel_path+0x5e8>
			{
				sharp_left_turn_wls();
    1e46:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1e4a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	9f e7       	ldi	r25, 0x7F	; 127
    1e52:	a4 e0       	ldi	r26, 0x04	; 4
    1e54:	81 50       	subi	r24, 0x01	; 1
    1e56:	90 40       	sbci	r25, 0x00	; 0
    1e58:	a0 40       	sbci	r26, 0x00	; 0
    1e5a:	e1 f7       	brne	.-8      	; 0x1e54 <travel_path+0x5d2>
    1e5c:	00 c0       	rjmp	.+0      	; 0x1e5e <travel_path+0x5dc>
    1e5e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1e66:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 5 && path[i - 1] == 2)
    1e6a:	85 30       	cpi	r24, 0x05	; 5
    1e6c:	91 05       	cpc	r25, r1
    1e6e:	c9 f4       	brne	.+50     	; 0x1ea2 <travel_path+0x620>
    1e70:	d7 01       	movw	r26, r14
    1e72:	2d 91       	ld	r18, X+
    1e74:	3c 91       	ld	r19, X
    1e76:	11 97       	sbiw	r26, 0x01	; 1
    1e78:	22 30       	cpi	r18, 0x02	; 2
    1e7a:	31 05       	cpc	r19, r1
    1e7c:	91 f4       	brne	.+36     	; 0x1ea2 <travel_path+0x620>
			{
				right_turn_wls();
    1e7e:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    1e82:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1e86:	8f ef       	ldi	r24, 0xFF	; 255
    1e88:	9f e7       	ldi	r25, 0x7F	; 127
    1e8a:	a4 e0       	ldi	r26, 0x04	; 4
    1e8c:	81 50       	subi	r24, 0x01	; 1
    1e8e:	90 40       	sbci	r25, 0x00	; 0
    1e90:	a0 40       	sbci	r26, 0x00	; 0
    1e92:	e1 f7       	brne	.-8      	; 0x1e8c <travel_path+0x60a>
    1e94:	00 c0       	rjmp	.+0      	; 0x1e96 <travel_path+0x614>
    1e96:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1e9e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 9 && path[i - 1] == 5)
    1ea2:	89 30       	cpi	r24, 0x09	; 9
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	c9 f4       	brne	.+50     	; 0x1eda <travel_path+0x658>
    1ea8:	d7 01       	movw	r26, r14
    1eaa:	2d 91       	ld	r18, X+
    1eac:	3c 91       	ld	r19, X
    1eae:	11 97       	sbiw	r26, 0x01	; 1
    1eb0:	25 30       	cpi	r18, 0x05	; 5
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	91 f4       	brne	.+36     	; 0x1eda <travel_path+0x658>
			{
				sharp_right_turn_wls();
    1eb6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1eba:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1ebe:	8f ef       	ldi	r24, 0xFF	; 255
    1ec0:	9f e7       	ldi	r25, 0x7F	; 127
    1ec2:	a4 e0       	ldi	r26, 0x04	; 4
    1ec4:	81 50       	subi	r24, 0x01	; 1
    1ec6:	90 40       	sbci	r25, 0x00	; 0
    1ec8:	a0 40       	sbci	r26, 0x00	; 0
    1eca:	e1 f7       	brne	.-8      	; 0x1ec4 <travel_path+0x642>
    1ecc:	00 c0       	rjmp	.+0      	; 0x1ece <travel_path+0x64c>
    1ece:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1ed6:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 2 && path[i - 1] == 5)
    1eda:	82 30       	cpi	r24, 0x02	; 2
    1edc:	91 05       	cpc	r25, r1
    1ede:	91 f5       	brne	.+100    	; 0x1f44 <travel_path+0x6c2>
    1ee0:	d7 01       	movw	r26, r14
    1ee2:	2d 91       	ld	r18, X+
    1ee4:	3c 91       	ld	r19, X
    1ee6:	11 97       	sbiw	r26, 0x01	; 1
    1ee8:	25 30       	cpi	r18, 0x05	; 5
    1eea:	31 05       	cpc	r19, r1
    1eec:	91 f4       	brne	.+36     	; 0x1f12 <travel_path+0x690>
			{
				left_turn_wls();
    1eee:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    1ef2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1ef6:	8f ef       	ldi	r24, 0xFF	; 255
    1ef8:	9f e7       	ldi	r25, 0x7F	; 127
    1efa:	a4 e0       	ldi	r26, 0x04	; 4
    1efc:	81 50       	subi	r24, 0x01	; 1
    1efe:	90 40       	sbci	r25, 0x00	; 0
    1f00:	a0 40       	sbci	r26, 0x00	; 0
    1f02:	e1 f7       	brne	.-8      	; 0x1efc <travel_path+0x67a>
    1f04:	00 c0       	rjmp	.+0      	; 0x1f06 <travel_path+0x684>
    1f06:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1f0e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 2 && path[i - 1] == 9)
    1f12:	d7 01       	movw	r26, r14
    1f14:	2d 91       	ld	r18, X+
    1f16:	3c 91       	ld	r19, X
    1f18:	11 97       	sbiw	r26, 0x01	; 1
    1f1a:	29 30       	cpi	r18, 0x09	; 9
    1f1c:	31 05       	cpc	r19, r1
    1f1e:	91 f4       	brne	.+36     	; 0x1f44 <travel_path+0x6c2>
			{
				sharp_right_turn_wls();
    1f20:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    1f24:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1f28:	8f ef       	ldi	r24, 0xFF	; 255
    1f2a:	9f e7       	ldi	r25, 0x7F	; 127
    1f2c:	a4 e0       	ldi	r26, 0x04	; 4
    1f2e:	81 50       	subi	r24, 0x01	; 1
    1f30:	90 40       	sbci	r25, 0x00	; 0
    1f32:	a0 40       	sbci	r26, 0x00	; 0
    1f34:	e1 f7       	brne	.-8      	; 0x1f2e <travel_path+0x6ac>
    1f36:	00 c0       	rjmp	.+0      	; 0x1f38 <travel_path+0x6b6>
    1f38:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1f40:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 5 && path[i - 1] == 9)
    1f44:	85 30       	cpi	r24, 0x05	; 5
    1f46:	91 05       	cpc	r25, r1
    1f48:	11 f0       	breq	.+4      	; 0x1f4e <travel_path+0x6cc>
    1f4a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    1f4e:	d7 01       	movw	r26, r14
    1f50:	8d 91       	ld	r24, X+
    1f52:	9c 91       	ld	r25, X
    1f54:	11 97       	sbiw	r26, 0x01	; 1
    1f56:	89 30       	cpi	r24, 0x09	; 9
    1f58:	91 05       	cpc	r25, r1
    1f5a:	11 f0       	breq	.+4      	; 0x1f60 <travel_path+0x6de>
    1f5c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				sharp_left_turn_wls();
    1f60:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1f64:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1f68:	8f ef       	ldi	r24, 0xFF	; 255
    1f6a:	9f e7       	ldi	r25, 0x7F	; 127
    1f6c:	a4 e0       	ldi	r26, 0x04	; 4
    1f6e:	81 50       	subi	r24, 0x01	; 1
    1f70:	90 40       	sbci	r25, 0x00	; 0
    1f72:	a0 40       	sbci	r26, 0x00	; 0
    1f74:	e1 f7       	brne	.-8      	; 0x1f6e <travel_path+0x6ec>
    1f76:	00 c0       	rjmp	.+0      	; 0x1f78 <travel_path+0x6f6>
    1f78:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1f80:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 5)
    1f84:	85 30       	cpi	r24, 0x05	; 5
    1f86:	91 05       	cpc	r25, r1
    1f88:	09 f0       	breq	.+2      	; 0x1f8c <travel_path+0x70a>
    1f8a:	ad c0       	rjmp	.+346    	; 0x20e6 <travel_path+0x864>
		{
			if (path[i + 1] == 6 && path[i - 1] == 4)
    1f8c:	d7 01       	movw	r26, r14
    1f8e:	14 96       	adiw	r26, 0x04	; 4
    1f90:	8d 91       	ld	r24, X+
    1f92:	9c 91       	ld	r25, X
    1f94:	15 97       	sbiw	r26, 0x05	; 5
    1f96:	86 30       	cpi	r24, 0x06	; 6
    1f98:	91 05       	cpc	r25, r1
    1f9a:	c1 f4       	brne	.+48     	; 0x1fcc <travel_path+0x74a>
    1f9c:	2d 91       	ld	r18, X+
    1f9e:	3c 91       	ld	r19, X
    1fa0:	11 97       	sbiw	r26, 0x01	; 1
    1fa2:	24 30       	cpi	r18, 0x04	; 4
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	91 f4       	brne	.+36     	; 0x1fcc <travel_path+0x74a>
			{
				sharp_left_turn_wls();
    1fa8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    1fac:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1fb0:	8f ef       	ldi	r24, 0xFF	; 255
    1fb2:	9f e7       	ldi	r25, 0x7F	; 127
    1fb4:	a4 e0       	ldi	r26, 0x04	; 4
    1fb6:	81 50       	subi	r24, 0x01	; 1
    1fb8:	90 40       	sbci	r25, 0x00	; 0
    1fba:	a0 40       	sbci	r26, 0x00	; 0
    1fbc:	e1 f7       	brne	.-8      	; 0x1fb6 <travel_path+0x734>
    1fbe:	00 c0       	rjmp	.+0      	; 0x1fc0 <travel_path+0x73e>
    1fc0:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    1fc8:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 1 && path[i - 1] == 4)
    1fcc:	81 30       	cpi	r24, 0x01	; 1
    1fce:	91 05       	cpc	r25, r1
    1fd0:	c9 f4       	brne	.+50     	; 0x2004 <travel_path+0x782>
    1fd2:	d7 01       	movw	r26, r14
    1fd4:	2d 91       	ld	r18, X+
    1fd6:	3c 91       	ld	r19, X
    1fd8:	11 97       	sbiw	r26, 0x01	; 1
    1fda:	24 30       	cpi	r18, 0x04	; 4
    1fdc:	31 05       	cpc	r19, r1
    1fde:	91 f4       	brne	.+36     	; 0x2004 <travel_path+0x782>
			{
				right_turn_wls();
    1fe0:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    1fe4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    1fe8:	8f ef       	ldi	r24, 0xFF	; 255
    1fea:	9f e7       	ldi	r25, 0x7F	; 127
    1fec:	a4 e0       	ldi	r26, 0x04	; 4
    1fee:	81 50       	subi	r24, 0x01	; 1
    1ff0:	90 40       	sbci	r25, 0x00	; 0
    1ff2:	a0 40       	sbci	r26, 0x00	; 0
    1ff4:	e1 f7       	brne	.-8      	; 0x1fee <travel_path+0x76c>
    1ff6:	00 c0       	rjmp	.+0      	; 0x1ff8 <travel_path+0x776>
    1ff8:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2000:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 6 && path[i - 1] == 1)
    2004:	86 30       	cpi	r24, 0x06	; 6
    2006:	91 05       	cpc	r25, r1
    2008:	c9 f4       	brne	.+50     	; 0x203c <travel_path+0x7ba>
    200a:	d7 01       	movw	r26, r14
    200c:	2d 91       	ld	r18, X+
    200e:	3c 91       	ld	r19, X
    2010:	11 97       	sbiw	r26, 0x01	; 1
    2012:	21 30       	cpi	r18, 0x01	; 1
    2014:	31 05       	cpc	r19, r1
    2016:	91 f4       	brne	.+36     	; 0x203c <travel_path+0x7ba>
			{
				sharp_right_turn_wls();
    2018:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    201c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2020:	8f ef       	ldi	r24, 0xFF	; 255
    2022:	9f e7       	ldi	r25, 0x7F	; 127
    2024:	a4 e0       	ldi	r26, 0x04	; 4
    2026:	81 50       	subi	r24, 0x01	; 1
    2028:	90 40       	sbci	r25, 0x00	; 0
    202a:	a0 40       	sbci	r26, 0x00	; 0
    202c:	e1 f7       	brne	.-8      	; 0x2026 <travel_path+0x7a4>
    202e:	00 c0       	rjmp	.+0      	; 0x2030 <travel_path+0x7ae>
    2030:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2038:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 4 && path[i - 1] == 1)
    203c:	84 30       	cpi	r24, 0x04	; 4
    203e:	91 05       	cpc	r25, r1
    2040:	91 f5       	brne	.+100    	; 0x20a6 <travel_path+0x824>
    2042:	d7 01       	movw	r26, r14
    2044:	2d 91       	ld	r18, X+
    2046:	3c 91       	ld	r19, X
    2048:	11 97       	sbiw	r26, 0x01	; 1
    204a:	21 30       	cpi	r18, 0x01	; 1
    204c:	31 05       	cpc	r19, r1
    204e:	91 f4       	brne	.+36     	; 0x2074 <travel_path+0x7f2>
			{
				left_turn_wls();
    2050:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    2054:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2058:	8f ef       	ldi	r24, 0xFF	; 255
    205a:	9f e7       	ldi	r25, 0x7F	; 127
    205c:	a4 e0       	ldi	r26, 0x04	; 4
    205e:	81 50       	subi	r24, 0x01	; 1
    2060:	90 40       	sbci	r25, 0x00	; 0
    2062:	a0 40       	sbci	r26, 0x00	; 0
    2064:	e1 f7       	brne	.-8      	; 0x205e <travel_path+0x7dc>
    2066:	00 c0       	rjmp	.+0      	; 0x2068 <travel_path+0x7e6>
    2068:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2070:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 4 && path[i - 1] == 6)
    2074:	d7 01       	movw	r26, r14
    2076:	2d 91       	ld	r18, X+
    2078:	3c 91       	ld	r19, X
    207a:	11 97       	sbiw	r26, 0x01	; 1
    207c:	26 30       	cpi	r18, 0x06	; 6
    207e:	31 05       	cpc	r19, r1
    2080:	91 f4       	brne	.+36     	; 0x20a6 <travel_path+0x824>
			{
				sharp_right_turn_wls();
    2082:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2086:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    208a:	8f ef       	ldi	r24, 0xFF	; 255
    208c:	9f e7       	ldi	r25, 0x7F	; 127
    208e:	a4 e0       	ldi	r26, 0x04	; 4
    2090:	81 50       	subi	r24, 0x01	; 1
    2092:	90 40       	sbci	r25, 0x00	; 0
    2094:	a0 40       	sbci	r26, 0x00	; 0
    2096:	e1 f7       	brne	.-8      	; 0x2090 <travel_path+0x80e>
    2098:	00 c0       	rjmp	.+0      	; 0x209a <travel_path+0x818>
    209a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    20a2:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 1 && path[i - 1] == 6)
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	91 05       	cpc	r25, r1
    20aa:	11 f0       	breq	.+4      	; 0x20b0 <travel_path+0x82e>
    20ac:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    20b0:	d7 01       	movw	r26, r14
    20b2:	8d 91       	ld	r24, X+
    20b4:	9c 91       	ld	r25, X
    20b6:	11 97       	sbiw	r26, 0x01	; 1
    20b8:	86 30       	cpi	r24, 0x06	; 6
    20ba:	91 05       	cpc	r25, r1
    20bc:	11 f0       	breq	.+4      	; 0x20c2 <travel_path+0x840>
    20be:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				sharp_left_turn_wls();
    20c2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    20c6:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    20ca:	8f ef       	ldi	r24, 0xFF	; 255
    20cc:	9f e7       	ldi	r25, 0x7F	; 127
    20ce:	a4 e0       	ldi	r26, 0x04	; 4
    20d0:	81 50       	subi	r24, 0x01	; 1
    20d2:	90 40       	sbci	r25, 0x00	; 0
    20d4:	a0 40       	sbci	r26, 0x00	; 0
    20d6:	e1 f7       	brne	.-8      	; 0x20d0 <travel_path+0x84e>
    20d8:	00 c0       	rjmp	.+0      	; 0x20da <travel_path+0x858>
    20da:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    20e2:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 6)
    20e6:	86 30       	cpi	r24, 0x06	; 6
    20e8:	91 05       	cpc	r25, r1
    20ea:	09 f0       	breq	.+2      	; 0x20ee <travel_path+0x86c>
    20ec:	5a c0       	rjmp	.+180    	; 0x21a2 <travel_path+0x920>
		{
			if (path[i + 1] == 5 && path[i-1]==7)
    20ee:	d7 01       	movw	r26, r14
    20f0:	14 96       	adiw	r26, 0x04	; 4
    20f2:	8d 91       	ld	r24, X+
    20f4:	9c 91       	ld	r25, X
    20f6:	15 97       	sbiw	r26, 0x05	; 5
    20f8:	85 30       	cpi	r24, 0x05	; 5
    20fa:	91 05       	cpc	r25, r1
    20fc:	59 f4       	brne	.+22     	; 0x2114 <travel_path+0x892>
    20fe:	2d 91       	ld	r18, X+
    2100:	3c 91       	ld	r19, X
    2102:	11 97       	sbiw	r26, 0x01	; 1
    2104:	27 30       	cpi	r18, 0x07	; 7
    2106:	31 05       	cpc	r19, r1
    2108:	29 f4       	brne	.+10     	; 0x2114 <travel_path+0x892>
			{
				forward_wls(1);
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2110:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 7 && path[i - 1] == 5)
    2114:	87 30       	cpi	r24, 0x07	; 7
    2116:	91 05       	cpc	r25, r1
    2118:	19 f5       	brne	.+70     	; 0x2160 <travel_path+0x8de>
    211a:	f7 01       	movw	r30, r14
    211c:	20 81       	ld	r18, Z
    211e:	31 81       	ldd	r19, Z+1	; 0x01
    2120:	25 30       	cpi	r18, 0x05	; 5
    2122:	31 05       	cpc	r19, r1
    2124:	29 f4       	brne	.+10     	; 0x2130 <travel_path+0x8ae>
			{
				forward_wls(1);
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    212c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 7 && path[i - 1] == -1)
    2130:	20 81       	ld	r18, Z
    2132:	31 81       	ldd	r19, Z+1	; 0x01
    2134:	bf ef       	ldi	r27, 0xFF	; 255
    2136:	2f 3f       	cpi	r18, 0xFF	; 255
    2138:	3b 07       	cpc	r19, r27
    213a:	91 f4       	brne	.+36     	; 0x2160 <travel_path+0x8de>
			{
				sharp_left_turn_wls();
    213c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2140:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	9f e7       	ldi	r25, 0x7F	; 127
    2148:	a4 e0       	ldi	r26, 0x04	; 4
    214a:	81 50       	subi	r24, 0x01	; 1
    214c:	90 40       	sbci	r25, 0x00	; 0
    214e:	a0 40       	sbci	r26, 0x00	; 0
    2150:	e1 f7       	brne	.-8      	; 0x214a <travel_path+0x8c8>
    2152:	00 c0       	rjmp	.+0      	; 0x2154 <travel_path+0x8d2>
    2154:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    215c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 5 && path[i - 1] == -1)
    2160:	85 30       	cpi	r24, 0x05	; 5
    2162:	91 05       	cpc	r25, r1
    2164:	11 f0       	breq	.+4      	; 0x216a <travel_path+0x8e8>
    2166:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    216a:	d7 01       	movw	r26, r14
    216c:	8d 91       	ld	r24, X+
    216e:	9c 91       	ld	r25, X
    2170:	11 97       	sbiw	r26, 0x01	; 1
    2172:	bf ef       	ldi	r27, 0xFF	; 255
    2174:	8f 3f       	cpi	r24, 0xFF	; 255
    2176:	9b 07       	cpc	r25, r27
    2178:	11 f0       	breq	.+4      	; 0x217e <travel_path+0x8fc>
    217a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    217e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2182:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	9f e7       	ldi	r25, 0x7F	; 127
    218a:	a4 e0       	ldi	r26, 0x04	; 4
    218c:	81 50       	subi	r24, 0x01	; 1
    218e:	90 40       	sbci	r25, 0x00	; 0
    2190:	a0 40       	sbci	r26, 0x00	; 0
    2192:	e1 f7       	brne	.-8      	; 0x218c <travel_path+0x90a>
    2194:	00 c0       	rjmp	.+0      	; 0x2196 <travel_path+0x914>
    2196:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    219e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}

		}

		else if (current_node == 7)
    21a2:	87 30       	cpi	r24, 0x07	; 7
    21a4:	91 05       	cpc	r25, r1
    21a6:	09 f0       	breq	.+2      	; 0x21aa <travel_path+0x928>
    21a8:	c3 c0       	rjmp	.+390    	; 0x2330 <__stack+0x131>
		{
		if (path[i + 1] == 8 && path[i - 1] == 6)
    21aa:	d7 01       	movw	r26, r14
    21ac:	14 96       	adiw	r26, 0x04	; 4
    21ae:	8d 91       	ld	r24, X+
    21b0:	9c 91       	ld	r25, X
    21b2:	15 97       	sbiw	r26, 0x05	; 5
    21b4:	88 30       	cpi	r24, 0x08	; 8
    21b6:	91 05       	cpc	r25, r1
    21b8:	19 f5       	brne	.+70     	; 0x2200 <__stack+0x1>
    21ba:	2d 91       	ld	r18, X+
    21bc:	3c 91       	ld	r19, X
    21be:	11 97       	sbiw	r26, 0x01	; 1
    21c0:	26 30       	cpi	r18, 0x06	; 6
    21c2:	31 05       	cpc	r19, r1
    21c4:	e9 f4       	brne	.+58     	; 0x2200 <__stack+0x1>
		{
			sharp_right_turn_wls();
    21c6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
			stop();
    21ca:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    21ce:	8f ef       	ldi	r24, 0xFF	; 255
    21d0:	9f e7       	ldi	r25, 0x7F	; 127
    21d2:	a4 e0       	ldi	r26, 0x04	; 4
    21d4:	81 50       	subi	r24, 0x01	; 1
    21d6:	90 40       	sbci	r25, 0x00	; 0
    21d8:	a0 40       	sbci	r26, 0x00	; 0
    21da:	e1 f7       	brne	.-8      	; 0x21d4 <travel_path+0x952>
    21dc:	00 c0       	rjmp	.+0      	; 0x21de <travel_path+0x95c>
    21de:	00 00       	nop
			_delay_ms(100);
			forward_wls(1);
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
			
			forward();
    21e6:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    21ea:	86 e6       	ldi	r24, 0x66	; 102
    21ec:	96 ea       	ldi	r25, 0xA6	; 166
    21ee:	a0 e1       	ldi	r26, 0x10	; 16
    21f0:	81 50       	subi	r24, 0x01	; 1
    21f2:	90 40       	sbci	r25, 0x00	; 0
    21f4:	a0 40       	sbci	r26, 0x00	; 0
    21f6:	e1 f7       	brne	.-8      	; 0x21f0 <travel_path+0x96e>
			_delay_ms(370);
			stop();
    21f8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    21fc:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
		}
		else if (path[i + 1] == 10 && path[i - 1] == 6)
    2200:	8a 30       	cpi	r24, 0x0A	; 10
    2202:	91 05       	cpc	r25, r1
    2204:	c9 f4       	brne	.+50     	; 0x2238 <__stack+0x39>
    2206:	d7 01       	movw	r26, r14
    2208:	2d 91       	ld	r18, X+
    220a:	3c 91       	ld	r19, X
    220c:	11 97       	sbiw	r26, 0x01	; 1
    220e:	26 30       	cpi	r18, 0x06	; 6
    2210:	31 05       	cpc	r19, r1
    2212:	91 f4       	brne	.+36     	; 0x2238 <__stack+0x39>
		{
			sharp_left_turn_wls();
    2214:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
			stop();
    2218:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    221c:	8f ef       	ldi	r24, 0xFF	; 255
    221e:	9f e7       	ldi	r25, 0x7F	; 127
    2220:	a4 e0       	ldi	r26, 0x04	; 4
    2222:	81 50       	subi	r24, 0x01	; 1
    2224:	90 40       	sbci	r25, 0x00	; 0
    2226:	a0 40       	sbci	r26, 0x00	; 0
    2228:	e1 f7       	brne	.-8      	; 0x2222 <__stack+0x23>
    222a:	00 c0       	rjmp	.+0      	; 0x222c <__stack+0x2d>
    222c:	00 00       	nop
			_delay_ms(100);
			forward_wls(1);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2234:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
		}
		else if (path[i + 1] == 8 && path[i - 1] == 10)
    2238:	88 30       	cpi	r24, 0x08	; 8
    223a:	91 05       	cpc	r25, r1
    223c:	89 f5       	brne	.+98     	; 0x22a0 <__stack+0xa1>
    223e:	d7 01       	movw	r26, r14
    2240:	2d 91       	ld	r18, X+
    2242:	3c 91       	ld	r19, X
    2244:	11 97       	sbiw	r26, 0x01	; 1
    2246:	2a 30       	cpi	r18, 0x0A	; 10
    2248:	31 05       	cpc	r19, r1
    224a:	51 f5       	brne	.+84     	; 0x22a0 <__stack+0xa1>
		{
			forward();
    224c:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    2250:	8f ef       	ldi	r24, 0xFF	; 255
    2252:	9f e7       	ldi	r25, 0x7F	; 127
    2254:	a4 e0       	ldi	r26, 0x04	; 4
    2256:	81 50       	subi	r24, 0x01	; 1
    2258:	90 40       	sbci	r25, 0x00	; 0
    225a:	a0 40       	sbci	r26, 0x00	; 0
    225c:	e1 f7       	brne	.-8      	; 0x2256 <__stack+0x57>
    225e:	00 c0       	rjmp	.+0      	; 0x2260 <__stack+0x61>
    2260:	00 00       	nop
			_delay_ms(100);
			stop();
    2262:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
			left_turn_wls();
    2266:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
			stop();
    226a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    226e:	8f ef       	ldi	r24, 0xFF	; 255
    2270:	9f e7       	ldi	r25, 0x7F	; 127
    2272:	a4 e0       	ldi	r26, 0x04	; 4
    2274:	81 50       	subi	r24, 0x01	; 1
    2276:	90 40       	sbci	r25, 0x00	; 0
    2278:	a0 40       	sbci	r26, 0x00	; 0
    227a:	e1 f7       	brne	.-8      	; 0x2274 <__stack+0x75>
    227c:	00 c0       	rjmp	.+0      	; 0x227e <__stack+0x7f>
    227e:	00 00       	nop
			_delay_ms(100);
			forward_wls(1);
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
			
			forward();
    2286:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    228a:	86 e6       	ldi	r24, 0x66	; 102
    228c:	96 ea       	ldi	r25, 0xA6	; 166
    228e:	a0 e1       	ldi	r26, 0x10	; 16
    2290:	81 50       	subi	r24, 0x01	; 1
    2292:	90 40       	sbci	r25, 0x00	; 0
    2294:	a0 40       	sbci	r26, 0x00	; 0
    2296:	e1 f7       	brne	.-8      	; 0x2290 <__stack+0x91>
			_delay_ms(370);
			stop();
    2298:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    229c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
		}
		else if (path[i + 1] == 6 && path[i - 1] == 10)
    22a0:	86 30       	cpi	r24, 0x06	; 6
    22a2:	91 05       	cpc	r25, r1
    22a4:	91 f5       	brne	.+100    	; 0x230a <__stack+0x10b>
    22a6:	d7 01       	movw	r26, r14
    22a8:	2d 91       	ld	r18, X+
    22aa:	3c 91       	ld	r19, X
    22ac:	11 97       	sbiw	r26, 0x01	; 1
    22ae:	2a 30       	cpi	r18, 0x0A	; 10
    22b0:	31 05       	cpc	r19, r1
    22b2:	91 f4       	brne	.+36     	; 0x22d8 <__stack+0xd9>
		{
			sharp_right_turn_wls();
    22b4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
			stop();
    22b8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    22bc:	8f ef       	ldi	r24, 0xFF	; 255
    22be:	9f e7       	ldi	r25, 0x7F	; 127
    22c0:	a4 e0       	ldi	r26, 0x04	; 4
    22c2:	81 50       	subi	r24, 0x01	; 1
    22c4:	90 40       	sbci	r25, 0x00	; 0
    22c6:	a0 40       	sbci	r26, 0x00	; 0
    22c8:	e1 f7       	brne	.-8      	; 0x22c2 <__stack+0xc3>
    22ca:	00 c0       	rjmp	.+0      	; 0x22cc <__stack+0xcd>
    22cc:	00 00       	nop
			_delay_ms(100);
			forward_wls(1);
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    22d4:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
		}
		else if (path[i + 1] == 6 && path[i - 1] == 8)
    22d8:	d7 01       	movw	r26, r14
    22da:	2d 91       	ld	r18, X+
    22dc:	3c 91       	ld	r19, X
    22de:	11 97       	sbiw	r26, 0x01	; 1
    22e0:	28 30       	cpi	r18, 0x08	; 8
    22e2:	31 05       	cpc	r19, r1
    22e4:	91 f4       	brne	.+36     	; 0x230a <__stack+0x10b>
		{
			sharp_left_turn_wls();
    22e6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
			stop();
    22ea:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    22ee:	8f ef       	ldi	r24, 0xFF	; 255
    22f0:	9f e7       	ldi	r25, 0x7F	; 127
    22f2:	a4 e0       	ldi	r26, 0x04	; 4
    22f4:	81 50       	subi	r24, 0x01	; 1
    22f6:	90 40       	sbci	r25, 0x00	; 0
    22f8:	a0 40       	sbci	r26, 0x00	; 0
    22fa:	e1 f7       	brne	.-8      	; 0x22f4 <__stack+0xf5>
    22fc:	00 c0       	rjmp	.+0      	; 0x22fe <__stack+0xff>
    22fe:	00 00       	nop
			_delay_ms(100);
			forward_wls(1);
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2306:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
		}
		else if (path[i + 1] == 10 && path[i - 1] == 8)
    230a:	8a 30       	cpi	r24, 0x0A	; 10
    230c:	91 05       	cpc	r25, r1
    230e:	11 f0       	breq	.+4      	; 0x2314 <__stack+0x115>
    2310:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    2314:	d7 01       	movw	r26, r14
    2316:	8d 91       	ld	r24, X+
    2318:	9c 91       	ld	r25, X
    231a:	11 97       	sbiw	r26, 0x01	; 1
    231c:	88 30       	cpi	r24, 0x08	; 8
    231e:	91 05       	cpc	r25, r1
    2320:	11 f0       	breq	.+4      	; 0x2326 <__stack+0x127>
    2322:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
		{
			forward_wls(1);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    232c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
		}

		}

		else if (current_node == 8)
    2330:	88 30       	cpi	r24, 0x08	; 8
    2332:	91 05       	cpc	r25, r1
    2334:	d1 f5       	brne	.+116    	; 0x23aa <__stack+0x1ab>
		{
			if (path[i + 1] == 7 && path[i - 1] == -1)
    2336:	f7 01       	movw	r30, r14
    2338:	84 81       	ldd	r24, Z+4	; 0x04
    233a:	95 81       	ldd	r25, Z+5	; 0x05
    233c:	87 30       	cpi	r24, 0x07	; 7
    233e:	91 05       	cpc	r25, r1
    2340:	c1 f4       	brne	.+48     	; 0x2372 <__stack+0x173>
    2342:	80 81       	ld	r24, Z
    2344:	91 81       	ldd	r25, Z+1	; 0x01
    2346:	ff ef       	ldi	r31, 0xFF	; 255
    2348:	8f 3f       	cpi	r24, 0xFF	; 255
    234a:	9f 07       	cpc	r25, r31
    234c:	91 f4       	brne	.+36     	; 0x2372 <__stack+0x173>
			{
				sharp_left_turn_wls();
    234e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2352:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	9f e7       	ldi	r25, 0x7F	; 127
    235a:	a4 e0       	ldi	r26, 0x04	; 4
    235c:	81 50       	subi	r24, 0x01	; 1
    235e:	90 40       	sbci	r25, 0x00	; 0
    2360:	a0 40       	sbci	r26, 0x00	; 0
    2362:	e1 f7       	brne	.-8      	; 0x235c <__stack+0x15d>
    2364:	00 c0       	rjmp	.+0      	; 0x2366 <__stack+0x167>
    2366:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    236e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i - 1] == 7)
    2372:	d7 01       	movw	r26, r14
    2374:	8d 91       	ld	r24, X+
    2376:	9c 91       	ld	r25, X
    2378:	11 97       	sbiw	r26, 0x01	; 1
    237a:	87 30       	cpi	r24, 0x07	; 7
    237c:	91 05       	cpc	r25, r1
    237e:	11 f0       	breq	.+4      	; 0x2384 <__stack+0x185>
    2380:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				forward();
    2384:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
				velocity(87,90);
    2388:	87 e5       	ldi	r24, 0x57	; 87
    238a:	6a e5       	ldi	r22, 0x5A	; 90
    238c:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	9f e7       	ldi	r25, 0x7F	; 127
    2394:	ad e0       	ldi	r26, 0x0D	; 13
    2396:	81 50       	subi	r24, 0x01	; 1
    2398:	90 40       	sbci	r25, 0x00	; 0
    239a:	a0 40       	sbci	r26, 0x00	; 0
    239c:	e1 f7       	brne	.-8      	; 0x2396 <__stack+0x197>
    239e:	00 c0       	rjmp	.+0      	; 0x23a0 <__stack+0x1a1>
    23a0:	00 00       	nop
				_delay_ms(300);
				stop();
    23a2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    23a6:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
				
			}
		}

		else if (current_node == 9)
    23aa:	89 30       	cpi	r24, 0x09	; 9
    23ac:	91 05       	cpc	r25, r1
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <__stack+0x1b3>
    23b0:	ad c0       	rjmp	.+346    	; 0x250c <__stack+0x30d>
		{
			if (path[i + 1] == 10 && path[i - 1] == 4)
    23b2:	d7 01       	movw	r26, r14
    23b4:	14 96       	adiw	r26, 0x04	; 4
    23b6:	8d 91       	ld	r24, X+
    23b8:	9c 91       	ld	r25, X
    23ba:	15 97       	sbiw	r26, 0x05	; 5
    23bc:	8a 30       	cpi	r24, 0x0A	; 10
    23be:	91 05       	cpc	r25, r1
    23c0:	c1 f4       	brne	.+48     	; 0x23f2 <__stack+0x1f3>
    23c2:	2d 91       	ld	r18, X+
    23c4:	3c 91       	ld	r19, X
    23c6:	11 97       	sbiw	r26, 0x01	; 1
    23c8:	24 30       	cpi	r18, 0x04	; 4
    23ca:	31 05       	cpc	r19, r1
    23cc:	91 f4       	brne	.+36     	; 0x23f2 <__stack+0x1f3>
			{
				sharp_right_turn_wls();
    23ce:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    23d2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	9f e7       	ldi	r25, 0x7F	; 127
    23da:	a4 e0       	ldi	r26, 0x04	; 4
    23dc:	81 50       	subi	r24, 0x01	; 1
    23de:	90 40       	sbci	r25, 0x00	; 0
    23e0:	a0 40       	sbci	r26, 0x00	; 0
    23e2:	e1 f7       	brne	.-8      	; 0x23dc <__stack+0x1dd>
    23e4:	00 c0       	rjmp	.+0      	; 0x23e6 <__stack+0x1e7>
    23e6:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    23ee:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 12 && path[i - 1] == 4)
    23f2:	8c 30       	cpi	r24, 0x0C	; 12
    23f4:	91 05       	cpc	r25, r1
    23f6:	c9 f4       	brne	.+50     	; 0x242a <__stack+0x22b>
    23f8:	d7 01       	movw	r26, r14
    23fa:	2d 91       	ld	r18, X+
    23fc:	3c 91       	ld	r19, X
    23fe:	11 97       	sbiw	r26, 0x01	; 1
    2400:	24 30       	cpi	r18, 0x04	; 4
    2402:	31 05       	cpc	r19, r1
    2404:	91 f4       	brne	.+36     	; 0x242a <__stack+0x22b>
			{
				left_turn_wls();
    2406:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    240a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    240e:	8f ef       	ldi	r24, 0xFF	; 255
    2410:	9f e7       	ldi	r25, 0x7F	; 127
    2412:	a4 e0       	ldi	r26, 0x04	; 4
    2414:	81 50       	subi	r24, 0x01	; 1
    2416:	90 40       	sbci	r25, 0x00	; 0
    2418:	a0 40       	sbci	r26, 0x00	; 0
    241a:	e1 f7       	brne	.-8      	; 0x2414 <__stack+0x215>
    241c:	00 c0       	rjmp	.+0      	; 0x241e <__stack+0x21f>
    241e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2426:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 10 && path[i - 1] == 12)
    242a:	8a 30       	cpi	r24, 0x0A	; 10
    242c:	91 05       	cpc	r25, r1
    242e:	c9 f4       	brne	.+50     	; 0x2462 <__stack+0x263>
    2430:	d7 01       	movw	r26, r14
    2432:	2d 91       	ld	r18, X+
    2434:	3c 91       	ld	r19, X
    2436:	11 97       	sbiw	r26, 0x01	; 1
    2438:	2c 30       	cpi	r18, 0x0C	; 12
    243a:	31 05       	cpc	r19, r1
    243c:	91 f4       	brne	.+36     	; 0x2462 <__stack+0x263>
			{
				sharp_left_turn_wls();
    243e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2442:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2446:	8f ef       	ldi	r24, 0xFF	; 255
    2448:	9f e7       	ldi	r25, 0x7F	; 127
    244a:	a4 e0       	ldi	r26, 0x04	; 4
    244c:	81 50       	subi	r24, 0x01	; 1
    244e:	90 40       	sbci	r25, 0x00	; 0
    2450:	a0 40       	sbci	r26, 0x00	; 0
    2452:	e1 f7       	brne	.-8      	; 0x244c <__stack+0x24d>
    2454:	00 c0       	rjmp	.+0      	; 0x2456 <__stack+0x257>
    2456:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    245e:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 4 && path[i - 1] == 12)
    2462:	84 30       	cpi	r24, 0x04	; 4
    2464:	91 05       	cpc	r25, r1
    2466:	91 f5       	brne	.+100    	; 0x24cc <__stack+0x2cd>
    2468:	d7 01       	movw	r26, r14
    246a:	2d 91       	ld	r18, X+
    246c:	3c 91       	ld	r19, X
    246e:	11 97       	sbiw	r26, 0x01	; 1
    2470:	2c 30       	cpi	r18, 0x0C	; 12
    2472:	31 05       	cpc	r19, r1
    2474:	91 f4       	brne	.+36     	; 0x249a <__stack+0x29b>
			{
				right_turn_wls();
    2476:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    247a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    247e:	8f ef       	ldi	r24, 0xFF	; 255
    2480:	9f e7       	ldi	r25, 0x7F	; 127
    2482:	a4 e0       	ldi	r26, 0x04	; 4
    2484:	81 50       	subi	r24, 0x01	; 1
    2486:	90 40       	sbci	r25, 0x00	; 0
    2488:	a0 40       	sbci	r26, 0x00	; 0
    248a:	e1 f7       	brne	.-8      	; 0x2484 <__stack+0x285>
    248c:	00 c0       	rjmp	.+0      	; 0x248e <__stack+0x28f>
    248e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2490:	81 e0       	ldi	r24, 0x01	; 1
    2492:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2496:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 4 && path[i - 1] == 10)
    249a:	d7 01       	movw	r26, r14
    249c:	2d 91       	ld	r18, X+
    249e:	3c 91       	ld	r19, X
    24a0:	11 97       	sbiw	r26, 0x01	; 1
    24a2:	2a 30       	cpi	r18, 0x0A	; 10
    24a4:	31 05       	cpc	r19, r1
    24a6:	91 f4       	brne	.+36     	; 0x24cc <__stack+0x2cd>
			{
				left_turn_wls();
    24a8:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    24ac:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    24b0:	8f ef       	ldi	r24, 0xFF	; 255
    24b2:	9f e7       	ldi	r25, 0x7F	; 127
    24b4:	a4 e0       	ldi	r26, 0x04	; 4
    24b6:	81 50       	subi	r24, 0x01	; 1
    24b8:	90 40       	sbci	r25, 0x00	; 0
    24ba:	a0 40       	sbci	r26, 0x00	; 0
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <__stack+0x2b7>
    24be:	00 c0       	rjmp	.+0      	; 0x24c0 <__stack+0x2c1>
    24c0:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    24c8:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 12 && path[i - 1] == 10)
    24cc:	8c 30       	cpi	r24, 0x0C	; 12
    24ce:	91 05       	cpc	r25, r1
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <__stack+0x2d7>
    24d2:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    24d6:	d7 01       	movw	r26, r14
    24d8:	8d 91       	ld	r24, X+
    24da:	9c 91       	ld	r25, X
    24dc:	11 97       	sbiw	r26, 0x01	; 1
    24de:	8a 30       	cpi	r24, 0x0A	; 10
    24e0:	91 05       	cpc	r25, r1
    24e2:	11 f0       	breq	.+4      	; 0x24e8 <__stack+0x2e9>
    24e4:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    24e8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    24ec:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    24f0:	8f ef       	ldi	r24, 0xFF	; 255
    24f2:	9f e7       	ldi	r25, 0x7F	; 127
    24f4:	a4 e0       	ldi	r26, 0x04	; 4
    24f6:	81 50       	subi	r24, 0x01	; 1
    24f8:	90 40       	sbci	r25, 0x00	; 0
    24fa:	a0 40       	sbci	r26, 0x00	; 0
    24fc:	e1 f7       	brne	.-8      	; 0x24f6 <__stack+0x2f7>
    24fe:	00 c0       	rjmp	.+0      	; 0x2500 <__stack+0x301>
    2500:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2508:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 10)
    250c:	8a 30       	cpi	r24, 0x0A	; 10
    250e:	91 05       	cpc	r25, r1
    2510:	09 f0       	breq	.+2      	; 0x2514 <__stack+0x315>
    2512:	ae c0       	rjmp	.+348    	; 0x2670 <__stack+0x471>
		{
			if (path[i + 1] == 13 && path[i - 1] == 7)
    2514:	d7 01       	movw	r26, r14
    2516:	14 96       	adiw	r26, 0x04	; 4
    2518:	8d 91       	ld	r24, X+
    251a:	9c 91       	ld	r25, X
    251c:	15 97       	sbiw	r26, 0x05	; 5
    251e:	8d 30       	cpi	r24, 0x0D	; 13
    2520:	91 05       	cpc	r25, r1
    2522:	c1 f4       	brne	.+48     	; 0x2554 <__stack+0x355>
    2524:	2d 91       	ld	r18, X+
    2526:	3c 91       	ld	r19, X
    2528:	11 97       	sbiw	r26, 0x01	; 1
    252a:	27 30       	cpi	r18, 0x07	; 7
    252c:	31 05       	cpc	r19, r1
    252e:	91 f4       	brne	.+36     	; 0x2554 <__stack+0x355>
			{
				left_turn_wls();
    2530:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    2534:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2538:	8f ef       	ldi	r24, 0xFF	; 255
    253a:	9f e7       	ldi	r25, 0x7F	; 127
    253c:	a4 e0       	ldi	r26, 0x04	; 4
    253e:	81 50       	subi	r24, 0x01	; 1
    2540:	90 40       	sbci	r25, 0x00	; 0
    2542:	a0 40       	sbci	r26, 0x00	; 0
    2544:	e1 f7       	brne	.-8      	; 0x253e <__stack+0x33f>
    2546:	00 c0       	rjmp	.+0      	; 0x2548 <__stack+0x349>
    2548:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2550:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 9 && path[i - 1] == 7)
    2554:	89 30       	cpi	r24, 0x09	; 9
    2556:	91 05       	cpc	r25, r1
    2558:	c9 f4       	brne	.+50     	; 0x258c <__stack+0x38d>
    255a:	d7 01       	movw	r26, r14
    255c:	2d 91       	ld	r18, X+
    255e:	3c 91       	ld	r19, X
    2560:	11 97       	sbiw	r26, 0x01	; 1
    2562:	27 30       	cpi	r18, 0x07	; 7
    2564:	31 05       	cpc	r19, r1
    2566:	91 f4       	brne	.+36     	; 0x258c <__stack+0x38d>
			{
				sharp_left_turn_wls();
    2568:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    256c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2570:	8f ef       	ldi	r24, 0xFF	; 255
    2572:	9f e7       	ldi	r25, 0x7F	; 127
    2574:	a4 e0       	ldi	r26, 0x04	; 4
    2576:	81 50       	subi	r24, 0x01	; 1
    2578:	90 40       	sbci	r25, 0x00	; 0
    257a:	a0 40       	sbci	r26, 0x00	; 0
    257c:	e1 f7       	brne	.-8      	; 0x2576 <__stack+0x377>
    257e:	00 c0       	rjmp	.+0      	; 0x2580 <__stack+0x381>
    2580:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2582:	81 e0       	ldi	r24, 0x01	; 1
    2584:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2588:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 13 && path[i - 1] == 9)
    258c:	8d 30       	cpi	r24, 0x0D	; 13
    258e:	91 05       	cpc	r25, r1
    2590:	c9 f4       	brne	.+50     	; 0x25c4 <__stack+0x3c5>
    2592:	d7 01       	movw	r26, r14
    2594:	2d 91       	ld	r18, X+
    2596:	3c 91       	ld	r19, X
    2598:	11 97       	sbiw	r26, 0x01	; 1
    259a:	29 30       	cpi	r18, 0x09	; 9
    259c:	31 05       	cpc	r19, r1
    259e:	91 f4       	brne	.+36     	; 0x25c4 <__stack+0x3c5>
			{
				left_turn_wls();
    25a0:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    25a4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    25a8:	8f ef       	ldi	r24, 0xFF	; 255
    25aa:	9f e7       	ldi	r25, 0x7F	; 127
    25ac:	a4 e0       	ldi	r26, 0x04	; 4
    25ae:	81 50       	subi	r24, 0x01	; 1
    25b0:	90 40       	sbci	r25, 0x00	; 0
    25b2:	a0 40       	sbci	r26, 0x00	; 0
    25b4:	e1 f7       	brne	.-8      	; 0x25ae <__stack+0x3af>
    25b6:	00 c0       	rjmp	.+0      	; 0x25b8 <__stack+0x3b9>
    25b8:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    25c0:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 7 && path[i - 1] == 9)
    25c4:	87 30       	cpi	r24, 0x07	; 7
    25c6:	91 05       	cpc	r25, r1
    25c8:	c9 f4       	brne	.+50     	; 0x25fc <__stack+0x3fd>
    25ca:	d7 01       	movw	r26, r14
    25cc:	2d 91       	ld	r18, X+
    25ce:	3c 91       	ld	r19, X
    25d0:	11 97       	sbiw	r26, 0x01	; 1
    25d2:	29 30       	cpi	r18, 0x09	; 9
    25d4:	31 05       	cpc	r19, r1
    25d6:	91 f4       	brne	.+36     	; 0x25fc <__stack+0x3fd>
			{
				sharp_right_turn_wls();
    25d8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    25dc:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    25e0:	8f ef       	ldi	r24, 0xFF	; 255
    25e2:	9f e7       	ldi	r25, 0x7F	; 127
    25e4:	a4 e0       	ldi	r26, 0x04	; 4
    25e6:	81 50       	subi	r24, 0x01	; 1
    25e8:	90 40       	sbci	r25, 0x00	; 0
    25ea:	a0 40       	sbci	r26, 0x00	; 0
    25ec:	e1 f7       	brne	.-8      	; 0x25e6 <__stack+0x3e7>
    25ee:	00 c0       	rjmp	.+0      	; 0x25f0 <__stack+0x3f1>
    25f0:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    25f8:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 9 && path[i - 1] == 13)
    25fc:	89 30       	cpi	r24, 0x09	; 9
    25fe:	91 05       	cpc	r25, r1
    2600:	c9 f4       	brne	.+50     	; 0x2634 <__stack+0x435>
    2602:	d7 01       	movw	r26, r14
    2604:	2d 91       	ld	r18, X+
    2606:	3c 91       	ld	r19, X
    2608:	11 97       	sbiw	r26, 0x01	; 1
    260a:	2d 30       	cpi	r18, 0x0D	; 13
    260c:	31 05       	cpc	r19, r1
    260e:	91 f4       	brne	.+36     	; 0x2634 <__stack+0x435>
			{
				sharp_right_turn_wls();
    2610:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2614:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2618:	8f ef       	ldi	r24, 0xFF	; 255
    261a:	9f e7       	ldi	r25, 0x7F	; 127
    261c:	a4 e0       	ldi	r26, 0x04	; 4
    261e:	81 50       	subi	r24, 0x01	; 1
    2620:	90 40       	sbci	r25, 0x00	; 0
    2622:	a0 40       	sbci	r26, 0x00	; 0
    2624:	e1 f7       	brne	.-8      	; 0x261e <__stack+0x41f>
    2626:	00 c0       	rjmp	.+0      	; 0x2628 <__stack+0x429>
    2628:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2630:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 7 && path[i - 1] == 13)
    2634:	87 30       	cpi	r24, 0x07	; 7
    2636:	91 05       	cpc	r25, r1
    2638:	11 f0       	breq	.+4      	; 0x263e <__stack+0x43f>
    263a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    263e:	d7 01       	movw	r26, r14
    2640:	8d 91       	ld	r24, X+
    2642:	9c 91       	ld	r25, X
    2644:	11 97       	sbiw	r26, 0x01	; 1
    2646:	8d 30       	cpi	r24, 0x0D	; 13
    2648:	91 05       	cpc	r25, r1
    264a:	11 f0       	breq	.+4      	; 0x2650 <__stack+0x451>
    264c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				stop();
    2650:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2654:	8f ef       	ldi	r24, 0xFF	; 255
    2656:	9f e7       	ldi	r25, 0x7F	; 127
    2658:	a4 e0       	ldi	r26, 0x04	; 4
    265a:	81 50       	subi	r24, 0x01	; 1
    265c:	90 40       	sbci	r25, 0x00	; 0
    265e:	a0 40       	sbci	r26, 0x00	; 0
    2660:	e1 f7       	brne	.-8      	; 0x265a <__stack+0x45b>
    2662:	00 c0       	rjmp	.+0      	; 0x2664 <__stack+0x465>
    2664:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    266c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 11)
    2670:	8b 30       	cpi	r24, 0x0B	; 11
    2672:	91 05       	cpc	r25, r1
    2674:	09 f0       	breq	.+2      	; 0x2678 <__stack+0x479>
    2676:	5f c0       	rjmp	.+190    	; 0x2736 <__stack+0x537>
		{
			if (path[i + 1] == 12 && path[i-1]==3)
    2678:	d7 01       	movw	r26, r14
    267a:	14 96       	adiw	r26, 0x04	; 4
    267c:	8d 91       	ld	r24, X+
    267e:	9c 91       	ld	r25, X
    2680:	15 97       	sbiw	r26, 0x05	; 5
    2682:	8c 30       	cpi	r24, 0x0C	; 12
    2684:	91 05       	cpc	r25, r1
    2686:	59 f4       	brne	.+22     	; 0x269e <__stack+0x49f>
    2688:	2d 91       	ld	r18, X+
    268a:	3c 91       	ld	r19, X
    268c:	11 97       	sbiw	r26, 0x01	; 1
    268e:	23 30       	cpi	r18, 0x03	; 3
    2690:	31 05       	cpc	r19, r1
    2692:	29 f4       	brne	.+10     	; 0x269e <__stack+0x49f>
				forward_wls(1);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    269a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>

			else if (path[i + 1] == 3 && path[i - 1] == -1)
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	91 05       	cpc	r25, r1
    26a2:	c9 f4       	brne	.+50     	; 0x26d6 <__stack+0x4d7>
    26a4:	f7 01       	movw	r30, r14
    26a6:	20 81       	ld	r18, Z
    26a8:	31 81       	ldd	r19, Z+1	; 0x01
    26aa:	ff ef       	ldi	r31, 0xFF	; 255
    26ac:	2f 3f       	cpi	r18, 0xFF	; 255
    26ae:	3f 07       	cpc	r19, r31
    26b0:	91 f4       	brne	.+36     	; 0x26d6 <__stack+0x4d7>
			{
				sharp_left_turn_wls();
    26b2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    26b6:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    26ba:	8f ef       	ldi	r24, 0xFF	; 255
    26bc:	9f e7       	ldi	r25, 0x7F	; 127
    26be:	a4 e0       	ldi	r26, 0x04	; 4
    26c0:	81 50       	subi	r24, 0x01	; 1
    26c2:	90 40       	sbci	r25, 0x00	; 0
    26c4:	a0 40       	sbci	r26, 0x00	; 0
    26c6:	e1 f7       	brne	.-8      	; 0x26c0 <__stack+0x4c1>
    26c8:	00 c0       	rjmp	.+0      	; 0x26ca <__stack+0x4cb>
    26ca:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    26d2:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 12 && path[i - 1] == -1)
    26d6:	8c 30       	cpi	r24, 0x0C	; 12
    26d8:	91 05       	cpc	r25, r1
    26da:	d1 f4       	brne	.+52     	; 0x2710 <__stack+0x511>
    26dc:	d7 01       	movw	r26, r14
    26de:	2d 91       	ld	r18, X+
    26e0:	3c 91       	ld	r19, X
    26e2:	11 97       	sbiw	r26, 0x01	; 1
    26e4:	bf ef       	ldi	r27, 0xFF	; 255
    26e6:	2f 3f       	cpi	r18, 0xFF	; 255
    26e8:	3b 07       	cpc	r19, r27
    26ea:	91 f4       	brne	.+36     	; 0x2710 <__stack+0x511>
			{
				sharp_right_turn_wls();
    26ec:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    26f0:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    26f4:	8f ef       	ldi	r24, 0xFF	; 255
    26f6:	9f e7       	ldi	r25, 0x7F	; 127
    26f8:	a4 e0       	ldi	r26, 0x04	; 4
    26fa:	81 50       	subi	r24, 0x01	; 1
    26fc:	90 40       	sbci	r25, 0x00	; 0
    26fe:	a0 40       	sbci	r26, 0x00	; 0
    2700:	e1 f7       	brne	.-8      	; 0x26fa <__stack+0x4fb>
    2702:	00 c0       	rjmp	.+0      	; 0x2704 <__stack+0x505>
    2704:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    270c:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 3 && path[i - 1] == 12)
    2710:	83 30       	cpi	r24, 0x03	; 3
    2712:	91 05       	cpc	r25, r1
    2714:	11 f0       	breq	.+4      	; 0x271a <__stack+0x51b>
    2716:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
    271a:	d7 01       	movw	r26, r14
    271c:	8d 91       	ld	r24, X+
    271e:	9c 91       	ld	r25, X
    2720:	11 97       	sbiw	r26, 0x01	; 1
    2722:	8c 30       	cpi	r24, 0x0C	; 12
    2724:	91 05       	cpc	r25, r1
    2726:	11 f0       	breq	.+4      	; 0x272c <__stack+0x52d>
    2728:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			{
				forward_wls(1);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2732:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 12)
    2736:	8c 30       	cpi	r24, 0x0C	; 12
    2738:	91 05       	cpc	r25, r1
    273a:	09 f0       	breq	.+2      	; 0x273e <__stack+0x53f>
    273c:	e5 c0       	rjmp	.+458    	; 0x2908 <__stack+0x709>
		{
			if (path[i + 1] == 13 && path[i - 1] == 11)
    273e:	f7 01       	movw	r30, r14
    2740:	84 81       	ldd	r24, Z+4	; 0x04
    2742:	95 81       	ldd	r25, Z+5	; 0x05
    2744:	8d 30       	cpi	r24, 0x0D	; 13
    2746:	91 05       	cpc	r25, r1
    2748:	51 f4       	brne	.+20     	; 0x275e <__stack+0x55f>
    274a:	20 81       	ld	r18, Z
    274c:	31 81       	ldd	r19, Z+1	; 0x01
    274e:	2b 30       	cpi	r18, 0x0B	; 11
    2750:	31 05       	cpc	r19, r1
    2752:	29 f4       	brne	.+10     	; 0x275e <__stack+0x55f>
				forward_wls(1);
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    275a:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			else if (path[i + 1] == 9 && path[i - 1] == 11)
    275e:	89 30       	cpi	r24, 0x09	; 9
    2760:	91 05       	cpc	r25, r1
    2762:	c9 f4       	brne	.+50     	; 0x2796 <__stack+0x597>
    2764:	d7 01       	movw	r26, r14
    2766:	2d 91       	ld	r18, X+
    2768:	3c 91       	ld	r19, X
    276a:	11 97       	sbiw	r26, 0x01	; 1
    276c:	2b 30       	cpi	r18, 0x0B	; 11
    276e:	31 05       	cpc	r19, r1
    2770:	91 f4       	brne	.+36     	; 0x2796 <__stack+0x597>
			{
				sharp_right_turn_wls();
    2772:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2776:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    277a:	8f ef       	ldi	r24, 0xFF	; 255
    277c:	9f e7       	ldi	r25, 0x7F	; 127
    277e:	a4 e0       	ldi	r26, 0x04	; 4
    2780:	81 50       	subi	r24, 0x01	; 1
    2782:	90 40       	sbci	r25, 0x00	; 0
    2784:	a0 40       	sbci	r26, 0x00	; 0
    2786:	e1 f7       	brne	.-8      	; 0x2780 <__stack+0x581>
    2788:	00 c0       	rjmp	.+0      	; 0x278a <__stack+0x58b>
    278a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2792:	0c 94 d3 1b 	jmp	0x37a6	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 13 && path[i - 1] == 9)
    2796:	8d 30       	cpi	r24, 0x0D	; 13
    2798:	91 05       	cpc	r25, r1
    279a:	c1 f4       	brne	.+48     	; 0x27cc <__stack+0x5cd>
    279c:	d7 01       	movw	r26, r14
    279e:	2d 91       	ld	r18, X+
    27a0:	3c 91       	ld	r19, X
    27a2:	11 97       	sbiw	r26, 0x01	; 1
    27a4:	29 30       	cpi	r18, 0x09	; 9
    27a6:	31 05       	cpc	r19, r1
    27a8:	89 f4       	brne	.+34     	; 0x27cc <__stack+0x5cd>
			{
				sharp_right_turn_wls();
    27aa:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    27ae:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	9f e7       	ldi	r25, 0x7F	; 127
    27b6:	a4 e0       	ldi	r26, 0x04	; 4
    27b8:	81 50       	subi	r24, 0x01	; 1
    27ba:	90 40       	sbci	r25, 0x00	; 0
    27bc:	a0 40       	sbci	r26, 0x00	; 0
    27be:	e1 f7       	brne	.-8      	; 0x27b8 <__stack+0x5b9>
    27c0:	00 c0       	rjmp	.+0      	; 0x27c2 <__stack+0x5c3>
    27c2:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    27ca:	ed c7       	rjmp	.+4058   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 11 && path[i - 1] == 9)
    27cc:	8b 30       	cpi	r24, 0x0B	; 11
    27ce:	91 05       	cpc	r25, r1
    27d0:	19 f5       	brne	.+70     	; 0x2818 <__stack+0x619>
    27d2:	d7 01       	movw	r26, r14
    27d4:	2d 91       	ld	r18, X+
    27d6:	3c 91       	ld	r19, X
    27d8:	11 97       	sbiw	r26, 0x01	; 1
    27da:	29 30       	cpi	r18, 0x09	; 9
    27dc:	31 05       	cpc	r19, r1
    27de:	89 f4       	brne	.+34     	; 0x2802 <__stack+0x603>
			{
				sharp_left_turn_wls();
    27e0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    27e4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	9f e7       	ldi	r25, 0x7F	; 127
    27ec:	a4 e0       	ldi	r26, 0x04	; 4
    27ee:	81 50       	subi	r24, 0x01	; 1
    27f0:	90 40       	sbci	r25, 0x00	; 0
    27f2:	a0 40       	sbci	r26, 0x00	; 0
    27f4:	e1 f7       	brne	.-8      	; 0x27ee <__stack+0x5ef>
    27f6:	00 c0       	rjmp	.+0      	; 0x27f8 <__stack+0x5f9>
    27f8:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2800:	d2 c7       	rjmp	.+4004   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 11 && path[i - 1] == 13)
    2802:	d7 01       	movw	r26, r14
    2804:	2d 91       	ld	r18, X+
    2806:	3c 91       	ld	r19, X
    2808:	11 97       	sbiw	r26, 0x01	; 1
    280a:	2d 30       	cpi	r18, 0x0D	; 13
    280c:	31 05       	cpc	r19, r1
    280e:	21 f4       	brne	.+8      	; 0x2818 <__stack+0x619>
			{
				forward_wls(1);
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2816:	c7 c7       	rjmp	.+3982   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 9 && path[i - 1] == 13)
    2818:	89 30       	cpi	r24, 0x09	; 9
    281a:	91 05       	cpc	r25, r1
    281c:	d9 f5       	brne	.+118    	; 0x2894 <__stack+0x695>
    281e:	f7 01       	movw	r30, r14
    2820:	20 81       	ld	r18, Z
    2822:	31 81       	ldd	r19, Z+1	; 0x01
    2824:	2d 30       	cpi	r18, 0x0D	; 13
    2826:	31 05       	cpc	r19, r1
    2828:	89 f4       	brne	.+34     	; 0x284c <__stack+0x64d>
			{
				sharp_left_turn_wls();
    282a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    282e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2832:	8f ef       	ldi	r24, 0xFF	; 255
    2834:	9f e7       	ldi	r25, 0x7F	; 127
    2836:	a4 e0       	ldi	r26, 0x04	; 4
    2838:	81 50       	subi	r24, 0x01	; 1
    283a:	90 40       	sbci	r25, 0x00	; 0
    283c:	a0 40       	sbci	r26, 0x00	; 0
    283e:	e1 f7       	brne	.-8      	; 0x2838 <__stack+0x639>
    2840:	00 c0       	rjmp	.+0      	; 0x2842 <__stack+0x643>
    2842:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    284a:	ad c7       	rjmp	.+3930   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 9 && path[i - 1] == -1)
    284c:	20 81       	ld	r18, Z
    284e:	31 81       	ldd	r19, Z+1	; 0x01
    2850:	bf ef       	ldi	r27, 0xFF	; 255
    2852:	2f 3f       	cpi	r18, 0xFF	; 255
    2854:	3b 07       	cpc	r19, r27
    2856:	f1 f4       	brne	.+60     	; 0x2894 <__stack+0x695>
			{
				sharp_left_turn_wls();
    2858:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    285c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2860:	8f ef       	ldi	r24, 0xFF	; 255
    2862:	9f e7       	ldi	r25, 0x7F	; 127
    2864:	a4 e0       	ldi	r26, 0x04	; 4
    2866:	81 50       	subi	r24, 0x01	; 1
    2868:	90 40       	sbci	r25, 0x00	; 0
    286a:	a0 40       	sbci	r26, 0x00	; 0
    286c:	e1 f7       	brne	.-8      	; 0x2866 <__stack+0x667>
    286e:	00 c0       	rjmp	.+0      	; 0x2870 <__stack+0x671>
    2870:	00 00       	nop
				_delay_ms(100);
				sharp_left_turn_wls();
    2872:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2876:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	9f e7       	ldi	r25, 0x7F	; 127
    287e:	a4 e0       	ldi	r26, 0x04	; 4
    2880:	81 50       	subi	r24, 0x01	; 1
    2882:	90 40       	sbci	r25, 0x00	; 0
    2884:	a0 40       	sbci	r26, 0x00	; 0
    2886:	e1 f7       	brne	.-8      	; 0x2880 <__stack+0x681>
    2888:	00 c0       	rjmp	.+0      	; 0x288a <__stack+0x68b>
    288a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2892:	89 c7       	rjmp	.+3858   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 11 && path[i - 1] == -1)
    2894:	8b 30       	cpi	r24, 0x0B	; 11
    2896:	91 05       	cpc	r25, r1
    2898:	c9 f4       	brne	.+50     	; 0x28cc <__stack+0x6cd>
    289a:	d7 01       	movw	r26, r14
    289c:	2d 91       	ld	r18, X+
    289e:	3c 91       	ld	r19, X
    28a0:	11 97       	sbiw	r26, 0x01	; 1
    28a2:	bf ef       	ldi	r27, 0xFF	; 255
    28a4:	2f 3f       	cpi	r18, 0xFF	; 255
    28a6:	3b 07       	cpc	r19, r27
    28a8:	89 f4       	brne	.+34     	; 0x28cc <__stack+0x6cd>
			{
				sharp_left_turn_wls();
    28aa:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    28ae:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    28b2:	8f ef       	ldi	r24, 0xFF	; 255
    28b4:	9f e7       	ldi	r25, 0x7F	; 127
    28b6:	a4 e0       	ldi	r26, 0x04	; 4
    28b8:	81 50       	subi	r24, 0x01	; 1
    28ba:	90 40       	sbci	r25, 0x00	; 0
    28bc:	a0 40       	sbci	r26, 0x00	; 0
    28be:	e1 f7       	brne	.-8      	; 0x28b8 <__stack+0x6b9>
    28c0:	00 c0       	rjmp	.+0      	; 0x28c2 <__stack+0x6c3>
    28c2:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    28c4:	81 e0       	ldi	r24, 0x01	; 1
    28c6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    28ca:	6d c7       	rjmp	.+3802   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 13 && path[i - 1] == -1)
    28cc:	8d 30       	cpi	r24, 0x0D	; 13
    28ce:	91 05       	cpc	r25, r1
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <__stack+0x6d5>
    28d2:	69 c7       	rjmp	.+3794   	; 0x37a6 <__stack+0x15a7>
    28d4:	d7 01       	movw	r26, r14
    28d6:	8d 91       	ld	r24, X+
    28d8:	9c 91       	ld	r25, X
    28da:	11 97       	sbiw	r26, 0x01	; 1
    28dc:	bf ef       	ldi	r27, 0xFF	; 255
    28de:	8f 3f       	cpi	r24, 0xFF	; 255
    28e0:	9b 07       	cpc	r25, r27
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <__stack+0x6e7>
    28e4:	60 c7       	rjmp	.+3776   	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    28e6:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    28ea:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    28ee:	8f ef       	ldi	r24, 0xFF	; 255
    28f0:	9f e7       	ldi	r25, 0x7F	; 127
    28f2:	a4 e0       	ldi	r26, 0x04	; 4
    28f4:	81 50       	subi	r24, 0x01	; 1
    28f6:	90 40       	sbci	r25, 0x00	; 0
    28f8:	a0 40       	sbci	r26, 0x00	; 0
    28fa:	e1 f7       	brne	.-8      	; 0x28f4 <__stack+0x6f5>
    28fc:	00 c0       	rjmp	.+0      	; 0x28fe <__stack+0x6ff>
    28fe:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2906:	4f c7       	rjmp	.+3742   	; 0x37a6 <__stack+0x15a7>
			}
			

		}

		else if (current_node == 13)
    2908:	8d 30       	cpi	r24, 0x0D	; 13
    290a:	91 05       	cpc	r25, r1
    290c:	09 f0       	breq	.+2      	; 0x2910 <__stack+0x711>
    290e:	71 c0       	rjmp	.+226    	; 0x29f2 <__stack+0x7f3>
		{
			if (path[i + 1] == 10 && path[i - 1] == -1)
    2910:	d7 01       	movw	r26, r14
    2912:	14 96       	adiw	r26, 0x04	; 4
    2914:	8d 91       	ld	r24, X+
    2916:	9c 91       	ld	r25, X
    2918:	15 97       	sbiw	r26, 0x05	; 5
    291a:	8a 30       	cpi	r24, 0x0A	; 10
    291c:	91 05       	cpc	r25, r1
    291e:	c1 f4       	brne	.+48     	; 0x2950 <__stack+0x751>
    2920:	2d 91       	ld	r18, X+
    2922:	3c 91       	ld	r19, X
    2924:	11 97       	sbiw	r26, 0x01	; 1
    2926:	bf ef       	ldi	r27, 0xFF	; 255
    2928:	2f 3f       	cpi	r18, 0xFF	; 255
    292a:	3b 07       	cpc	r19, r27
    292c:	89 f4       	brne	.+34     	; 0x2950 <__stack+0x751>
			{
				sharp_right_turn_wls();
    292e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2932:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2936:	8f ef       	ldi	r24, 0xFF	; 255
    2938:	9f e7       	ldi	r25, 0x7F	; 127
    293a:	a4 e0       	ldi	r26, 0x04	; 4
    293c:	81 50       	subi	r24, 0x01	; 1
    293e:	90 40       	sbci	r25, 0x00	; 0
    2940:	a0 40       	sbci	r26, 0x00	; 0
    2942:	e1 f7       	brne	.-8      	; 0x293c <__stack+0x73d>
    2944:	00 c0       	rjmp	.+0      	; 0x2946 <__stack+0x747>
    2946:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    294e:	2b c7       	rjmp	.+3670   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 12 && path[i - 1] == -1)
    2950:	8c 30       	cpi	r24, 0x0C	; 12
    2952:	91 05       	cpc	r25, r1
    2954:	89 f5       	brne	.+98     	; 0x29b8 <__stack+0x7b9>
    2956:	d7 01       	movw	r26, r14
    2958:	2d 91       	ld	r18, X+
    295a:	3c 91       	ld	r19, X
    295c:	11 97       	sbiw	r26, 0x01	; 1
    295e:	bf ef       	ldi	r27, 0xFF	; 255
    2960:	2f 3f       	cpi	r18, 0xFF	; 255
    2962:	3b 07       	cpc	r19, r27
    2964:	89 f4       	brne	.+34     	; 0x2988 <__stack+0x789>
			{
				sharp_left_turn_wls();
    2966:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    296a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    296e:	8f ef       	ldi	r24, 0xFF	; 255
    2970:	9f e7       	ldi	r25, 0x7F	; 127
    2972:	a4 e0       	ldi	r26, 0x04	; 4
    2974:	81 50       	subi	r24, 0x01	; 1
    2976:	90 40       	sbci	r25, 0x00	; 0
    2978:	a0 40       	sbci	r26, 0x00	; 0
    297a:	e1 f7       	brne	.-8      	; 0x2974 <__stack+0x775>
    297c:	00 c0       	rjmp	.+0      	; 0x297e <__stack+0x77f>
    297e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2986:	0f c7       	rjmp	.+3614   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 12 && path[i - 1] == 10)
    2988:	d7 01       	movw	r26, r14
    298a:	2d 91       	ld	r18, X+
    298c:	3c 91       	ld	r19, X
    298e:	11 97       	sbiw	r26, 0x01	; 1
    2990:	2a 30       	cpi	r18, 0x0A	; 10
    2992:	31 05       	cpc	r19, r1
    2994:	89 f4       	brne	.+34     	; 0x29b8 <__stack+0x7b9>
			{
				sharp_left_turn_wls();
    2996:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    299a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	9f e7       	ldi	r25, 0x7F	; 127
    29a2:	a4 e0       	ldi	r26, 0x04	; 4
    29a4:	81 50       	subi	r24, 0x01	; 1
    29a6:	90 40       	sbci	r25, 0x00	; 0
    29a8:	a0 40       	sbci	r26, 0x00	; 0
    29aa:	e1 f7       	brne	.-8      	; 0x29a4 <__stack+0x7a5>
    29ac:	00 c0       	rjmp	.+0      	; 0x29ae <__stack+0x7af>
    29ae:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    29b6:	f7 c6       	rjmp	.+3566   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 10 && path[i - 1] == 12)
    29b8:	8a 30       	cpi	r24, 0x0A	; 10
    29ba:	91 05       	cpc	r25, r1
    29bc:	09 f0       	breq	.+2      	; 0x29c0 <__stack+0x7c1>
    29be:	f3 c6       	rjmp	.+3558   	; 0x37a6 <__stack+0x15a7>
    29c0:	d7 01       	movw	r26, r14
    29c2:	8d 91       	ld	r24, X+
    29c4:	9c 91       	ld	r25, X
    29c6:	11 97       	sbiw	r26, 0x01	; 1
    29c8:	8c 30       	cpi	r24, 0x0C	; 12
    29ca:	91 05       	cpc	r25, r1
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <__stack+0x7d1>
    29ce:	eb c6       	rjmp	.+3542   	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    29d0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    29d4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    29d8:	8f ef       	ldi	r24, 0xFF	; 255
    29da:	9f e7       	ldi	r25, 0x7F	; 127
    29dc:	a4 e0       	ldi	r26, 0x04	; 4
    29de:	81 50       	subi	r24, 0x01	; 1
    29e0:	90 40       	sbci	r25, 0x00	; 0
    29e2:	a0 40       	sbci	r26, 0x00	; 0
    29e4:	e1 f7       	brne	.-8      	; 0x29de <__stack+0x7df>
    29e6:	00 c0       	rjmp	.+0      	; 0x29e8 <__stack+0x7e9>
    29e8:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    29f0:	da c6       	rjmp	.+3508   	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 14)
    29f2:	8e 30       	cpi	r24, 0x0E	; 14
    29f4:	91 05       	cpc	r25, r1
    29f6:	09 f0       	breq	.+2      	; 0x29fa <__stack+0x7fb>
    29f8:	a5 c0       	rjmp	.+330    	; 0x2b44 <__stack+0x945>
		{
			if (path[i + 1] == 19 && path[i - 1] == 2)
    29fa:	d7 01       	movw	r26, r14
    29fc:	14 96       	adiw	r26, 0x04	; 4
    29fe:	8d 91       	ld	r24, X+
    2a00:	9c 91       	ld	r25, X
    2a02:	15 97       	sbiw	r26, 0x05	; 5
    2a04:	83 31       	cpi	r24, 0x13	; 19
    2a06:	91 05       	cpc	r25, r1
    2a08:	b9 f4       	brne	.+46     	; 0x2a38 <__stack+0x839>
    2a0a:	2d 91       	ld	r18, X+
    2a0c:	3c 91       	ld	r19, X
    2a0e:	11 97       	sbiw	r26, 0x01	; 1
    2a10:	22 30       	cpi	r18, 0x02	; 2
    2a12:	31 05       	cpc	r19, r1
    2a14:	89 f4       	brne	.+34     	; 0x2a38 <__stack+0x839>
			{
				sharp_right_turn_wls();
    2a16:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2a1a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2a1e:	8f ef       	ldi	r24, 0xFF	; 255
    2a20:	9f e7       	ldi	r25, 0x7F	; 127
    2a22:	a4 e0       	ldi	r26, 0x04	; 4
    2a24:	81 50       	subi	r24, 0x01	; 1
    2a26:	90 40       	sbci	r25, 0x00	; 0
    2a28:	a0 40       	sbci	r26, 0x00	; 0
    2a2a:	e1 f7       	brne	.-8      	; 0x2a24 <__stack+0x825>
    2a2c:	00 c0       	rjmp	.+0      	; 0x2a2e <__stack+0x82f>
    2a2e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2a36:	b7 c6       	rjmp	.+3438   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 15 && path[i - 1] == 2)
    2a38:	8f 30       	cpi	r24, 0x0F	; 15
    2a3a:	91 05       	cpc	r25, r1
    2a3c:	c1 f4       	brne	.+48     	; 0x2a6e <__stack+0x86f>
    2a3e:	d7 01       	movw	r26, r14
    2a40:	2d 91       	ld	r18, X+
    2a42:	3c 91       	ld	r19, X
    2a44:	11 97       	sbiw	r26, 0x01	; 1
    2a46:	22 30       	cpi	r18, 0x02	; 2
    2a48:	31 05       	cpc	r19, r1
    2a4a:	89 f4       	brne	.+34     	; 0x2a6e <__stack+0x86f>
			{
				left_turn_wls();
    2a4c:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    2a50:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2a54:	8f ef       	ldi	r24, 0xFF	; 255
    2a56:	9f e7       	ldi	r25, 0x7F	; 127
    2a58:	a4 e0       	ldi	r26, 0x04	; 4
    2a5a:	81 50       	subi	r24, 0x01	; 1
    2a5c:	90 40       	sbci	r25, 0x00	; 0
    2a5e:	a0 40       	sbci	r26, 0x00	; 0
    2a60:	e1 f7       	brne	.-8      	; 0x2a5a <__stack+0x85b>
    2a62:	00 c0       	rjmp	.+0      	; 0x2a64 <__stack+0x865>
    2a64:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2a66:	81 e0       	ldi	r24, 0x01	; 1
    2a68:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2a6c:	9c c6       	rjmp	.+3384   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 19 && path[i - 1] == 15)
    2a6e:	83 31       	cpi	r24, 0x13	; 19
    2a70:	91 05       	cpc	r25, r1
    2a72:	c1 f4       	brne	.+48     	; 0x2aa4 <__stack+0x8a5>
    2a74:	d7 01       	movw	r26, r14
    2a76:	2d 91       	ld	r18, X+
    2a78:	3c 91       	ld	r19, X
    2a7a:	11 97       	sbiw	r26, 0x01	; 1
    2a7c:	2f 30       	cpi	r18, 0x0F	; 15
    2a7e:	31 05       	cpc	r19, r1
    2a80:	89 f4       	brne	.+34     	; 0x2aa4 <__stack+0x8a5>
			{
				sharp_left_turn_wls();
    2a82:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2a86:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	9f e7       	ldi	r25, 0x7F	; 127
    2a8e:	a4 e0       	ldi	r26, 0x04	; 4
    2a90:	81 50       	subi	r24, 0x01	; 1
    2a92:	90 40       	sbci	r25, 0x00	; 0
    2a94:	a0 40       	sbci	r26, 0x00	; 0
    2a96:	e1 f7       	brne	.-8      	; 0x2a90 <__stack+0x891>
    2a98:	00 c0       	rjmp	.+0      	; 0x2a9a <__stack+0x89b>
    2a9a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2aa2:	81 c6       	rjmp	.+3330   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 2 && path[i - 1] == 15)
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	81 f5       	brne	.+96     	; 0x2b0a <__stack+0x90b>
    2aaa:	d7 01       	movw	r26, r14
    2aac:	2d 91       	ld	r18, X+
    2aae:	3c 91       	ld	r19, X
    2ab0:	11 97       	sbiw	r26, 0x01	; 1
    2ab2:	2f 30       	cpi	r18, 0x0F	; 15
    2ab4:	31 05       	cpc	r19, r1
    2ab6:	89 f4       	brne	.+34     	; 0x2ada <__stack+0x8db>
			{
				right_turn_wls();
    2ab8:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    2abc:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	9f e7       	ldi	r25, 0x7F	; 127
    2ac4:	a4 e0       	ldi	r26, 0x04	; 4
    2ac6:	81 50       	subi	r24, 0x01	; 1
    2ac8:	90 40       	sbci	r25, 0x00	; 0
    2aca:	a0 40       	sbci	r26, 0x00	; 0
    2acc:	e1 f7       	brne	.-8      	; 0x2ac6 <__stack+0x8c7>
    2ace:	00 c0       	rjmp	.+0      	; 0x2ad0 <__stack+0x8d1>
    2ad0:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2ad2:	81 e0       	ldi	r24, 0x01	; 1
    2ad4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2ad8:	66 c6       	rjmp	.+3276   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 2 && path[i - 1] == 19)
    2ada:	d7 01       	movw	r26, r14
    2adc:	2d 91       	ld	r18, X+
    2ade:	3c 91       	ld	r19, X
    2ae0:	11 97       	sbiw	r26, 0x01	; 1
    2ae2:	23 31       	cpi	r18, 0x13	; 19
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	89 f4       	brne	.+34     	; 0x2b0a <__stack+0x90b>
			{
				sharp_left_turn_wls();
    2ae8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2aec:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2af0:	8f ef       	ldi	r24, 0xFF	; 255
    2af2:	9f e7       	ldi	r25, 0x7F	; 127
    2af4:	a4 e0       	ldi	r26, 0x04	; 4
    2af6:	81 50       	subi	r24, 0x01	; 1
    2af8:	90 40       	sbci	r25, 0x00	; 0
    2afa:	a0 40       	sbci	r26, 0x00	; 0
    2afc:	e1 f7       	brne	.-8      	; 0x2af6 <__stack+0x8f7>
    2afe:	00 c0       	rjmp	.+0      	; 0x2b00 <__stack+0x901>
    2b00:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2b08:	4e c6       	rjmp	.+3228   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 15 && path[i - 1] == 19)
    2b0a:	8f 30       	cpi	r24, 0x0F	; 15
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	09 f0       	breq	.+2      	; 0x2b12 <__stack+0x913>
    2b10:	4a c6       	rjmp	.+3220   	; 0x37a6 <__stack+0x15a7>
    2b12:	d7 01       	movw	r26, r14
    2b14:	8d 91       	ld	r24, X+
    2b16:	9c 91       	ld	r25, X
    2b18:	11 97       	sbiw	r26, 0x01	; 1
    2b1a:	83 31       	cpi	r24, 0x13	; 19
    2b1c:	91 05       	cpc	r25, r1
    2b1e:	09 f0       	breq	.+2      	; 0x2b22 <__stack+0x923>
    2b20:	42 c6       	rjmp	.+3204   	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    2b22:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2b26:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2b2a:	8f ef       	ldi	r24, 0xFF	; 255
    2b2c:	9f e7       	ldi	r25, 0x7F	; 127
    2b2e:	a4 e0       	ldi	r26, 0x04	; 4
    2b30:	81 50       	subi	r24, 0x01	; 1
    2b32:	90 40       	sbci	r25, 0x00	; 0
    2b34:	a0 40       	sbci	r26, 0x00	; 0
    2b36:	e1 f7       	brne	.-8      	; 0x2b30 <__stack+0x931>
    2b38:	00 c0       	rjmp	.+0      	; 0x2b3a <__stack+0x93b>
    2b3a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2b3c:	81 e0       	ldi	r24, 0x01	; 1
    2b3e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2b42:	31 c6       	rjmp	.+3170   	; 0x37a6 <__stack+0x15a7>
			}

		}

		else if (current_node == 15)
    2b44:	8f 30       	cpi	r24, 0x0F	; 15
    2b46:	91 05       	cpc	r25, r1
    2b48:	09 f0       	breq	.+2      	; 0x2b4c <__stack+0x94d>
    2b4a:	c0 c0       	rjmp	.+384    	; 0x2ccc <__stack+0xacd>
		{
			if (path[i + 1] == 16 && path[i - 1] == 14)
    2b4c:	d7 01       	movw	r26, r14
    2b4e:	14 96       	adiw	r26, 0x04	; 4
    2b50:	8d 91       	ld	r24, X+
    2b52:	9c 91       	ld	r25, X
    2b54:	15 97       	sbiw	r26, 0x05	; 5
    2b56:	80 31       	cpi	r24, 0x10	; 16
    2b58:	91 05       	cpc	r25, r1
    2b5a:	b9 f4       	brne	.+46     	; 0x2b8a <__stack+0x98b>
    2b5c:	2d 91       	ld	r18, X+
    2b5e:	3c 91       	ld	r19, X
    2b60:	11 97       	sbiw	r26, 0x01	; 1
    2b62:	2e 30       	cpi	r18, 0x0E	; 14
    2b64:	31 05       	cpc	r19, r1
    2b66:	89 f4       	brne	.+34     	; 0x2b8a <__stack+0x98b>
			{
				sharp_right_turn_wls();
    2b68:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2b6c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2b70:	8f ef       	ldi	r24, 0xFF	; 255
    2b72:	9f e7       	ldi	r25, 0x7F	; 127
    2b74:	a4 e0       	ldi	r26, 0x04	; 4
    2b76:	81 50       	subi	r24, 0x01	; 1
    2b78:	90 40       	sbci	r25, 0x00	; 0
    2b7a:	a0 40       	sbci	r26, 0x00	; 0
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <__stack+0x977>
    2b7e:	00 c0       	rjmp	.+0      	; 0x2b80 <__stack+0x981>
    2b80:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2b88:	0e c6       	rjmp	.+3100   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 1 && path[i - 1] == 14)
    2b8a:	81 30       	cpi	r24, 0x01	; 1
    2b8c:	91 05       	cpc	r25, r1
    2b8e:	c1 f4       	brne	.+48     	; 0x2bc0 <__stack+0x9c1>
    2b90:	d7 01       	movw	r26, r14
    2b92:	2d 91       	ld	r18, X+
    2b94:	3c 91       	ld	r19, X
    2b96:	11 97       	sbiw	r26, 0x01	; 1
    2b98:	2e 30       	cpi	r18, 0x0E	; 14
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	89 f4       	brne	.+34     	; 0x2bc0 <__stack+0x9c1>
			{
				left_turn_wls();
    2b9e:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    2ba2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2ba6:	8f ef       	ldi	r24, 0xFF	; 255
    2ba8:	9f e7       	ldi	r25, 0x7F	; 127
    2baa:	a4 e0       	ldi	r26, 0x04	; 4
    2bac:	81 50       	subi	r24, 0x01	; 1
    2bae:	90 40       	sbci	r25, 0x00	; 0
    2bb0:	a0 40       	sbci	r26, 0x00	; 0
    2bb2:	e1 f7       	brne	.-8      	; 0x2bac <__stack+0x9ad>
    2bb4:	00 c0       	rjmp	.+0      	; 0x2bb6 <__stack+0x9b7>
    2bb6:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2bbe:	f3 c5       	rjmp	.+3046   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 16 && path[i - 1] == 1)
    2bc0:	80 31       	cpi	r24, 0x10	; 16
    2bc2:	91 05       	cpc	r25, r1
    2bc4:	c1 f4       	brne	.+48     	; 0x2bf6 <__stack+0x9f7>
    2bc6:	d7 01       	movw	r26, r14
    2bc8:	2d 91       	ld	r18, X+
    2bca:	3c 91       	ld	r19, X
    2bcc:	11 97       	sbiw	r26, 0x01	; 1
    2bce:	21 30       	cpi	r18, 0x01	; 1
    2bd0:	31 05       	cpc	r19, r1
    2bd2:	89 f4       	brne	.+34     	; 0x2bf6 <__stack+0x9f7>
			{
				sharp_left_turn_wls();
    2bd4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2bd8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2bdc:	8f ef       	ldi	r24, 0xFF	; 255
    2bde:	9f e7       	ldi	r25, 0x7F	; 127
    2be0:	a4 e0       	ldi	r26, 0x04	; 4
    2be2:	81 50       	subi	r24, 0x01	; 1
    2be4:	90 40       	sbci	r25, 0x00	; 0
    2be6:	a0 40       	sbci	r26, 0x00	; 0
    2be8:	e1 f7       	brne	.-8      	; 0x2be2 <__stack+0x9e3>
    2bea:	00 c0       	rjmp	.+0      	; 0x2bec <__stack+0x9ed>
    2bec:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2bf4:	d8 c5       	rjmp	.+2992   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 14 && path[i - 1] == 1)
    2bf6:	8e 30       	cpi	r24, 0x0E	; 14
    2bf8:	91 05       	cpc	r25, r1
    2bfa:	81 f5       	brne	.+96     	; 0x2c5c <__stack+0xa5d>
    2bfc:	d7 01       	movw	r26, r14
    2bfe:	2d 91       	ld	r18, X+
    2c00:	3c 91       	ld	r19, X
    2c02:	11 97       	sbiw	r26, 0x01	; 1
    2c04:	21 30       	cpi	r18, 0x01	; 1
    2c06:	31 05       	cpc	r19, r1
    2c08:	89 f4       	brne	.+34     	; 0x2c2c <__stack+0xa2d>
			{
				right_turn_wls();
    2c0a:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    2c0e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2c12:	8f ef       	ldi	r24, 0xFF	; 255
    2c14:	9f e7       	ldi	r25, 0x7F	; 127
    2c16:	a4 e0       	ldi	r26, 0x04	; 4
    2c18:	81 50       	subi	r24, 0x01	; 1
    2c1a:	90 40       	sbci	r25, 0x00	; 0
    2c1c:	a0 40       	sbci	r26, 0x00	; 0
    2c1e:	e1 f7       	brne	.-8      	; 0x2c18 <__stack+0xa19>
    2c20:	00 c0       	rjmp	.+0      	; 0x2c22 <__stack+0xa23>
    2c22:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2c2a:	bd c5       	rjmp	.+2938   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 14 && path[i - 1] == 16)
    2c2c:	d7 01       	movw	r26, r14
    2c2e:	2d 91       	ld	r18, X+
    2c30:	3c 91       	ld	r19, X
    2c32:	11 97       	sbiw	r26, 0x01	; 1
    2c34:	20 31       	cpi	r18, 0x10	; 16
    2c36:	31 05       	cpc	r19, r1
    2c38:	89 f4       	brne	.+34     	; 0x2c5c <__stack+0xa5d>
			{
				sharp_left_turn_wls();
    2c3a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2c3e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2c42:	8f ef       	ldi	r24, 0xFF	; 255
    2c44:	9f e7       	ldi	r25, 0x7F	; 127
    2c46:	a4 e0       	ldi	r26, 0x04	; 4
    2c48:	81 50       	subi	r24, 0x01	; 1
    2c4a:	90 40       	sbci	r25, 0x00	; 0
    2c4c:	a0 40       	sbci	r26, 0x00	; 0
    2c4e:	e1 f7       	brne	.-8      	; 0x2c48 <__stack+0xa49>
    2c50:	00 c0       	rjmp	.+0      	; 0x2c52 <__stack+0xa53>
    2c52:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2c5a:	a5 c5       	rjmp	.+2890   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 5 && path[i - 1] == 1)
    2c5c:	85 30       	cpi	r24, 0x05	; 5
    2c5e:	91 05       	cpc	r25, r1
    2c60:	c1 f4       	brne	.+48     	; 0x2c92 <__stack+0xa93>
    2c62:	d7 01       	movw	r26, r14
    2c64:	2d 91       	ld	r18, X+
    2c66:	3c 91       	ld	r19, X
    2c68:	11 97       	sbiw	r26, 0x01	; 1
    2c6a:	21 30       	cpi	r18, 0x01	; 1
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	89 f4       	brne	.+34     	; 0x2c92 <__stack+0xa93>
			{
				sharp_right_turn_wls();
    2c70:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2c74:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2c78:	8f ef       	ldi	r24, 0xFF	; 255
    2c7a:	9f e7       	ldi	r25, 0x7F	; 127
    2c7c:	a4 e0       	ldi	r26, 0x04	; 4
    2c7e:	81 50       	subi	r24, 0x01	; 1
    2c80:	90 40       	sbci	r25, 0x00	; 0
    2c82:	a0 40       	sbci	r26, 0x00	; 0
    2c84:	e1 f7       	brne	.-8      	; 0x2c7e <__stack+0xa7f>
    2c86:	00 c0       	rjmp	.+0      	; 0x2c88 <__stack+0xa89>
    2c88:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2c90:	8a c5       	rjmp	.+2836   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 1 && path[i - 1] == 16)
    2c92:	81 30       	cpi	r24, 0x01	; 1
    2c94:	91 05       	cpc	r25, r1
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <__stack+0xa9b>
    2c98:	86 c5       	rjmp	.+2828   	; 0x37a6 <__stack+0x15a7>
    2c9a:	d7 01       	movw	r26, r14
    2c9c:	8d 91       	ld	r24, X+
    2c9e:	9c 91       	ld	r25, X
    2ca0:	11 97       	sbiw	r26, 0x01	; 1
    2ca2:	80 31       	cpi	r24, 0x10	; 16
    2ca4:	91 05       	cpc	r25, r1
    2ca6:	09 f0       	breq	.+2      	; 0x2caa <__stack+0xaab>
    2ca8:	7e c5       	rjmp	.+2812   	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    2caa:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2cae:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2cb2:	8f ef       	ldi	r24, 0xFF	; 255
    2cb4:	9f e7       	ldi	r25, 0x7F	; 127
    2cb6:	a4 e0       	ldi	r26, 0x04	; 4
    2cb8:	81 50       	subi	r24, 0x01	; 1
    2cba:	90 40       	sbci	r25, 0x00	; 0
    2cbc:	a0 40       	sbci	r26, 0x00	; 0
    2cbe:	e1 f7       	brne	.-8      	; 0x2cb8 <__stack+0xab9>
    2cc0:	00 c0       	rjmp	.+0      	; 0x2cc2 <__stack+0xac3>
    2cc2:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2cca:	6d c5       	rjmp	.+2778   	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 16)
    2ccc:	80 31       	cpi	r24, 0x10	; 16
    2cce:	91 05       	cpc	r25, r1
    2cd0:	09 f0       	breq	.+2      	; 0x2cd4 <__stack+0xad5>
    2cd2:	53 c0       	rjmp	.+166    	; 0x2d7a <__stack+0xb7b>
		{
			if (path[i + 1] == 15 && path[i - 1] == 17)
    2cd4:	d7 01       	movw	r26, r14
    2cd6:	14 96       	adiw	r26, 0x04	; 4
    2cd8:	8d 91       	ld	r24, X+
    2cda:	9c 91       	ld	r25, X
    2cdc:	15 97       	sbiw	r26, 0x05	; 5
    2cde:	8f 30       	cpi	r24, 0x0F	; 15
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	11 f5       	brne	.+68     	; 0x2d28 <__stack+0xb29>
    2ce4:	2d 91       	ld	r18, X+
    2ce6:	3c 91       	ld	r19, X
    2ce8:	11 97       	sbiw	r26, 0x01	; 1
    2cea:	21 31       	cpi	r18, 0x11	; 17
    2cec:	31 05       	cpc	r19, r1
    2cee:	21 f4       	brne	.+8      	; 0x2cf8 <__stack+0xaf9>
			{
				forward_wls(1);
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2cf6:	57 c5       	rjmp	.+2734   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 15 && path[i - 1] == -1)
    2cf8:	f7 01       	movw	r30, r14
    2cfa:	20 81       	ld	r18, Z
    2cfc:	31 81       	ldd	r19, Z+1	; 0x01
    2cfe:	ff ef       	ldi	r31, 0xFF	; 255
    2d00:	2f 3f       	cpi	r18, 0xFF	; 255
    2d02:	3f 07       	cpc	r19, r31
    2d04:	89 f4       	brne	.+34     	; 0x2d28 <__stack+0xb29>
			{
				sharp_left_turn_wls();
    2d06:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2d0a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2d0e:	8f ef       	ldi	r24, 0xFF	; 255
    2d10:	9f e7       	ldi	r25, 0x7F	; 127
    2d12:	a4 e0       	ldi	r26, 0x04	; 4
    2d14:	81 50       	subi	r24, 0x01	; 1
    2d16:	90 40       	sbci	r25, 0x00	; 0
    2d18:	a0 40       	sbci	r26, 0x00	; 0
    2d1a:	e1 f7       	brne	.-8      	; 0x2d14 <__stack+0xb15>
    2d1c:	00 c0       	rjmp	.+0      	; 0x2d1e <__stack+0xb1f>
    2d1e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2d26:	3f c5       	rjmp	.+2686   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 17 && path[i - 1] == -1)
    2d28:	81 31       	cpi	r24, 0x11	; 17
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	09 f0       	breq	.+2      	; 0x2d30 <__stack+0xb31>
    2d2e:	3b c5       	rjmp	.+2678   	; 0x37a6 <__stack+0x15a7>
    2d30:	d7 01       	movw	r26, r14
    2d32:	8d 91       	ld	r24, X+
    2d34:	9c 91       	ld	r25, X
    2d36:	11 97       	sbiw	r26, 0x01	; 1
    2d38:	bf ef       	ldi	r27, 0xFF	; 255
    2d3a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3c:	9b 07       	cpc	r25, r27
    2d3e:	89 f4       	brne	.+34     	; 0x2d62 <__stack+0xb63>
			{
				sharp_right_turn_wls();
    2d40:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2d44:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2d48:	8f ef       	ldi	r24, 0xFF	; 255
    2d4a:	9f e7       	ldi	r25, 0x7F	; 127
    2d4c:	a4 e0       	ldi	r26, 0x04	; 4
    2d4e:	81 50       	subi	r24, 0x01	; 1
    2d50:	90 40       	sbci	r25, 0x00	; 0
    2d52:	a0 40       	sbci	r26, 0x00	; 0
    2d54:	e1 f7       	brne	.-8      	; 0x2d4e <__stack+0xb4f>
    2d56:	00 c0       	rjmp	.+0      	; 0x2d58 <__stack+0xb59>
    2d58:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2d60:	22 c5       	rjmp	.+2628   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 17 && path[i - 1] == 15)
    2d62:	d7 01       	movw	r26, r14
    2d64:	8d 91       	ld	r24, X+
    2d66:	9c 91       	ld	r25, X
    2d68:	11 97       	sbiw	r26, 0x01	; 1
    2d6a:	8f 30       	cpi	r24, 0x0F	; 15
    2d6c:	91 05       	cpc	r25, r1
    2d6e:	09 f0       	breq	.+2      	; 0x2d72 <__stack+0xb73>
    2d70:	1a c5       	rjmp	.+2612   	; 0x37a6 <__stack+0x15a7>
			{
				forward_wls(1);
    2d72:	81 e0       	ldi	r24, 0x01	; 1
    2d74:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2d78:	16 c5       	rjmp	.+2604   	; 0x37a6 <__stack+0x15a7>
			}

		}

		else if (current_node == 17)
    2d7a:	81 31       	cpi	r24, 0x11	; 17
    2d7c:	91 05       	cpc	r25, r1
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <__stack+0xb83>
    2d80:	b8 c0       	rjmp	.+368    	; 0x2ef2 <__stack+0xcf3>
		{
			if (path[i + 1] == 18 && path[i - 1] == 16)
    2d82:	f7 01       	movw	r30, r14
    2d84:	84 81       	ldd	r24, Z+4	; 0x04
    2d86:	95 81       	ldd	r25, Z+5	; 0x05
    2d88:	82 31       	cpi	r24, 0x12	; 18
    2d8a:	91 05       	cpc	r25, r1
    2d8c:	09 f5       	brne	.+66     	; 0x2dd0 <__stack+0xbd1>
    2d8e:	20 81       	ld	r18, Z
    2d90:	31 81       	ldd	r19, Z+1	; 0x01
    2d92:	20 31       	cpi	r18, 0x10	; 16
    2d94:	31 05       	cpc	r19, r1
    2d96:	e1 f4       	brne	.+56     	; 0x2dd0 <__stack+0xbd1>
			{
				sharp_left_turn_wls();
    2d98:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2d9c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2da0:	8f ef       	ldi	r24, 0xFF	; 255
    2da2:	9f e7       	ldi	r25, 0x7F	; 127
    2da4:	a4 e0       	ldi	r26, 0x04	; 4
    2da6:	81 50       	subi	r24, 0x01	; 1
    2da8:	90 40       	sbci	r25, 0x00	; 0
    2daa:	a0 40       	sbci	r26, 0x00	; 0
    2dac:	e1 f7       	brne	.-8      	; 0x2da6 <__stack+0xba7>
    2dae:	00 c0       	rjmp	.+0      	; 0x2db0 <__stack+0xbb1>
    2db0:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
				
				forward();
    2db8:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    2dbc:	86 e6       	ldi	r24, 0x66	; 102
    2dbe:	96 ea       	ldi	r25, 0xA6	; 166
    2dc0:	a0 e1       	ldi	r26, 0x10	; 16
    2dc2:	81 50       	subi	r24, 0x01	; 1
    2dc4:	90 40       	sbci	r25, 0x00	; 0
    2dc6:	a0 40       	sbci	r26, 0x00	; 0
    2dc8:	e1 f7       	brne	.-8      	; 0x2dc2 <__stack+0xbc3>
				_delay_ms(370);
				stop();
    2dca:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2dce:	eb c4       	rjmp	.+2518   	; 0x37a6 <__stack+0x15a7>
				
			}
			else if (path[i + 1] == 20 && path[i - 1] == 16)
    2dd0:	84 31       	cpi	r24, 0x14	; 20
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	c1 f4       	brne	.+48     	; 0x2e06 <__stack+0xc07>
    2dd6:	d7 01       	movw	r26, r14
    2dd8:	2d 91       	ld	r18, X+
    2dda:	3c 91       	ld	r19, X
    2ddc:	11 97       	sbiw	r26, 0x01	; 1
    2dde:	20 31       	cpi	r18, 0x10	; 16
    2de0:	31 05       	cpc	r19, r1
    2de2:	89 f4       	brne	.+34     	; 0x2e06 <__stack+0xc07>
			{
				sharp_right_turn_wls();
    2de4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2de8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2dec:	8f ef       	ldi	r24, 0xFF	; 255
    2dee:	9f e7       	ldi	r25, 0x7F	; 127
    2df0:	a4 e0       	ldi	r26, 0x04	; 4
    2df2:	81 50       	subi	r24, 0x01	; 1
    2df4:	90 40       	sbci	r25, 0x00	; 0
    2df6:	a0 40       	sbci	r26, 0x00	; 0
    2df8:	e1 f7       	brne	.-8      	; 0x2df2 <__stack+0xbf3>
    2dfa:	00 c0       	rjmp	.+0      	; 0x2dfc <__stack+0xbfd>
    2dfc:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2e04:	d0 c4       	rjmp	.+2464   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 18 && path[i - 1] == 20)
    2e06:	82 31       	cpi	r24, 0x12	; 18
    2e08:	91 05       	cpc	r25, r1
    2e0a:	81 f5       	brne	.+96     	; 0x2e6c <__stack+0xc6d>
    2e0c:	d7 01       	movw	r26, r14
    2e0e:	2d 91       	ld	r18, X+
    2e10:	3c 91       	ld	r19, X
    2e12:	11 97       	sbiw	r26, 0x01	; 1
    2e14:	24 31       	cpi	r18, 0x14	; 20
    2e16:	31 05       	cpc	r19, r1
    2e18:	49 f5       	brne	.+82     	; 0x2e6c <__stack+0xc6d>
			{
				forward();
    2e1a:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    2e1e:	8f ef       	ldi	r24, 0xFF	; 255
    2e20:	9f e7       	ldi	r25, 0x7F	; 127
    2e22:	a4 e0       	ldi	r26, 0x04	; 4
    2e24:	81 50       	subi	r24, 0x01	; 1
    2e26:	90 40       	sbci	r25, 0x00	; 0
    2e28:	a0 40       	sbci	r26, 0x00	; 0
    2e2a:	e1 f7       	brne	.-8      	; 0x2e24 <__stack+0xc25>
    2e2c:	00 c0       	rjmp	.+0      	; 0x2e2e <__stack+0xc2f>
    2e2e:	00 00       	nop
				_delay_ms(100);
				stop();
    2e30:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
				right_turn_wls();
    2e34:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    2e38:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2e3c:	8f ef       	ldi	r24, 0xFF	; 255
    2e3e:	9f e7       	ldi	r25, 0x7F	; 127
    2e40:	a4 e0       	ldi	r26, 0x04	; 4
    2e42:	81 50       	subi	r24, 0x01	; 1
    2e44:	90 40       	sbci	r25, 0x00	; 0
    2e46:	a0 40       	sbci	r26, 0x00	; 0
    2e48:	e1 f7       	brne	.-8      	; 0x2e42 <__stack+0xc43>
    2e4a:	00 c0       	rjmp	.+0      	; 0x2e4c <__stack+0xc4d>
    2e4c:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
				
				forward();
    2e54:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    2e58:	86 e6       	ldi	r24, 0x66	; 102
    2e5a:	96 ea       	ldi	r25, 0xA6	; 166
    2e5c:	a0 e1       	ldi	r26, 0x10	; 16
    2e5e:	81 50       	subi	r24, 0x01	; 1
    2e60:	90 40       	sbci	r25, 0x00	; 0
    2e62:	a0 40       	sbci	r26, 0x00	; 0
    2e64:	e1 f7       	brne	.-8      	; 0x2e5e <__stack+0xc5f>
				_delay_ms(370);
				stop();
    2e66:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2e6a:	9d c4       	rjmp	.+2362   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 16 && path[i - 1] == 20)
    2e6c:	80 31       	cpi	r24, 0x10	; 16
    2e6e:	91 05       	cpc	r25, r1
    2e70:	81 f5       	brne	.+96     	; 0x2ed2 <__stack+0xcd3>
    2e72:	d7 01       	movw	r26, r14
    2e74:	2d 91       	ld	r18, X+
    2e76:	3c 91       	ld	r19, X
    2e78:	11 97       	sbiw	r26, 0x01	; 1
    2e7a:	24 31       	cpi	r18, 0x14	; 20
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	89 f4       	brne	.+34     	; 0x2ea2 <__stack+0xca3>
			{
				sharp_left_turn_wls();
    2e80:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2e84:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2e88:	8f ef       	ldi	r24, 0xFF	; 255
    2e8a:	9f e7       	ldi	r25, 0x7F	; 127
    2e8c:	a4 e0       	ldi	r26, 0x04	; 4
    2e8e:	81 50       	subi	r24, 0x01	; 1
    2e90:	90 40       	sbci	r25, 0x00	; 0
    2e92:	a0 40       	sbci	r26, 0x00	; 0
    2e94:	e1 f7       	brne	.-8      	; 0x2e8e <__stack+0xc8f>
    2e96:	00 c0       	rjmp	.+0      	; 0x2e98 <__stack+0xc99>
    2e98:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2ea0:	82 c4       	rjmp	.+2308   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 16 && path[i - 1] == 18)
    2ea2:	d7 01       	movw	r26, r14
    2ea4:	2d 91       	ld	r18, X+
    2ea6:	3c 91       	ld	r19, X
    2ea8:	11 97       	sbiw	r26, 0x01	; 1
    2eaa:	22 31       	cpi	r18, 0x12	; 18
    2eac:	31 05       	cpc	r19, r1
    2eae:	89 f4       	brne	.+34     	; 0x2ed2 <__stack+0xcd3>
			{
				sharp_right_turn_wls();
    2eb0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    2eb4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2eb8:	8f ef       	ldi	r24, 0xFF	; 255
    2eba:	9f e7       	ldi	r25, 0x7F	; 127
    2ebc:	a4 e0       	ldi	r26, 0x04	; 4
    2ebe:	81 50       	subi	r24, 0x01	; 1
    2ec0:	90 40       	sbci	r25, 0x00	; 0
    2ec2:	a0 40       	sbci	r26, 0x00	; 0
    2ec4:	e1 f7       	brne	.-8      	; 0x2ebe <__stack+0xcbf>
    2ec6:	00 c0       	rjmp	.+0      	; 0x2ec8 <__stack+0xcc9>
    2ec8:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2ed0:	6a c4       	rjmp	.+2260   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 20 && path[i - 1] == 18)
    2ed2:	84 31       	cpi	r24, 0x14	; 20
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <__stack+0xcdb>
    2ed8:	66 c4       	rjmp	.+2252   	; 0x37a6 <__stack+0x15a7>
    2eda:	d7 01       	movw	r26, r14
    2edc:	8d 91       	ld	r24, X+
    2ede:	9c 91       	ld	r25, X
    2ee0:	11 97       	sbiw	r26, 0x01	; 1
    2ee2:	82 31       	cpi	r24, 0x12	; 18
    2ee4:	91 05       	cpc	r25, r1
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <__stack+0xceb>
    2ee8:	5e c4       	rjmp	.+2236   	; 0x37a6 <__stack+0x15a7>
			{
				forward_wls(1);
    2eea:	81 e0       	ldi	r24, 0x01	; 1
    2eec:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2ef0:	5a c4       	rjmp	.+2228   	; 0x37a6 <__stack+0x15a7>
			}

			}

		else if (current_node == 18)
    2ef2:	82 31       	cpi	r24, 0x12	; 18
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	b9 f5       	brne	.+110    	; 0x2f66 <__stack+0xd67>
		{
			if (path[i + 1] == 17 && path[i - 1] == -1)
    2ef8:	f7 01       	movw	r30, r14
    2efa:	84 81       	ldd	r24, Z+4	; 0x04
    2efc:	95 81       	ldd	r25, Z+5	; 0x05
    2efe:	81 31       	cpi	r24, 0x11	; 17
    2f00:	91 05       	cpc	r25, r1
    2f02:	b9 f4       	brne	.+46     	; 0x2f32 <__stack+0xd33>
    2f04:	80 81       	ld	r24, Z
    2f06:	91 81       	ldd	r25, Z+1	; 0x01
    2f08:	ff ef       	ldi	r31, 0xFF	; 255
    2f0a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f0c:	9f 07       	cpc	r25, r31
    2f0e:	89 f4       	brne	.+34     	; 0x2f32 <__stack+0xd33>
			{
				sharp_left_turn_wls();
    2f10:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2f14:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2f18:	8f ef       	ldi	r24, 0xFF	; 255
    2f1a:	9f e7       	ldi	r25, 0x7F	; 127
    2f1c:	a4 e0       	ldi	r26, 0x04	; 4
    2f1e:	81 50       	subi	r24, 0x01	; 1
    2f20:	90 40       	sbci	r25, 0x00	; 0
    2f22:	a0 40       	sbci	r26, 0x00	; 0
    2f24:	e1 f7       	brne	.-8      	; 0x2f1e <__stack+0xd1f>
    2f26:	00 c0       	rjmp	.+0      	; 0x2f28 <__stack+0xd29>
    2f28:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2f30:	3a c4       	rjmp	.+2164   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i - 1] == 17)
    2f32:	d7 01       	movw	r26, r14
    2f34:	8d 91       	ld	r24, X+
    2f36:	9c 91       	ld	r25, X
    2f38:	11 97       	sbiw	r26, 0x01	; 1
    2f3a:	81 31       	cpi	r24, 0x11	; 17
    2f3c:	91 05       	cpc	r25, r1
    2f3e:	09 f0       	breq	.+2      	; 0x2f42 <__stack+0xd43>
    2f40:	32 c4       	rjmp	.+2148   	; 0x37a6 <__stack+0x15a7>
			{
				forward();
    2f42:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
				velocity(87,90);
    2f46:	87 e5       	ldi	r24, 0x57	; 87
    2f48:	6a e5       	ldi	r22, 0x5A	; 90
    2f4a:	0e 94 32 05 	call	0xa64	; 0xa64 <velocity>
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	9f e7       	ldi	r25, 0x7F	; 127
    2f52:	ad e0       	ldi	r26, 0x0D	; 13
    2f54:	81 50       	subi	r24, 0x01	; 1
    2f56:	90 40       	sbci	r25, 0x00	; 0
    2f58:	a0 40       	sbci	r26, 0x00	; 0
    2f5a:	e1 f7       	brne	.-8      	; 0x2f54 <__stack+0xd55>
    2f5c:	00 c0       	rjmp	.+0      	; 0x2f5e <__stack+0xd5f>
    2f5e:	00 00       	nop
				_delay_ms(300);
				stop();
    2f60:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2f64:	20 c4       	rjmp	.+2112   	; 0x37a6 <__stack+0x15a7>
				
			}

		}

		else if (current_node == 19)
    2f66:	83 31       	cpi	r24, 0x13	; 19
    2f68:	91 05       	cpc	r25, r1
    2f6a:	09 f0       	breq	.+2      	; 0x2f6e <__stack+0xd6f>
    2f6c:	a8 c0       	rjmp	.+336    	; 0x30be <__stack+0xebf>
		{
			if (path[i + 1] == 22 && path[i - 1] == 14)
    2f6e:	d7 01       	movw	r26, r14
    2f70:	14 96       	adiw	r26, 0x04	; 4
    2f72:	8d 91       	ld	r24, X+
    2f74:	9c 91       	ld	r25, X
    2f76:	15 97       	sbiw	r26, 0x05	; 5
    2f78:	86 31       	cpi	r24, 0x16	; 22
    2f7a:	91 05       	cpc	r25, r1
    2f7c:	b9 f4       	brne	.+46     	; 0x2fac <__stack+0xdad>
    2f7e:	2d 91       	ld	r18, X+
    2f80:	3c 91       	ld	r19, X
    2f82:	11 97       	sbiw	r26, 0x01	; 1
    2f84:	2e 30       	cpi	r18, 0x0E	; 14
    2f86:	31 05       	cpc	r19, r1
    2f88:	89 f4       	brne	.+34     	; 0x2fac <__stack+0xdad>
			{
				right_turn_wls();
    2f8a:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    2f8e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2f92:	8f ef       	ldi	r24, 0xFF	; 255
    2f94:	9f e7       	ldi	r25, 0x7F	; 127
    2f96:	a4 e0       	ldi	r26, 0x04	; 4
    2f98:	81 50       	subi	r24, 0x01	; 1
    2f9a:	90 40       	sbci	r25, 0x00	; 0
    2f9c:	a0 40       	sbci	r26, 0x00	; 0
    2f9e:	e1 f7       	brne	.-8      	; 0x2f98 <__stack+0xd99>
    2fa0:	00 c0       	rjmp	.+0      	; 0x2fa2 <__stack+0xda3>
    2fa2:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2faa:	fd c3       	rjmp	.+2042   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 20 && path[i - 1] == 14)
    2fac:	84 31       	cpi	r24, 0x14	; 20
    2fae:	91 05       	cpc	r25, r1
    2fb0:	c1 f4       	brne	.+48     	; 0x2fe2 <__stack+0xde3>
    2fb2:	d7 01       	movw	r26, r14
    2fb4:	2d 91       	ld	r18, X+
    2fb6:	3c 91       	ld	r19, X
    2fb8:	11 97       	sbiw	r26, 0x01	; 1
    2fba:	2e 30       	cpi	r18, 0x0E	; 14
    2fbc:	31 05       	cpc	r19, r1
    2fbe:	89 f4       	brne	.+34     	; 0x2fe2 <__stack+0xde3>
			{
				sharp_left_turn_wls();
    2fc0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2fc4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2fc8:	8f ef       	ldi	r24, 0xFF	; 255
    2fca:	9f e7       	ldi	r25, 0x7F	; 127
    2fcc:	a4 e0       	ldi	r26, 0x04	; 4
    2fce:	81 50       	subi	r24, 0x01	; 1
    2fd0:	90 40       	sbci	r25, 0x00	; 0
    2fd2:	a0 40       	sbci	r26, 0x00	; 0
    2fd4:	e1 f7       	brne	.-8      	; 0x2fce <__stack+0xdcf>
    2fd6:	00 c0       	rjmp	.+0      	; 0x2fd8 <__stack+0xdd9>
    2fd8:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    2fe0:	e2 c3       	rjmp	.+1988   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 22 && path[i - 1] == 20)
    2fe2:	86 31       	cpi	r24, 0x16	; 22
    2fe4:	91 05       	cpc	r25, r1
    2fe6:	c1 f4       	brne	.+48     	; 0x3018 <__stack+0xe19>
    2fe8:	d7 01       	movw	r26, r14
    2fea:	2d 91       	ld	r18, X+
    2fec:	3c 91       	ld	r19, X
    2fee:	11 97       	sbiw	r26, 0x01	; 1
    2ff0:	24 31       	cpi	r18, 0x14	; 20
    2ff2:	31 05       	cpc	r19, r1
    2ff4:	89 f4       	brne	.+34     	; 0x3018 <__stack+0xe19>
			{
				sharp_left_turn_wls();
    2ff6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    2ffa:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    2ffe:	8f ef       	ldi	r24, 0xFF	; 255
    3000:	9f e7       	ldi	r25, 0x7F	; 127
    3002:	a4 e0       	ldi	r26, 0x04	; 4
    3004:	81 50       	subi	r24, 0x01	; 1
    3006:	90 40       	sbci	r25, 0x00	; 0
    3008:	a0 40       	sbci	r26, 0x00	; 0
    300a:	e1 f7       	brne	.-8      	; 0x3004 <__stack+0xe05>
    300c:	00 c0       	rjmp	.+0      	; 0x300e <__stack+0xe0f>
    300e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3016:	c7 c3       	rjmp	.+1934   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 14 && path[i - 1] == 20)
    3018:	8e 30       	cpi	r24, 0x0E	; 14
    301a:	91 05       	cpc	r25, r1
    301c:	c1 f4       	brne	.+48     	; 0x304e <__stack+0xe4f>
    301e:	d7 01       	movw	r26, r14
    3020:	2d 91       	ld	r18, X+
    3022:	3c 91       	ld	r19, X
    3024:	11 97       	sbiw	r26, 0x01	; 1
    3026:	24 31       	cpi	r18, 0x14	; 20
    3028:	31 05       	cpc	r19, r1
    302a:	89 f4       	brne	.+34     	; 0x304e <__stack+0xe4f>
			{
				right_turn_wls();
    302c:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    3030:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3034:	8f ef       	ldi	r24, 0xFF	; 255
    3036:	9f e7       	ldi	r25, 0x7F	; 127
    3038:	a4 e0       	ldi	r26, 0x04	; 4
    303a:	81 50       	subi	r24, 0x01	; 1
    303c:	90 40       	sbci	r25, 0x00	; 0
    303e:	a0 40       	sbci	r26, 0x00	; 0
    3040:	e1 f7       	brne	.-8      	; 0x303a <__stack+0xe3b>
    3042:	00 c0       	rjmp	.+0      	; 0x3044 <__stack+0xe45>
    3044:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    304c:	ac c3       	rjmp	.+1880   	; 0x37a6 <__stack+0x15a7>
			}

			else if (path[i + 1] == 20 && path[i - 1] == 22)
    304e:	84 31       	cpi	r24, 0x14	; 20
    3050:	91 05       	cpc	r25, r1
    3052:	c1 f4       	brne	.+48     	; 0x3084 <__stack+0xe85>
    3054:	d7 01       	movw	r26, r14
    3056:	2d 91       	ld	r18, X+
    3058:	3c 91       	ld	r19, X
    305a:	11 97       	sbiw	r26, 0x01	; 1
    305c:	26 31       	cpi	r18, 0x16	; 22
    305e:	31 05       	cpc	r19, r1
    3060:	89 f4       	brne	.+34     	; 0x3084 <__stack+0xe85>
			{
				sharp_right_turn_wls();
    3062:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    3066:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    306a:	8f ef       	ldi	r24, 0xFF	; 255
    306c:	9f e7       	ldi	r25, 0x7F	; 127
    306e:	a4 e0       	ldi	r26, 0x04	; 4
    3070:	81 50       	subi	r24, 0x01	; 1
    3072:	90 40       	sbci	r25, 0x00	; 0
    3074:	a0 40       	sbci	r26, 0x00	; 0
    3076:	e1 f7       	brne	.-8      	; 0x3070 <__stack+0xe71>
    3078:	00 c0       	rjmp	.+0      	; 0x307a <__stack+0xe7b>
    307a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3082:	91 c3       	rjmp	.+1826   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 14 && path[i - 1] == 22)
    3084:	8e 30       	cpi	r24, 0x0E	; 14
    3086:	91 05       	cpc	r25, r1
    3088:	09 f0       	breq	.+2      	; 0x308c <__stack+0xe8d>
    308a:	8d c3       	rjmp	.+1818   	; 0x37a6 <__stack+0x15a7>
    308c:	d7 01       	movw	r26, r14
    308e:	8d 91       	ld	r24, X+
    3090:	9c 91       	ld	r25, X
    3092:	11 97       	sbiw	r26, 0x01	; 1
    3094:	86 31       	cpi	r24, 0x16	; 22
    3096:	91 05       	cpc	r25, r1
    3098:	09 f0       	breq	.+2      	; 0x309c <__stack+0xe9d>
    309a:	85 c3       	rjmp	.+1802   	; 0x37a6 <__stack+0x15a7>
			{
				left_turn_wls();
    309c:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
				stop();
    30a0:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    30a4:	8f ef       	ldi	r24, 0xFF	; 255
    30a6:	9f e7       	ldi	r25, 0x7F	; 127
    30a8:	a4 e0       	ldi	r26, 0x04	; 4
    30aa:	81 50       	subi	r24, 0x01	; 1
    30ac:	90 40       	sbci	r25, 0x00	; 0
    30ae:	a0 40       	sbci	r26, 0x00	; 0
    30b0:	e1 f7       	brne	.-8      	; 0x30aa <__stack+0xeab>
    30b2:	00 c0       	rjmp	.+0      	; 0x30b4 <__stack+0xeb5>
    30b4:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    30bc:	74 c3       	rjmp	.+1768   	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 20)
    30be:	84 31       	cpi	r24, 0x14	; 20
    30c0:	91 05       	cpc	r25, r1
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <__stack+0xec7>
    30c4:	a6 c0       	rjmp	.+332    	; 0x3212 <__stack+0x1013>
		{
			if (path[i + 1] == 23 && path[i - 1] == 17)
    30c6:	d7 01       	movw	r26, r14
    30c8:	14 96       	adiw	r26, 0x04	; 4
    30ca:	8d 91       	ld	r24, X+
    30cc:	9c 91       	ld	r25, X
    30ce:	15 97       	sbiw	r26, 0x05	; 5
    30d0:	87 31       	cpi	r24, 0x17	; 23
    30d2:	91 05       	cpc	r25, r1
    30d4:	b9 f4       	brne	.+46     	; 0x3104 <__stack+0xf05>
    30d6:	2d 91       	ld	r18, X+
    30d8:	3c 91       	ld	r19, X
    30da:	11 97       	sbiw	r26, 0x01	; 1
    30dc:	21 31       	cpi	r18, 0x11	; 17
    30de:	31 05       	cpc	r19, r1
    30e0:	89 f4       	brne	.+34     	; 0x3104 <__stack+0xf05>
			{
				right_turn_wls();
    30e2:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
				stop();
    30e6:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    30ea:	8f ef       	ldi	r24, 0xFF	; 255
    30ec:	9f e7       	ldi	r25, 0x7F	; 127
    30ee:	a4 e0       	ldi	r26, 0x04	; 4
    30f0:	81 50       	subi	r24, 0x01	; 1
    30f2:	90 40       	sbci	r25, 0x00	; 0
    30f4:	a0 40       	sbci	r26, 0x00	; 0
    30f6:	e1 f7       	brne	.-8      	; 0x30f0 <__stack+0xef1>
    30f8:	00 c0       	rjmp	.+0      	; 0x30fa <__stack+0xefb>
    30fa:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3102:	51 c3       	rjmp	.+1698   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 19 && path[i - 1] == 17)
    3104:	83 31       	cpi	r24, 0x13	; 19
    3106:	91 05       	cpc	r25, r1
    3108:	c1 f4       	brne	.+48     	; 0x313a <__stack+0xf3b>
    310a:	d7 01       	movw	r26, r14
    310c:	2d 91       	ld	r18, X+
    310e:	3c 91       	ld	r19, X
    3110:	11 97       	sbiw	r26, 0x01	; 1
    3112:	21 31       	cpi	r18, 0x11	; 17
    3114:	31 05       	cpc	r19, r1
    3116:	89 f4       	brne	.+34     	; 0x313a <__stack+0xf3b>
			{
				sharp_right_turn_wls();
    3118:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    311c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	9f e7       	ldi	r25, 0x7F	; 127
    3124:	a4 e0       	ldi	r26, 0x04	; 4
    3126:	81 50       	subi	r24, 0x01	; 1
    3128:	90 40       	sbci	r25, 0x00	; 0
    312a:	a0 40       	sbci	r26, 0x00	; 0
    312c:	e1 f7       	brne	.-8      	; 0x3126 <__stack+0xf27>
    312e:	00 c0       	rjmp	.+0      	; 0x3130 <__stack+0xf31>
    3130:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3138:	36 c3       	rjmp	.+1644   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 23 && path[i - 1] == 19)
    313a:	87 31       	cpi	r24, 0x17	; 23
    313c:	91 05       	cpc	r25, r1
    313e:	c1 f4       	brne	.+48     	; 0x3170 <__stack+0xf71>
    3140:	d7 01       	movw	r26, r14
    3142:	2d 91       	ld	r18, X+
    3144:	3c 91       	ld	r19, X
    3146:	11 97       	sbiw	r26, 0x01	; 1
    3148:	23 31       	cpi	r18, 0x13	; 19
    314a:	31 05       	cpc	r19, r1
    314c:	89 f4       	brne	.+34     	; 0x3170 <__stack+0xf71>
			{
				sharp_right_turn_wls();
    314e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    3152:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	9f e7       	ldi	r25, 0x7F	; 127
    315a:	a4 e0       	ldi	r26, 0x04	; 4
    315c:	81 50       	subi	r24, 0x01	; 1
    315e:	90 40       	sbci	r25, 0x00	; 0
    3160:	a0 40       	sbci	r26, 0x00	; 0
    3162:	e1 f7       	brne	.-8      	; 0x315c <__stack+0xf5d>
    3164:	00 c0       	rjmp	.+0      	; 0x3166 <__stack+0xf67>
    3166:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3168:	81 e0       	ldi	r24, 0x01	; 1
    316a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    316e:	1b c3       	rjmp	.+1590   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 17 && path[i - 1] == 19)
    3170:	81 31       	cpi	r24, 0x11	; 17
    3172:	91 05       	cpc	r25, r1
    3174:	c1 f4       	brne	.+48     	; 0x31a6 <__stack+0xfa7>
    3176:	d7 01       	movw	r26, r14
    3178:	2d 91       	ld	r18, X+
    317a:	3c 91       	ld	r19, X
    317c:	11 97       	sbiw	r26, 0x01	; 1
    317e:	23 31       	cpi	r18, 0x13	; 19
    3180:	31 05       	cpc	r19, r1
    3182:	89 f4       	brne	.+34     	; 0x31a6 <__stack+0xfa7>
			{
				sharp_left_turn_wls();
    3184:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    3188:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    318c:	8f ef       	ldi	r24, 0xFF	; 255
    318e:	9f e7       	ldi	r25, 0x7F	; 127
    3190:	a4 e0       	ldi	r26, 0x04	; 4
    3192:	81 50       	subi	r24, 0x01	; 1
    3194:	90 40       	sbci	r25, 0x00	; 0
    3196:	a0 40       	sbci	r26, 0x00	; 0
    3198:	e1 f7       	brne	.-8      	; 0x3192 <__stack+0xf93>
    319a:	00 c0       	rjmp	.+0      	; 0x319c <__stack+0xf9d>
    319c:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    31a4:	00 c3       	rjmp	.+1536   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 19 && path[i - 1] == 23)
    31a6:	83 31       	cpi	r24, 0x13	; 19
    31a8:	91 05       	cpc	r25, r1
    31aa:	c1 f4       	brne	.+48     	; 0x31dc <__stack+0xfdd>
    31ac:	d7 01       	movw	r26, r14
    31ae:	2d 91       	ld	r18, X+
    31b0:	3c 91       	ld	r19, X
    31b2:	11 97       	sbiw	r26, 0x01	; 1
    31b4:	27 31       	cpi	r18, 0x17	; 23
    31b6:	31 05       	cpc	r19, r1
    31b8:	89 f4       	brne	.+34     	; 0x31dc <__stack+0xfdd>
			{
				sharp_left_turn_wls();
    31ba:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    31be:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    31c2:	8f ef       	ldi	r24, 0xFF	; 255
    31c4:	9f e7       	ldi	r25, 0x7F	; 127
    31c6:	a4 e0       	ldi	r26, 0x04	; 4
    31c8:	81 50       	subi	r24, 0x01	; 1
    31ca:	90 40       	sbci	r25, 0x00	; 0
    31cc:	a0 40       	sbci	r26, 0x00	; 0
    31ce:	e1 f7       	brne	.-8      	; 0x31c8 <__stack+0xfc9>
    31d0:	00 c0       	rjmp	.+0      	; 0x31d2 <__stack+0xfd3>
    31d2:	00 00       	nop
				_delay_ms(100);				
				forward_wls(1);
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    31da:	e5 c2       	rjmp	.+1482   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 17 && path[i - 1] == 23)
    31dc:	81 31       	cpi	r24, 0x11	; 17
    31de:	91 05       	cpc	r25, r1
    31e0:	09 f0       	breq	.+2      	; 0x31e4 <__stack+0xfe5>
    31e2:	e1 c2       	rjmp	.+1474   	; 0x37a6 <__stack+0x15a7>
    31e4:	d7 01       	movw	r26, r14
    31e6:	8d 91       	ld	r24, X+
    31e8:	9c 91       	ld	r25, X
    31ea:	11 97       	sbiw	r26, 0x01	; 1
    31ec:	87 31       	cpi	r24, 0x17	; 23
    31ee:	91 05       	cpc	r25, r1
    31f0:	09 f0       	breq	.+2      	; 0x31f4 <__stack+0xff5>
    31f2:	d9 c2       	rjmp	.+1458   	; 0x37a6 <__stack+0x15a7>
			{
				stop();
    31f4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    31f8:	8f ef       	ldi	r24, 0xFF	; 255
    31fa:	9f e7       	ldi	r25, 0x7F	; 127
    31fc:	a4 e0       	ldi	r26, 0x04	; 4
    31fe:	81 50       	subi	r24, 0x01	; 1
    3200:	90 40       	sbci	r25, 0x00	; 0
    3202:	a0 40       	sbci	r26, 0x00	; 0
    3204:	e1 f7       	brne	.-8      	; 0x31fe <__stack+0xfff>
    3206:	00 c0       	rjmp	.+0      	; 0x3208 <__stack+0x1009>
    3208:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3210:	ca c2       	rjmp	.+1428   	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 21)
    3212:	85 31       	cpi	r24, 0x15	; 21
    3214:	91 05       	cpc	r25, r1
    3216:	09 f0       	breq	.+2      	; 0x321a <__stack+0x101b>
    3218:	59 c0       	rjmp	.+178    	; 0x32cc <__stack+0x10cd>
		{
			if (path[i + 1] == 3 && path[i - 1] == -1)
    321a:	d7 01       	movw	r26, r14
    321c:	14 96       	adiw	r26, 0x04	; 4
    321e:	8d 91       	ld	r24, X+
    3220:	9c 91       	ld	r25, X
    3222:	15 97       	sbiw	r26, 0x05	; 5
    3224:	83 30       	cpi	r24, 0x03	; 3
    3226:	91 05       	cpc	r25, r1
    3228:	c1 f4       	brne	.+48     	; 0x325a <__stack+0x105b>
    322a:	2d 91       	ld	r18, X+
    322c:	3c 91       	ld	r19, X
    322e:	11 97       	sbiw	r26, 0x01	; 1
    3230:	bf ef       	ldi	r27, 0xFF	; 255
    3232:	2f 3f       	cpi	r18, 0xFF	; 255
    3234:	3b 07       	cpc	r19, r27
    3236:	89 f4       	brne	.+34     	; 0x325a <__stack+0x105b>
			{
				sharp_right_turn_wls();
    3238:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    323c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3240:	8f ef       	ldi	r24, 0xFF	; 255
    3242:	9f e7       	ldi	r25, 0x7F	; 127
    3244:	a4 e0       	ldi	r26, 0x04	; 4
    3246:	81 50       	subi	r24, 0x01	; 1
    3248:	90 40       	sbci	r25, 0x00	; 0
    324a:	a0 40       	sbci	r26, 0x00	; 0
    324c:	e1 f7       	brne	.-8      	; 0x3246 <__stack+0x1047>
    324e:	00 c0       	rjmp	.+0      	; 0x3250 <__stack+0x1051>
    3250:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3258:	a6 c2       	rjmp	.+1356   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 22 && path[i - 1] == -1)
    325a:	86 31       	cpi	r24, 0x16	; 22
    325c:	91 05       	cpc	r25, r1
    325e:	c9 f4       	brne	.+50     	; 0x3292 <__stack+0x1093>
    3260:	d7 01       	movw	r26, r14
    3262:	2d 91       	ld	r18, X+
    3264:	3c 91       	ld	r19, X
    3266:	11 97       	sbiw	r26, 0x01	; 1
    3268:	bf ef       	ldi	r27, 0xFF	; 255
    326a:	2f 3f       	cpi	r18, 0xFF	; 255
    326c:	3b 07       	cpc	r19, r27
    326e:	89 f4       	brne	.+34     	; 0x3292 <__stack+0x1093>
			{
				sharp_left_turn_wls();
    3270:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    3274:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3278:	8f ef       	ldi	r24, 0xFF	; 255
    327a:	9f e7       	ldi	r25, 0x7F	; 127
    327c:	a4 e0       	ldi	r26, 0x04	; 4
    327e:	81 50       	subi	r24, 0x01	; 1
    3280:	90 40       	sbci	r25, 0x00	; 0
    3282:	a0 40       	sbci	r26, 0x00	; 0
    3284:	e1 f7       	brne	.-8      	; 0x327e <__stack+0x107f>
    3286:	00 c0       	rjmp	.+0      	; 0x3288 <__stack+0x1089>
    3288:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3290:	8a c2       	rjmp	.+1300   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 3 && path[i - 1] == 22)
    3292:	83 30       	cpi	r24, 0x03	; 3
    3294:	91 05       	cpc	r25, r1
    3296:	59 f4       	brne	.+22     	; 0x32ae <__stack+0x10af>
    3298:	d7 01       	movw	r26, r14
    329a:	2d 91       	ld	r18, X+
    329c:	3c 91       	ld	r19, X
    329e:	11 97       	sbiw	r26, 0x01	; 1
    32a0:	26 31       	cpi	r18, 0x16	; 22
    32a2:	31 05       	cpc	r19, r1
    32a4:	21 f4       	brne	.+8      	; 0x32ae <__stack+0x10af>
			{
				forward_wls(1);
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    32ac:	7c c2       	rjmp	.+1272   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 22 && path[i - 1] == 3)
    32ae:	86 31       	cpi	r24, 0x16	; 22
    32b0:	91 05       	cpc	r25, r1
    32b2:	09 f0       	breq	.+2      	; 0x32b6 <__stack+0x10b7>
    32b4:	78 c2       	rjmp	.+1264   	; 0x37a6 <__stack+0x15a7>
    32b6:	f7 01       	movw	r30, r14
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	83 30       	cpi	r24, 0x03	; 3
    32be:	91 05       	cpc	r25, r1
    32c0:	09 f0       	breq	.+2      	; 0x32c4 <__stack+0x10c5>
    32c2:	71 c2       	rjmp	.+1250   	; 0x37a6 <__stack+0x15a7>
			{
				forward_wls(1);
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    32ca:	6d c2       	rjmp	.+1242   	; 0x37a6 <__stack+0x15a7>
			}
			

		}

		else if (current_node == 22)
    32cc:	86 31       	cpi	r24, 0x16	; 22
    32ce:	91 05       	cpc	r25, r1
    32d0:	09 f0       	breq	.+2      	; 0x32d4 <__stack+0x10d5>
    32d2:	eb c0       	rjmp	.+470    	; 0x34aa <__stack+0x12ab>
		{
			if (path[i + 1] == 21 && path[i - 1] == -1)
    32d4:	d7 01       	movw	r26, r14
    32d6:	14 96       	adiw	r26, 0x04	; 4
    32d8:	8d 91       	ld	r24, X+
    32da:	9c 91       	ld	r25, X
    32dc:	15 97       	sbiw	r26, 0x05	; 5
    32de:	85 31       	cpi	r24, 0x15	; 21
    32e0:	91 05       	cpc	r25, r1
    32e2:	c1 f4       	brne	.+48     	; 0x3314 <__stack+0x1115>
    32e4:	2d 91       	ld	r18, X+
    32e6:	3c 91       	ld	r19, X
    32e8:	11 97       	sbiw	r26, 0x01	; 1
    32ea:	bf ef       	ldi	r27, 0xFF	; 255
    32ec:	2f 3f       	cpi	r18, 0xFF	; 255
    32ee:	3b 07       	cpc	r19, r27
    32f0:	89 f4       	brne	.+34     	; 0x3314 <__stack+0x1115>
			{
				sharp_right_turn_wls();
    32f2:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    32f6:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    32fa:	8f ef       	ldi	r24, 0xFF	; 255
    32fc:	9f e7       	ldi	r25, 0x7F	; 127
    32fe:	a4 e0       	ldi	r26, 0x04	; 4
    3300:	81 50       	subi	r24, 0x01	; 1
    3302:	90 40       	sbci	r25, 0x00	; 0
    3304:	a0 40       	sbci	r26, 0x00	; 0
    3306:	e1 f7       	brne	.-8      	; 0x3300 <__stack+0x1101>
    3308:	00 c0       	rjmp	.+0      	; 0x330a <__stack+0x110b>
    330a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3312:	49 c2       	rjmp	.+1170   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 23 && path[i - 1] == -1)
    3314:	87 31       	cpi	r24, 0x17	; 23
    3316:	91 05       	cpc	r25, r1
    3318:	c9 f4       	brne	.+50     	; 0x334c <__stack+0x114d>
    331a:	d7 01       	movw	r26, r14
    331c:	2d 91       	ld	r18, X+
    331e:	3c 91       	ld	r19, X
    3320:	11 97       	sbiw	r26, 0x01	; 1
    3322:	bf ef       	ldi	r27, 0xFF	; 255
    3324:	2f 3f       	cpi	r18, 0xFF	; 255
    3326:	3b 07       	cpc	r19, r27
    3328:	89 f4       	brne	.+34     	; 0x334c <__stack+0x114d>
			{
				sharp_left_turn_wls();
    332a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    332e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3332:	8f ef       	ldi	r24, 0xFF	; 255
    3334:	9f e7       	ldi	r25, 0x7F	; 127
    3336:	a4 e0       	ldi	r26, 0x04	; 4
    3338:	81 50       	subi	r24, 0x01	; 1
    333a:	90 40       	sbci	r25, 0x00	; 0
    333c:	a0 40       	sbci	r26, 0x00	; 0
    333e:	e1 f7       	brne	.-8      	; 0x3338 <__stack+0x1139>
    3340:	00 c0       	rjmp	.+0      	; 0x3342 <__stack+0x1143>
    3342:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3344:	81 e0       	ldi	r24, 0x01	; 1
    3346:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    334a:	2d c2       	rjmp	.+1114   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 19 && path[i - 1] == -1)
    334c:	83 31       	cpi	r24, 0x13	; 19
    334e:	91 05       	cpc	r25, r1
    3350:	31 f5       	brne	.+76     	; 0x339e <__stack+0x119f>
    3352:	d7 01       	movw	r26, r14
    3354:	2d 91       	ld	r18, X+
    3356:	3c 91       	ld	r19, X
    3358:	11 97       	sbiw	r26, 0x01	; 1
    335a:	bf ef       	ldi	r27, 0xFF	; 255
    335c:	2f 3f       	cpi	r18, 0xFF	; 255
    335e:	3b 07       	cpc	r19, r27
    3360:	f1 f4       	brne	.+60     	; 0x339e <__stack+0x119f>
			{
				sharp_left_turn_wls();
    3362:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    3366:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    336a:	8f ef       	ldi	r24, 0xFF	; 255
    336c:	9f e7       	ldi	r25, 0x7F	; 127
    336e:	a4 e0       	ldi	r26, 0x04	; 4
    3370:	81 50       	subi	r24, 0x01	; 1
    3372:	90 40       	sbci	r25, 0x00	; 0
    3374:	a0 40       	sbci	r26, 0x00	; 0
    3376:	e1 f7       	brne	.-8      	; 0x3370 <__stack+0x1171>
    3378:	00 c0       	rjmp	.+0      	; 0x337a <__stack+0x117b>
    337a:	00 00       	nop
				_delay_ms(100);
				sharp_left_turn_wls();
    337c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    3380:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3384:	8f ef       	ldi	r24, 0xFF	; 255
    3386:	9f e7       	ldi	r25, 0x7F	; 127
    3388:	a4 e0       	ldi	r26, 0x04	; 4
    338a:	81 50       	subi	r24, 0x01	; 1
    338c:	90 40       	sbci	r25, 0x00	; 0
    338e:	a0 40       	sbci	r26, 0x00	; 0
    3390:	e1 f7       	brne	.-8      	; 0x338a <__stack+0x118b>
    3392:	00 c0       	rjmp	.+0      	; 0x3394 <__stack+0x1195>
    3394:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    339c:	04 c2       	rjmp	.+1032   	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 23 && path[i - 1] == 21)
    339e:	87 31       	cpi	r24, 0x17	; 23
    33a0:	91 05       	cpc	r25, r1
    33a2:	59 f4       	brne	.+22     	; 0x33ba <__stack+0x11bb>
    33a4:	d7 01       	movw	r26, r14
    33a6:	2d 91       	ld	r18, X+
    33a8:	3c 91       	ld	r19, X
    33aa:	11 97       	sbiw	r26, 0x01	; 1
    33ac:	25 31       	cpi	r18, 0x15	; 21
    33ae:	31 05       	cpc	r19, r1
    33b0:	21 f4       	brne	.+8      	; 0x33ba <__stack+0x11bb>
				forward_wls(1);
    33b2:	81 e0       	ldi	r24, 0x01	; 1
    33b4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    33b8:	f6 c1       	rjmp	.+1004   	; 0x37a6 <__stack+0x15a7>
			else if (path[i + 1] == 21 && path[i - 1] == 23)
    33ba:	85 31       	cpi	r24, 0x15	; 21
    33bc:	91 05       	cpc	r25, r1
    33be:	51 f4       	brne	.+20     	; 0x33d4 <__stack+0x11d5>
    33c0:	f7 01       	movw	r30, r14
    33c2:	20 81       	ld	r18, Z
    33c4:	31 81       	ldd	r19, Z+1	; 0x01
    33c6:	27 31       	cpi	r18, 0x17	; 23
    33c8:	31 05       	cpc	r19, r1
    33ca:	21 f4       	brne	.+8      	; 0x33d4 <__stack+0x11d5>
				forward_wls(1);
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    33d2:	e9 c1       	rjmp	.+978    	; 0x37a6 <__stack+0x15a7>
			else if (path[i + 1] == 23 && path[i - 1] == 19)
    33d4:	87 31       	cpi	r24, 0x17	; 23
    33d6:	91 05       	cpc	r25, r1
    33d8:	c1 f4       	brne	.+48     	; 0x340a <__stack+0x120b>
    33da:	d7 01       	movw	r26, r14
    33dc:	2d 91       	ld	r18, X+
    33de:	3c 91       	ld	r19, X
    33e0:	11 97       	sbiw	r26, 0x01	; 1
    33e2:	23 31       	cpi	r18, 0x13	; 19
    33e4:	31 05       	cpc	r19, r1
    33e6:	89 f4       	brne	.+34     	; 0x340a <__stack+0x120b>
			{
				sharp_left_turn_wls();
    33e8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    33ec:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    33f0:	8f ef       	ldi	r24, 0xFF	; 255
    33f2:	9f e7       	ldi	r25, 0x7F	; 127
    33f4:	a4 e0       	ldi	r26, 0x04	; 4
    33f6:	81 50       	subi	r24, 0x01	; 1
    33f8:	90 40       	sbci	r25, 0x00	; 0
    33fa:	a0 40       	sbci	r26, 0x00	; 0
    33fc:	e1 f7       	brne	.-8      	; 0x33f6 <__stack+0x11f7>
    33fe:	00 c0       	rjmp	.+0      	; 0x3400 <__stack+0x1201>
    3400:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3408:	ce c1       	rjmp	.+924    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 21 && path[i - 1] == 19)
    340a:	85 31       	cpi	r24, 0x15	; 21
    340c:	91 05       	cpc	r25, r1
    340e:	c1 f4       	brne	.+48     	; 0x3440 <__stack+0x1241>
    3410:	d7 01       	movw	r26, r14
    3412:	2d 91       	ld	r18, X+
    3414:	3c 91       	ld	r19, X
    3416:	11 97       	sbiw	r26, 0x01	; 1
    3418:	23 31       	cpi	r18, 0x13	; 19
    341a:	31 05       	cpc	r19, r1
    341c:	89 f4       	brne	.+34     	; 0x3440 <__stack+0x1241>
			{
				sharp_right_turn_wls();
    341e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    3422:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3426:	8f ef       	ldi	r24, 0xFF	; 255
    3428:	9f e7       	ldi	r25, 0x7F	; 127
    342a:	a4 e0       	ldi	r26, 0x04	; 4
    342c:	81 50       	subi	r24, 0x01	; 1
    342e:	90 40       	sbci	r25, 0x00	; 0
    3430:	a0 40       	sbci	r26, 0x00	; 0
    3432:	e1 f7       	brne	.-8      	; 0x342c <__stack+0x122d>
    3434:	00 c0       	rjmp	.+0      	; 0x3436 <__stack+0x1237>
    3436:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    343e:	b3 c1       	rjmp	.+870    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 19 && path[i - 1] == 23)
    3440:	83 31       	cpi	r24, 0x13	; 19
    3442:	91 05       	cpc	r25, r1
    3444:	09 f0       	breq	.+2      	; 0x3448 <__stack+0x1249>
    3446:	af c1       	rjmp	.+862    	; 0x37a6 <__stack+0x15a7>
    3448:	d7 01       	movw	r26, r14
    344a:	8d 91       	ld	r24, X+
    344c:	9c 91       	ld	r25, X
    344e:	11 97       	sbiw	r26, 0x01	; 1
    3450:	87 31       	cpi	r24, 0x17	; 23
    3452:	91 05       	cpc	r25, r1
    3454:	89 f4       	brne	.+34     	; 0x3478 <__stack+0x1279>
			{
				sharp_right_turn_wls();
    3456:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    345a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    345e:	8f ef       	ldi	r24, 0xFF	; 255
    3460:	9f e7       	ldi	r25, 0x7F	; 127
    3462:	a4 e0       	ldi	r26, 0x04	; 4
    3464:	81 50       	subi	r24, 0x01	; 1
    3466:	90 40       	sbci	r25, 0x00	; 0
    3468:	a0 40       	sbci	r26, 0x00	; 0
    346a:	e1 f7       	brne	.-8      	; 0x3464 <__stack+0x1265>
    346c:	00 c0       	rjmp	.+0      	; 0x346e <__stack+0x126f>
    346e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3470:	81 e0       	ldi	r24, 0x01	; 1
    3472:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3476:	97 c1       	rjmp	.+814    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 19 && path[i - 1] == 21)
    3478:	d7 01       	movw	r26, r14
    347a:	8d 91       	ld	r24, X+
    347c:	9c 91       	ld	r25, X
    347e:	11 97       	sbiw	r26, 0x01	; 1
    3480:	85 31       	cpi	r24, 0x15	; 21
    3482:	91 05       	cpc	r25, r1
    3484:	09 f0       	breq	.+2      	; 0x3488 <__stack+0x1289>
    3486:	8f c1       	rjmp	.+798    	; 0x37a6 <__stack+0x15a7>
			{
				sharp_left_turn_wls();
    3488:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    348c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3490:	8f ef       	ldi	r24, 0xFF	; 255
    3492:	9f e7       	ldi	r25, 0x7F	; 127
    3494:	a4 e0       	ldi	r26, 0x04	; 4
    3496:	81 50       	subi	r24, 0x01	; 1
    3498:	90 40       	sbci	r25, 0x00	; 0
    349a:	a0 40       	sbci	r26, 0x00	; 0
    349c:	e1 f7       	brne	.-8      	; 0x3496 <__stack+0x1297>
    349e:	00 c0       	rjmp	.+0      	; 0x34a0 <__stack+0x12a1>
    34a0:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    34a8:	7e c1       	rjmp	.+764    	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 23)
    34aa:	87 31       	cpi	r24, 0x17	; 23
    34ac:	91 05       	cpc	r25, r1
    34ae:	09 f0       	breq	.+2      	; 0x34b2 <__stack+0x12b3>
    34b0:	71 c0       	rjmp	.+226    	; 0x3594 <__stack+0x1395>
		{
			if (path[i + 1] == 22 && path[i - 1] == 20)
    34b2:	d7 01       	movw	r26, r14
    34b4:	14 96       	adiw	r26, 0x04	; 4
    34b6:	8d 91       	ld	r24, X+
    34b8:	9c 91       	ld	r25, X
    34ba:	15 97       	sbiw	r26, 0x05	; 5
    34bc:	86 31       	cpi	r24, 0x16	; 22
    34be:	91 05       	cpc	r25, r1
    34c0:	b9 f4       	brne	.+46     	; 0x34f0 <__stack+0x12f1>
    34c2:	2d 91       	ld	r18, X+
    34c4:	3c 91       	ld	r19, X
    34c6:	11 97       	sbiw	r26, 0x01	; 1
    34c8:	24 31       	cpi	r18, 0x14	; 20
    34ca:	31 05       	cpc	r19, r1
    34cc:	89 f4       	brne	.+34     	; 0x34f0 <__stack+0x12f1>
			{
				sharp_right_turn_wls();
    34ce:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    34d2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    34d6:	8f ef       	ldi	r24, 0xFF	; 255
    34d8:	9f e7       	ldi	r25, 0x7F	; 127
    34da:	a4 e0       	ldi	r26, 0x04	; 4
    34dc:	81 50       	subi	r24, 0x01	; 1
    34de:	90 40       	sbci	r25, 0x00	; 0
    34e0:	a0 40       	sbci	r26, 0x00	; 0
    34e2:	e1 f7       	brne	.-8      	; 0x34dc <__stack+0x12dd>
    34e4:	00 c0       	rjmp	.+0      	; 0x34e6 <__stack+0x12e7>
    34e6:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    34ee:	5b c1       	rjmp	.+694    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 20 && path[i - 1] == 22)
    34f0:	84 31       	cpi	r24, 0x14	; 20
    34f2:	91 05       	cpc	r25, r1
    34f4:	89 f5       	brne	.+98     	; 0x3558 <__stack+0x1359>
    34f6:	d7 01       	movw	r26, r14
    34f8:	2d 91       	ld	r18, X+
    34fa:	3c 91       	ld	r19, X
    34fc:	11 97       	sbiw	r26, 0x01	; 1
    34fe:	26 31       	cpi	r18, 0x16	; 22
    3500:	31 05       	cpc	r19, r1
    3502:	89 f4       	brne	.+34     	; 0x3526 <__stack+0x1327>
			{
				sharp_left_turn_wls();
    3504:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    3508:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    350c:	8f ef       	ldi	r24, 0xFF	; 255
    350e:	9f e7       	ldi	r25, 0x7F	; 127
    3510:	a4 e0       	ldi	r26, 0x04	; 4
    3512:	81 50       	subi	r24, 0x01	; 1
    3514:	90 40       	sbci	r25, 0x00	; 0
    3516:	a0 40       	sbci	r26, 0x00	; 0
    3518:	e1 f7       	brne	.-8      	; 0x3512 <__stack+0x1313>
    351a:	00 c0       	rjmp	.+0      	; 0x351c <__stack+0x131d>
    351c:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3524:	40 c1       	rjmp	.+640    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 20 && path[i - 1] == -1)
    3526:	d7 01       	movw	r26, r14
    3528:	2d 91       	ld	r18, X+
    352a:	3c 91       	ld	r19, X
    352c:	11 97       	sbiw	r26, 0x01	; 1
    352e:	bf ef       	ldi	r27, 0xFF	; 255
    3530:	2f 3f       	cpi	r18, 0xFF	; 255
    3532:	3b 07       	cpc	r19, r27
    3534:	89 f4       	brne	.+34     	; 0x3558 <__stack+0x1359>
			{
				sharp_left_turn_wls();
    3536:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    353a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    353e:	8f ef       	ldi	r24, 0xFF	; 255
    3540:	9f e7       	ldi	r25, 0x7F	; 127
    3542:	a4 e0       	ldi	r26, 0x04	; 4
    3544:	81 50       	subi	r24, 0x01	; 1
    3546:	90 40       	sbci	r25, 0x00	; 0
    3548:	a0 40       	sbci	r26, 0x00	; 0
    354a:	e1 f7       	brne	.-8      	; 0x3544 <__stack+0x1345>
    354c:	00 c0       	rjmp	.+0      	; 0x354e <__stack+0x134f>
    354e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3556:	27 c1       	rjmp	.+590    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 22 && path[i - 1] == -1)
    3558:	86 31       	cpi	r24, 0x16	; 22
    355a:	91 05       	cpc	r25, r1
    355c:	09 f0       	breq	.+2      	; 0x3560 <__stack+0x1361>
    355e:	23 c1       	rjmp	.+582    	; 0x37a6 <__stack+0x15a7>
    3560:	d7 01       	movw	r26, r14
    3562:	8d 91       	ld	r24, X+
    3564:	9c 91       	ld	r25, X
    3566:	11 97       	sbiw	r26, 0x01	; 1
    3568:	bf ef       	ldi	r27, 0xFF	; 255
    356a:	8f 3f       	cpi	r24, 0xFF	; 255
    356c:	9b 07       	cpc	r25, r27
    356e:	09 f0       	breq	.+2      	; 0x3572 <__stack+0x1373>
    3570:	1a c1       	rjmp	.+564    	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    3572:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    3576:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    357a:	8f ef       	ldi	r24, 0xFF	; 255
    357c:	9f e7       	ldi	r25, 0x7F	; 127
    357e:	a4 e0       	ldi	r26, 0x04	; 4
    3580:	81 50       	subi	r24, 0x01	; 1
    3582:	90 40       	sbci	r25, 0x00	; 0
    3584:	a0 40       	sbci	r26, 0x00	; 0
    3586:	e1 f7       	brne	.-8      	; 0x3580 <__stack+0x1381>
    3588:	00 c0       	rjmp	.+0      	; 0x358a <__stack+0x138b>
    358a:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3592:	09 c1       	rjmp	.+530    	; 0x37a6 <__stack+0x15a7>
			}
		}

		else if (current_node == 24)
    3594:	88 31       	cpi	r24, 0x18	; 24
    3596:	91 05       	cpc	r25, r1
    3598:	c1 f5       	brne	.+112    	; 0x360a <__stack+0x140b>
		{
			
			if (path[i + 1] == 25 && path[i - 1] == 1)
    359a:	d7 01       	movw	r26, r14
    359c:	14 96       	adiw	r26, 0x04	; 4
    359e:	8d 91       	ld	r24, X+
    35a0:	9c 91       	ld	r25, X
    35a2:	15 97       	sbiw	r26, 0x05	; 5
    35a4:	89 31       	cpi	r24, 0x19	; 25
    35a6:	91 05       	cpc	r25, r1
    35a8:	a9 f4       	brne	.+42     	; 0x35d4 <__stack+0x13d5>
    35aa:	2d 91       	ld	r18, X+
    35ac:	3c 91       	ld	r19, X
    35ae:	11 97       	sbiw	r26, 0x01	; 1
    35b0:	21 30       	cpi	r18, 0x01	; 1
    35b2:	31 05       	cpc	r19, r1
    35b4:	79 f4       	brne	.+30     	; 0x35d4 <__stack+0x13d5>
    35b6:	8f ef       	ldi	r24, 0xFF	; 255
    35b8:	9f ef       	ldi	r25, 0xFF	; 255
    35ba:	ac e0       	ldi	r26, 0x0C	; 12
    35bc:	b2 e0       	ldi	r27, 0x02	; 2
    35be:	81 50       	subi	r24, 0x01	; 1
    35c0:	90 40       	sbci	r25, 0x00	; 0
    35c2:	a0 40       	sbci	r26, 0x00	; 0
    35c4:	b0 40       	sbci	r27, 0x00	; 0
    35c6:	d9 f7       	brne	.-10     	; 0x35be <__stack+0x13bf>
    35c8:	00 c0       	rjmp	.+0      	; 0x35ca <__stack+0x13cb>
    35ca:	00 00       	nop
			{
				_delay_ms(14000);
				forward_wls(1);
    35cc:	81 e0       	ldi	r24, 0x01	; 1
    35ce:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    35d2:	e9 c0       	rjmp	.+466    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 1 && path[i - 1] == 25)
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	91 05       	cpc	r25, r1
    35d8:	09 f0       	breq	.+2      	; 0x35dc <__stack+0x13dd>
    35da:	e5 c0       	rjmp	.+458    	; 0x37a6 <__stack+0x15a7>
    35dc:	d7 01       	movw	r26, r14
    35de:	8d 91       	ld	r24, X+
    35e0:	9c 91       	ld	r25, X
    35e2:	11 97       	sbiw	r26, 0x01	; 1
    35e4:	89 31       	cpi	r24, 0x19	; 25
    35e6:	91 05       	cpc	r25, r1
    35e8:	09 f0       	breq	.+2      	; 0x35ec <__stack+0x13ed>
    35ea:	dd c0       	rjmp	.+442    	; 0x37a6 <__stack+0x15a7>
    35ec:	8f ef       	ldi	r24, 0xFF	; 255
    35ee:	9f e7       	ldi	r25, 0x7F	; 127
    35f0:	a7 ee       	ldi	r26, 0xE7	; 231
    35f2:	b1 e0       	ldi	r27, 0x01	; 1
    35f4:	81 50       	subi	r24, 0x01	; 1
    35f6:	90 40       	sbci	r25, 0x00	; 0
    35f8:	a0 40       	sbci	r26, 0x00	; 0
    35fa:	b0 40       	sbci	r27, 0x00	; 0
    35fc:	d9 f7       	brne	.-10     	; 0x35f4 <__stack+0x13f5>
    35fe:	00 c0       	rjmp	.+0      	; 0x3600 <__stack+0x1401>
    3600:	00 00       	nop
			{
				_delay_ms(13000);
				forward_wls(1);
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3608:	ce c0       	rjmp	.+412    	; 0x37a6 <__stack+0x15a7>
			}
			
		}
		
		else if (current_node == 25)
    360a:	89 31       	cpi	r24, 0x19	; 25
    360c:	91 05       	cpc	r25, r1
    360e:	09 f0       	breq	.+2      	; 0x3612 <__stack+0x1413>
    3610:	85 c0       	rjmp	.+266    	; 0x371c <__stack+0x151d>
		{
			if (path[i + 1] == 26 && path[i - 1] == 24)
    3612:	d7 01       	movw	r26, r14
    3614:	14 96       	adiw	r26, 0x04	; 4
    3616:	8d 91       	ld	r24, X+
    3618:	9c 91       	ld	r25, X
    361a:	15 97       	sbiw	r26, 0x05	; 5
    361c:	8a 31       	cpi	r24, 0x1A	; 26
    361e:	91 05       	cpc	r25, r1
    3620:	11 f5       	brne	.+68     	; 0x3666 <__stack+0x1467>
    3622:	2d 91       	ld	r18, X+
    3624:	3c 91       	ld	r19, X
    3626:	11 97       	sbiw	r26, 0x01	; 1
    3628:	28 31       	cpi	r18, 0x18	; 24
    362a:	31 05       	cpc	r19, r1
    362c:	e1 f4       	brne	.+56     	; 0x3666 <__stack+0x1467>
			{
				sharp_left_turn_wls();
    362e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    3632:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3636:	8f ef       	ldi	r24, 0xFF	; 255
    3638:	9f e7       	ldi	r25, 0x7F	; 127
    363a:	a4 e0       	ldi	r26, 0x04	; 4
    363c:	81 50       	subi	r24, 0x01	; 1
    363e:	90 40       	sbci	r25, 0x00	; 0
    3640:	a0 40       	sbci	r26, 0x00	; 0
    3642:	e1 f7       	brne	.-8      	; 0x363c <__stack+0x143d>
    3644:	00 c0       	rjmp	.+0      	; 0x3646 <__stack+0x1447>
    3646:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
				
				forward();
    364e:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3652:	86 e6       	ldi	r24, 0x66	; 102
    3654:	96 ea       	ldi	r25, 0xA6	; 166
    3656:	a0 e1       	ldi	r26, 0x10	; 16
    3658:	81 50       	subi	r24, 0x01	; 1
    365a:	90 40       	sbci	r25, 0x00	; 0
    365c:	a0 40       	sbci	r26, 0x00	; 0
    365e:	e1 f7       	brne	.-8      	; 0x3658 <__stack+0x1459>
				_delay_ms(370);
				stop();
    3660:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3664:	a0 c0       	rjmp	.+320    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 27 && path[i - 1] == 24)
    3666:	8b 31       	cpi	r24, 0x1B	; 27
    3668:	91 05       	cpc	r25, r1
    366a:	19 f5       	brne	.+70     	; 0x36b2 <__stack+0x14b3>
    366c:	d7 01       	movw	r26, r14
    366e:	2d 91       	ld	r18, X+
    3670:	3c 91       	ld	r19, X
    3672:	11 97       	sbiw	r26, 0x01	; 1
    3674:	28 31       	cpi	r18, 0x18	; 24
    3676:	31 05       	cpc	r19, r1
    3678:	e1 f4       	brne	.+56     	; 0x36b2 <__stack+0x14b3>
			{
				sharp_right_turn_wls();
    367a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    367e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3682:	8f ef       	ldi	r24, 0xFF	; 255
    3684:	9f e7       	ldi	r25, 0x7F	; 127
    3686:	a4 e0       	ldi	r26, 0x04	; 4
    3688:	81 50       	subi	r24, 0x01	; 1
    368a:	90 40       	sbci	r25, 0x00	; 0
    368c:	a0 40       	sbci	r26, 0x00	; 0
    368e:	e1 f7       	brne	.-8      	; 0x3688 <__stack+0x1489>
    3690:	00 c0       	rjmp	.+0      	; 0x3692 <__stack+0x1493>
    3692:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
				
				forward();
    369a:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    369e:	86 e6       	ldi	r24, 0x66	; 102
    36a0:	96 ea       	ldi	r25, 0xA6	; 166
    36a2:	a0 e1       	ldi	r26, 0x10	; 16
    36a4:	81 50       	subi	r24, 0x01	; 1
    36a6:	90 40       	sbci	r25, 0x00	; 0
    36a8:	a0 40       	sbci	r26, 0x00	; 0
    36aa:	e1 f7       	brne	.-8      	; 0x36a4 <__stack+0x14a5>
				_delay_ms(370);
				stop();
    36ac:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    36b0:	7a c0       	rjmp	.+244    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 24 && path[i - 1] == 27)
    36b2:	88 31       	cpi	r24, 0x18	; 24
    36b4:	91 05       	cpc	r25, r1
    36b6:	09 f0       	breq	.+2      	; 0x36ba <__stack+0x14bb>
    36b8:	76 c0       	rjmp	.+236    	; 0x37a6 <__stack+0x15a7>
    36ba:	d7 01       	movw	r26, r14
    36bc:	8d 91       	ld	r24, X+
    36be:	9c 91       	ld	r25, X
    36c0:	11 97       	sbiw	r26, 0x01	; 1
    36c2:	8b 31       	cpi	r24, 0x1B	; 27
    36c4:	91 05       	cpc	r25, r1
    36c6:	89 f4       	brne	.+34     	; 0x36ea <__stack+0x14eb>
			{
				sharp_left_turn_wls();
    36c8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    36cc:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    36d0:	8f ef       	ldi	r24, 0xFF	; 255
    36d2:	9f e7       	ldi	r25, 0x7F	; 127
    36d4:	a4 e0       	ldi	r26, 0x04	; 4
    36d6:	81 50       	subi	r24, 0x01	; 1
    36d8:	90 40       	sbci	r25, 0x00	; 0
    36da:	a0 40       	sbci	r26, 0x00	; 0
    36dc:	e1 f7       	brne	.-8      	; 0x36d6 <__stack+0x14d7>
    36de:	00 c0       	rjmp	.+0      	; 0x36e0 <__stack+0x14e1>
    36e0:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    36e8:	5e c0       	rjmp	.+188    	; 0x37a6 <__stack+0x15a7>
			}
			else if (path[i + 1] == 24 && path[i - 1] == 26)
    36ea:	d7 01       	movw	r26, r14
    36ec:	8d 91       	ld	r24, X+
    36ee:	9c 91       	ld	r25, X
    36f0:	11 97       	sbiw	r26, 0x01	; 1
    36f2:	8a 31       	cpi	r24, 0x1A	; 26
    36f4:	91 05       	cpc	r25, r1
    36f6:	09 f0       	breq	.+2      	; 0x36fa <__stack+0x14fb>
    36f8:	56 c0       	rjmp	.+172    	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    36fa:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    36fe:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3702:	8f ef       	ldi	r24, 0xFF	; 255
    3704:	9f e7       	ldi	r25, 0x7F	; 127
    3706:	a4 e0       	ldi	r26, 0x04	; 4
    3708:	81 50       	subi	r24, 0x01	; 1
    370a:	90 40       	sbci	r25, 0x00	; 0
    370c:	a0 40       	sbci	r26, 0x00	; 0
    370e:	e1 f7       	brne	.-8      	; 0x3708 <__stack+0x1509>
    3710:	00 c0       	rjmp	.+0      	; 0x3712 <__stack+0x1513>
    3712:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    371a:	45 c0       	rjmp	.+138    	; 0x37a6 <__stack+0x15a7>
			}
		}
		
		
		else if (current_node == 27)
    371c:	8b 31       	cpi	r24, 0x1B	; 27
    371e:	91 05       	cpc	r25, r1
    3720:	01 f5       	brne	.+64     	; 0x3762 <__stack+0x1563>
		{
			if (path[i + 1] == 25 && path[i - 1] == -1)
    3722:	d7 01       	movw	r26, r14
    3724:	14 96       	adiw	r26, 0x04	; 4
    3726:	8d 91       	ld	r24, X+
    3728:	9c 91       	ld	r25, X
    372a:	15 97       	sbiw	r26, 0x05	; 5
    372c:	89 31       	cpi	r24, 0x19	; 25
    372e:	91 05       	cpc	r25, r1
    3730:	d1 f5       	brne	.+116    	; 0x37a6 <__stack+0x15a7>
    3732:	8d 91       	ld	r24, X+
    3734:	9c 91       	ld	r25, X
    3736:	11 97       	sbiw	r26, 0x01	; 1
    3738:	bf ef       	ldi	r27, 0xFF	; 255
    373a:	8f 3f       	cpi	r24, 0xFF	; 255
    373c:	9b 07       	cpc	r25, r27
    373e:	99 f5       	brne	.+102    	; 0x37a6 <__stack+0x15a7>
			{
				sharp_right_turn_wls();
    3740:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
				stop();
    3744:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3748:	8f ef       	ldi	r24, 0xFF	; 255
    374a:	9f e7       	ldi	r25, 0x7F	; 127
    374c:	a4 e0       	ldi	r26, 0x04	; 4
    374e:	81 50       	subi	r24, 0x01	; 1
    3750:	90 40       	sbci	r25, 0x00	; 0
    3752:	a0 40       	sbci	r26, 0x00	; 0
    3754:	e1 f7       	brne	.-8      	; 0x374e <__stack+0x154f>
    3756:	00 c0       	rjmp	.+0      	; 0x3758 <__stack+0x1559>
    3758:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    3760:	22 c0       	rjmp	.+68     	; 0x37a6 <__stack+0x15a7>
			}
			
		}
		
		else if (current_node == 26)
    3762:	8a 31       	cpi	r24, 0x1A	; 26
    3764:	91 05       	cpc	r25, r1
    3766:	f9 f4       	brne	.+62     	; 0x37a6 <__stack+0x15a7>
		{
			if (path[i + 1] == 25 && path[i - 1] == -1)
    3768:	d7 01       	movw	r26, r14
    376a:	14 96       	adiw	r26, 0x04	; 4
    376c:	8d 91       	ld	r24, X+
    376e:	9c 91       	ld	r25, X
    3770:	15 97       	sbiw	r26, 0x05	; 5
    3772:	89 31       	cpi	r24, 0x19	; 25
    3774:	91 05       	cpc	r25, r1
    3776:	b9 f4       	brne	.+46     	; 0x37a6 <__stack+0x15a7>
    3778:	8d 91       	ld	r24, X+
    377a:	9c 91       	ld	r25, X
    377c:	11 97       	sbiw	r26, 0x01	; 1
    377e:	bf ef       	ldi	r27, 0xFF	; 255
    3780:	8f 3f       	cpi	r24, 0xFF	; 255
    3782:	9b 07       	cpc	r25, r27
    3784:	81 f4       	brne	.+32     	; 0x37a6 <__stack+0x15a7>
			{
				sharp_left_turn_wls();
    3786:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
				stop();
    378a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    378e:	8f ef       	ldi	r24, 0xFF	; 255
    3790:	9f e7       	ldi	r25, 0x7F	; 127
    3792:	a4 e0       	ldi	r26, 0x04	; 4
    3794:	81 50       	subi	r24, 0x01	; 1
    3796:	90 40       	sbci	r25, 0x00	; 0
    3798:	a0 40       	sbci	r26, 0x00	; 0
    379a:	e1 f7       	brne	.-8      	; 0x3794 <__stack+0x1595>
    379c:	00 c0       	rjmp	.+0      	; 0x379e <__stack+0x159f>
    379e:	00 00       	nop
				_delay_ms(100);
				forward_wls(1);
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
			}
			
		}
		
		
		if (obstacle_found == 1)	//if obstacle was found while traveling from one node to other then return
    37a6:	80 91 2e 02 	lds	r24, 0x022E
    37aa:	90 91 2f 02 	lds	r25, 0x022F
    37ae:	81 30       	cpi	r24, 0x01	; 1
    37b0:	91 05       	cpc	r25, r1
    37b2:	c1 f0       	breq	.+48     	; 0x37e4 <__stack+0x15e5>
		{
			return;
		}	
		obstacle_found = 0;
    37b4:	10 92 2f 02 	sts	0x022F, r1
    37b8:	10 92 2e 02 	sts	0x022E, r1
		current_node = path[i + 1];			//update value of current_node when reached next node
    37bc:	d7 01       	movw	r26, r14
    37be:	14 96       	adiw	r26, 0x04	; 4
    37c0:	8d 91       	ld	r24, X+
    37c2:	9c 91       	ld	r25, X
    37c4:	15 97       	sbiw	r26, 0x05	; 5
    37c6:	90 93 87 09 	sts	0x0987, r25
    37ca:	80 93 86 09 	sts	0x0986, r24
    37ce:	0e 5f       	subi	r16, 0xFE	; 254
    37d0:	1f 4f       	sbci	r17, 0xFF	; 255
	int i;

	current_node = path[1];
	obstacle_found = 0;

	for (i = 0; i < path_length; i++)
    37d2:	80 91 78 02 	lds	r24, 0x0278
    37d6:	90 91 79 02 	lds	r25, 0x0279
    37da:	c8 17       	cp	r28, r24
    37dc:	d9 07       	cpc	r29, r25
    37de:	14 f4       	brge	.+4      	; 0x37e4 <__stack+0x15e5>
    37e0:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <travel_path+0x3e>
		obstacle_found = 0;
		current_node = path[i + 1];			//update value of current_node when reached next node
	}


}
    37e4:	df 91       	pop	r29
    37e6:	cf 91       	pop	r28
    37e8:	1f 91       	pop	r17
    37ea:	0f 91       	pop	r16
    37ec:	ff 90       	pop	r15
    37ee:	ef 90       	pop	r14
    37f0:	08 95       	ret

000037f2 <adjust_for_pickup>:
* Example Call: adjust_for_pickup();
*
*/
void adjust_for_pickup()
{
	if(current_node == 23 && path[path_counter-1] == 20)
    37f2:	80 91 86 09 	lds	r24, 0x0986
    37f6:	90 91 87 09 	lds	r25, 0x0987
    37fa:	87 31       	cpi	r24, 0x17	; 23
    37fc:	91 05       	cpc	r25, r1
    37fe:	09 f0       	breq	.+2      	; 0x3802 <adjust_for_pickup+0x10>
    3800:	52 c0       	rjmp	.+164    	; 0x38a6 <adjust_for_pickup+0xb4>
    3802:	e0 91 82 09 	lds	r30, 0x0982
    3806:	f0 91 83 09 	lds	r31, 0x0983
    380a:	ee 0f       	add	r30, r30
    380c:	ff 1f       	adc	r31, r31
    380e:	e8 5c       	subi	r30, 0xC8	; 200
    3810:	fd 4f       	sbci	r31, 0xFD	; 253
    3812:	20 81       	ld	r18, Z
    3814:	31 81       	ldd	r19, Z+1	; 0x01
    3816:	24 31       	cpi	r18, 0x14	; 20
    3818:	31 05       	cpc	r19, r1
    381a:	d9 f4       	brne	.+54     	; 0x3852 <adjust_for_pickup+0x60>
	{
		stop();
    381c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    3820:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3824:	86 e6       	ldi	r24, 0x66	; 102
    3826:	96 e6       	ldi	r25, 0x66	; 102
    3828:	a7 e1       	ldi	r26, 0x17	; 23
    382a:	81 50       	subi	r24, 0x01	; 1
    382c:	90 40       	sbci	r25, 0x00	; 0
    382e:	a0 40       	sbci	r26, 0x00	; 0
    3830:	e1 f7       	brne	.-8      	; 0x382a <adjust_for_pickup+0x38>
		_delay_ms(520);
		stop();
    3832:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3836:	8f ef       	ldi	r24, 0xFF	; 255
    3838:	9f e3       	ldi	r25, 0x3F	; 63
    383a:	ab e0       	ldi	r26, 0x0B	; 11
    383c:	81 50       	subi	r24, 0x01	; 1
    383e:	90 40       	sbci	r25, 0x00	; 0
    3840:	a0 40       	sbci	r26, 0x00	; 0
    3842:	e1 f7       	brne	.-8      	; 0x383c <adjust_for_pickup+0x4a>
    3844:	00 c0       	rjmp	.+0      	; 0x3846 <adjust_for_pickup+0x54>
    3846:	00 00       	nop
		_delay_ms(250);
		right_turn_wls();
    3848:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
		stop();
    384c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3850:	08 95       	ret
	}
	else if(current_node == 23 && path[path_counter-1] == 22)
    3852:	26 31       	cpi	r18, 0x16	; 22
    3854:	31 05       	cpc	r19, r1
    3856:	09 f0       	breq	.+2      	; 0x385a <adjust_for_pickup+0x68>
    3858:	be c0       	rjmp	.+380    	; 0x39d6 <adjust_for_pickup+0x1e4>
	{
		stop();
    385a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    385e:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3862:	8f ef       	ldi	r24, 0xFF	; 255
    3864:	9f ef       	ldi	r25, 0xFF	; 255
    3866:	a1 e1       	ldi	r26, 0x11	; 17
    3868:	81 50       	subi	r24, 0x01	; 1
    386a:	90 40       	sbci	r25, 0x00	; 0
    386c:	a0 40       	sbci	r26, 0x00	; 0
    386e:	e1 f7       	brne	.-8      	; 0x3868 <adjust_for_pickup+0x76>
    3870:	00 c0       	rjmp	.+0      	; 0x3872 <adjust_for_pickup+0x80>
    3872:	00 00       	nop
		_delay_ms(400);
		stop();
    3874:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3878:	8f ef       	ldi	r24, 0xFF	; 255
    387a:	9f e3       	ldi	r25, 0x3F	; 63
    387c:	ab e0       	ldi	r26, 0x0B	; 11
    387e:	81 50       	subi	r24, 0x01	; 1
    3880:	90 40       	sbci	r25, 0x00	; 0
    3882:	a0 40       	sbci	r26, 0x00	; 0
    3884:	e1 f7       	brne	.-8      	; 0x387e <adjust_for_pickup+0x8c>
    3886:	00 c0       	rjmp	.+0      	; 0x3888 <adjust_for_pickup+0x96>
    3888:	00 00       	nop
		_delay_ms(250);
		left_turn_wls();
    388a:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		stop();
    388e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3892:	8f ef       	ldi	r24, 0xFF	; 255
    3894:	9f e3       	ldi	r25, 0x3F	; 63
    3896:	ab e0       	ldi	r26, 0x0B	; 11
    3898:	81 50       	subi	r24, 0x01	; 1
    389a:	90 40       	sbci	r25, 0x00	; 0
    389c:	a0 40       	sbci	r26, 0x00	; 0
    389e:	e1 f7       	brne	.-8      	; 0x3898 <adjust_for_pickup+0xa6>
    38a0:	00 c0       	rjmp	.+0      	; 0x38a2 <adjust_for_pickup+0xb0>
    38a2:	00 00       	nop
    38a4:	08 95       	ret
		_delay_ms(250);
	}
	else if(current_node == 13 && path[path_counter-1] == 10)
    38a6:	8d 30       	cpi	r24, 0x0D	; 13
    38a8:	91 05       	cpc	r25, r1
    38aa:	09 f0       	breq	.+2      	; 0x38ae <adjust_for_pickup+0xbc>
    38ac:	5d c0       	rjmp	.+186    	; 0x3968 <adjust_for_pickup+0x176>
    38ae:	e0 91 82 09 	lds	r30, 0x0982
    38b2:	f0 91 83 09 	lds	r31, 0x0983
    38b6:	ee 0f       	add	r30, r30
    38b8:	ff 1f       	adc	r31, r31
    38ba:	e8 5c       	subi	r30, 0xC8	; 200
    38bc:	fd 4f       	sbci	r31, 0xFD	; 253
    38be:	20 81       	ld	r18, Z
    38c0:	31 81       	ldd	r19, Z+1	; 0x01
    38c2:	2a 30       	cpi	r18, 0x0A	; 10
    38c4:	31 05       	cpc	r19, r1
    38c6:	31 f5       	brne	.+76     	; 0x3914 <adjust_for_pickup+0x122>
	{
		stop();
    38c8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    38cc:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    38d0:	8f ef       	ldi	r24, 0xFF	; 255
    38d2:	9f ef       	ldi	r25, 0xFF	; 255
    38d4:	a1 e1       	ldi	r26, 0x11	; 17
    38d6:	81 50       	subi	r24, 0x01	; 1
    38d8:	90 40       	sbci	r25, 0x00	; 0
    38da:	a0 40       	sbci	r26, 0x00	; 0
    38dc:	e1 f7       	brne	.-8      	; 0x38d6 <adjust_for_pickup+0xe4>
    38de:	00 c0       	rjmp	.+0      	; 0x38e0 <adjust_for_pickup+0xee>
    38e0:	00 00       	nop
		_delay_ms(400);
		stop();
    38e2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    38e6:	8f ef       	ldi	r24, 0xFF	; 255
    38e8:	9f e3       	ldi	r25, 0x3F	; 63
    38ea:	ab e0       	ldi	r26, 0x0B	; 11
    38ec:	81 50       	subi	r24, 0x01	; 1
    38ee:	90 40       	sbci	r25, 0x00	; 0
    38f0:	a0 40       	sbci	r26, 0x00	; 0
    38f2:	e1 f7       	brne	.-8      	; 0x38ec <adjust_for_pickup+0xfa>
    38f4:	00 c0       	rjmp	.+0      	; 0x38f6 <adjust_for_pickup+0x104>
    38f6:	00 00       	nop
		_delay_ms(250);
		left_turn_wls();
    38f8:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		stop();
    38fc:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3900:	8f ef       	ldi	r24, 0xFF	; 255
    3902:	9f e3       	ldi	r25, 0x3F	; 63
    3904:	ab e0       	ldi	r26, 0x0B	; 11
    3906:	81 50       	subi	r24, 0x01	; 1
    3908:	90 40       	sbci	r25, 0x00	; 0
    390a:	a0 40       	sbci	r26, 0x00	; 0
    390c:	e1 f7       	brne	.-8      	; 0x3906 <adjust_for_pickup+0x114>
    390e:	00 c0       	rjmp	.+0      	; 0x3910 <adjust_for_pickup+0x11e>
    3910:	00 00       	nop
    3912:	08 95       	ret
		_delay_ms(250);
	}
	else if(current_node == 13 && path[path_counter-1] == 12)
    3914:	2c 30       	cpi	r18, 0x0C	; 12
    3916:	31 05       	cpc	r19, r1
    3918:	09 f0       	breq	.+2      	; 0x391c <adjust_for_pickup+0x12a>
    391a:	94 c0       	rjmp	.+296    	; 0x3a44 <adjust_for_pickup+0x252>
	{
		stop();
    391c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    3920:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3924:	8f ef       	ldi	r24, 0xFF	; 255
    3926:	9f e7       	ldi	r25, 0x7F	; 127
    3928:	ad e0       	ldi	r26, 0x0D	; 13
    392a:	81 50       	subi	r24, 0x01	; 1
    392c:	90 40       	sbci	r25, 0x00	; 0
    392e:	a0 40       	sbci	r26, 0x00	; 0
    3930:	e1 f7       	brne	.-8      	; 0x392a <adjust_for_pickup+0x138>
    3932:	00 c0       	rjmp	.+0      	; 0x3934 <adjust_for_pickup+0x142>
    3934:	00 00       	nop
		_delay_ms(300);
		stop();
    3936:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    393a:	8f ef       	ldi	r24, 0xFF	; 255
    393c:	9f e3       	ldi	r25, 0x3F	; 63
    393e:	ab e0       	ldi	r26, 0x0B	; 11
    3940:	81 50       	subi	r24, 0x01	; 1
    3942:	90 40       	sbci	r25, 0x00	; 0
    3944:	a0 40       	sbci	r26, 0x00	; 0
    3946:	e1 f7       	brne	.-8      	; 0x3940 <adjust_for_pickup+0x14e>
    3948:	00 c0       	rjmp	.+0      	; 0x394a <adjust_for_pickup+0x158>
    394a:	00 00       	nop
		_delay_ms(250);
		left_turn_wls();
    394c:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		stop();
    3950:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3954:	8f ef       	ldi	r24, 0xFF	; 255
    3956:	9f e3       	ldi	r25, 0x3F	; 63
    3958:	ab e0       	ldi	r26, 0x0B	; 11
    395a:	81 50       	subi	r24, 0x01	; 1
    395c:	90 40       	sbci	r25, 0x00	; 0
    395e:	a0 40       	sbci	r26, 0x00	; 0
    3960:	e1 f7       	brne	.-8      	; 0x395a <adjust_for_pickup+0x168>
    3962:	00 c0       	rjmp	.+0      	; 0x3964 <adjust_for_pickup+0x172>
    3964:	00 00       	nop
    3966:	08 95       	ret
		_delay_ms(250);
	}
	else if(current_node == 21 && path[path_counter-1] == 22)
    3968:	85 31       	cpi	r24, 0x15	; 21
    396a:	91 05       	cpc	r25, r1
    396c:	a1 f5       	brne	.+104    	; 0x39d6 <adjust_for_pickup+0x1e4>
    396e:	e0 91 82 09 	lds	r30, 0x0982
    3972:	f0 91 83 09 	lds	r31, 0x0983
    3976:	ee 0f       	add	r30, r30
    3978:	ff 1f       	adc	r31, r31
    397a:	e8 5c       	subi	r30, 0xC8	; 200
    397c:	fd 4f       	sbci	r31, 0xFD	; 253
    397e:	80 81       	ld	r24, Z
    3980:	91 81       	ldd	r25, Z+1	; 0x01
    3982:	86 31       	cpi	r24, 0x16	; 22
    3984:	91 05       	cpc	r25, r1
    3986:	09 f0       	breq	.+2      	; 0x398a <adjust_for_pickup+0x198>
    3988:	bd c0       	rjmp	.+378    	; 0x3b04 <adjust_for_pickup+0x312>
	{
		stop();
    398a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    398e:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3992:	8f ef       	ldi	r24, 0xFF	; 255
    3994:	9f e7       	ldi	r25, 0x7F	; 127
    3996:	ad e0       	ldi	r26, 0x0D	; 13
    3998:	81 50       	subi	r24, 0x01	; 1
    399a:	90 40       	sbci	r25, 0x00	; 0
    399c:	a0 40       	sbci	r26, 0x00	; 0
    399e:	e1 f7       	brne	.-8      	; 0x3998 <adjust_for_pickup+0x1a6>
    39a0:	00 c0       	rjmp	.+0      	; 0x39a2 <adjust_for_pickup+0x1b0>
    39a2:	00 00       	nop
		_delay_ms(300);
		stop();
    39a4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    39a8:	8f ef       	ldi	r24, 0xFF	; 255
    39aa:	9f e3       	ldi	r25, 0x3F	; 63
    39ac:	ab e0       	ldi	r26, 0x0B	; 11
    39ae:	81 50       	subi	r24, 0x01	; 1
    39b0:	90 40       	sbci	r25, 0x00	; 0
    39b2:	a0 40       	sbci	r26, 0x00	; 0
    39b4:	e1 f7       	brne	.-8      	; 0x39ae <adjust_for_pickup+0x1bc>
    39b6:	00 c0       	rjmp	.+0      	; 0x39b8 <adjust_for_pickup+0x1c6>
    39b8:	00 00       	nop
		_delay_ms(250);
		left_turn_wls();
    39ba:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		stop();
    39be:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    39c2:	8f ef       	ldi	r24, 0xFF	; 255
    39c4:	9f e3       	ldi	r25, 0x3F	; 63
    39c6:	ab e0       	ldi	r26, 0x0B	; 11
    39c8:	81 50       	subi	r24, 0x01	; 1
    39ca:	90 40       	sbci	r25, 0x00	; 0
    39cc:	a0 40       	sbci	r26, 0x00	; 0
    39ce:	e1 f7       	brne	.-8      	; 0x39c8 <adjust_for_pickup+0x1d6>
    39d0:	00 c0       	rjmp	.+0      	; 0x39d2 <adjust_for_pickup+0x1e0>
    39d2:	00 00       	nop
    39d4:	08 95       	ret
		_delay_ms(250);
	}
	else if(current_node == 12 && path[path_counter-1] == 11)
    39d6:	8c 30       	cpi	r24, 0x0C	; 12
    39d8:	91 05       	cpc	r25, r1
    39da:	a1 f5       	brne	.+104    	; 0x3a44 <adjust_for_pickup+0x252>
    39dc:	e0 91 82 09 	lds	r30, 0x0982
    39e0:	f0 91 83 09 	lds	r31, 0x0983
    39e4:	ee 0f       	add	r30, r30
    39e6:	ff 1f       	adc	r31, r31
    39e8:	e8 5c       	subi	r30, 0xC8	; 200
    39ea:	fd 4f       	sbci	r31, 0xFD	; 253
    39ec:	80 81       	ld	r24, Z
    39ee:	91 81       	ldd	r25, Z+1	; 0x01
    39f0:	8b 30       	cpi	r24, 0x0B	; 11
    39f2:	91 05       	cpc	r25, r1
    39f4:	09 f0       	breq	.+2      	; 0x39f8 <adjust_for_pickup+0x206>
    39f6:	86 c0       	rjmp	.+268    	; 0x3b04 <adjust_for_pickup+0x312>
	{
		stop();
    39f8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    39fc:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3a00:	8f ef       	ldi	r24, 0xFF	; 255
    3a02:	9f e7       	ldi	r25, 0x7F	; 127
    3a04:	ad e0       	ldi	r26, 0x0D	; 13
    3a06:	81 50       	subi	r24, 0x01	; 1
    3a08:	90 40       	sbci	r25, 0x00	; 0
    3a0a:	a0 40       	sbci	r26, 0x00	; 0
    3a0c:	e1 f7       	brne	.-8      	; 0x3a06 <adjust_for_pickup+0x214>
    3a0e:	00 c0       	rjmp	.+0      	; 0x3a10 <adjust_for_pickup+0x21e>
    3a10:	00 00       	nop
		_delay_ms(300);
		stop();
    3a12:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3a16:	8f ef       	ldi	r24, 0xFF	; 255
    3a18:	9f e3       	ldi	r25, 0x3F	; 63
    3a1a:	ab e0       	ldi	r26, 0x0B	; 11
    3a1c:	81 50       	subi	r24, 0x01	; 1
    3a1e:	90 40       	sbci	r25, 0x00	; 0
    3a20:	a0 40       	sbci	r26, 0x00	; 0
    3a22:	e1 f7       	brne	.-8      	; 0x3a1c <adjust_for_pickup+0x22a>
    3a24:	00 c0       	rjmp	.+0      	; 0x3a26 <adjust_for_pickup+0x234>
    3a26:	00 00       	nop
		_delay_ms(250);
		left_turn_wls();
    3a28:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		stop();
    3a2c:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3a30:	8f ef       	ldi	r24, 0xFF	; 255
    3a32:	9f e3       	ldi	r25, 0x3F	; 63
    3a34:	ab e0       	ldi	r26, 0x0B	; 11
    3a36:	81 50       	subi	r24, 0x01	; 1
    3a38:	90 40       	sbci	r25, 0x00	; 0
    3a3a:	a0 40       	sbci	r26, 0x00	; 0
    3a3c:	e1 f7       	brne	.-8      	; 0x3a36 <adjust_for_pickup+0x244>
    3a3e:	00 c0       	rjmp	.+0      	; 0x3a40 <adjust_for_pickup+0x24e>
    3a40:	00 00       	nop
    3a42:	08 95       	ret
		_delay_ms(250);
	}
	else if(current_node == 11 && path[path_counter-1] == 3)
    3a44:	8b 30       	cpi	r24, 0x0B	; 11
    3a46:	91 05       	cpc	r25, r1
    3a48:	09 f0       	breq	.+2      	; 0x3a4c <adjust_for_pickup+0x25a>
    3a4a:	5c c0       	rjmp	.+184    	; 0x3b04 <adjust_for_pickup+0x312>
    3a4c:	e0 91 82 09 	lds	r30, 0x0982
    3a50:	f0 91 83 09 	lds	r31, 0x0983
    3a54:	ee 0f       	add	r30, r30
    3a56:	ff 1f       	adc	r31, r31
    3a58:	e8 5c       	subi	r30, 0xC8	; 200
    3a5a:	fd 4f       	sbci	r31, 0xFD	; 253
    3a5c:	80 81       	ld	r24, Z
    3a5e:	91 81       	ldd	r25, Z+1	; 0x01
    3a60:	83 30       	cpi	r24, 0x03	; 3
    3a62:	91 05       	cpc	r25, r1
    3a64:	31 f5       	brne	.+76     	; 0x3ab2 <adjust_for_pickup+0x2c0>
	{
		stop();
    3a66:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    3a6a:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3a6e:	8f ef       	ldi	r24, 0xFF	; 255
    3a70:	9f e7       	ldi	r25, 0x7F	; 127
    3a72:	ad e0       	ldi	r26, 0x0D	; 13
    3a74:	81 50       	subi	r24, 0x01	; 1
    3a76:	90 40       	sbci	r25, 0x00	; 0
    3a78:	a0 40       	sbci	r26, 0x00	; 0
    3a7a:	e1 f7       	brne	.-8      	; 0x3a74 <adjust_for_pickup+0x282>
    3a7c:	00 c0       	rjmp	.+0      	; 0x3a7e <adjust_for_pickup+0x28c>
    3a7e:	00 00       	nop
		_delay_ms(300);
		stop();
    3a80:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3a84:	8f ef       	ldi	r24, 0xFF	; 255
    3a86:	9f e3       	ldi	r25, 0x3F	; 63
    3a88:	ab e0       	ldi	r26, 0x0B	; 11
    3a8a:	81 50       	subi	r24, 0x01	; 1
    3a8c:	90 40       	sbci	r25, 0x00	; 0
    3a8e:	a0 40       	sbci	r26, 0x00	; 0
    3a90:	e1 f7       	brne	.-8      	; 0x3a8a <adjust_for_pickup+0x298>
    3a92:	00 c0       	rjmp	.+0      	; 0x3a94 <adjust_for_pickup+0x2a2>
    3a94:	00 00       	nop
		_delay_ms(250);
		left_turn_wls();
    3a96:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		stop();
    3a9a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3a9e:	8f ef       	ldi	r24, 0xFF	; 255
    3aa0:	9f e3       	ldi	r25, 0x3F	; 63
    3aa2:	ab e0       	ldi	r26, 0x0B	; 11
    3aa4:	81 50       	subi	r24, 0x01	; 1
    3aa6:	90 40       	sbci	r25, 0x00	; 0
    3aa8:	a0 40       	sbci	r26, 0x00	; 0
    3aaa:	e1 f7       	brne	.-8      	; 0x3aa4 <adjust_for_pickup+0x2b2>
    3aac:	00 c0       	rjmp	.+0      	; 0x3aae <adjust_for_pickup+0x2bc>
    3aae:	00 00       	nop
    3ab0:	08 95       	ret
		_delay_ms(250);
	}
	else if(current_node == 11 && path[path_counter-1] == 12)
    3ab2:	8c 30       	cpi	r24, 0x0C	; 12
    3ab4:	91 05       	cpc	r25, r1
    3ab6:	31 f5       	brne	.+76     	; 0x3b04 <adjust_for_pickup+0x312>
	{
		stop();
    3ab8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    3abc:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3ac0:	8f ef       	ldi	r24, 0xFF	; 255
    3ac2:	9f e7       	ldi	r25, 0x7F	; 127
    3ac4:	ad e0       	ldi	r26, 0x0D	; 13
    3ac6:	81 50       	subi	r24, 0x01	; 1
    3ac8:	90 40       	sbci	r25, 0x00	; 0
    3aca:	a0 40       	sbci	r26, 0x00	; 0
    3acc:	e1 f7       	brne	.-8      	; 0x3ac6 <adjust_for_pickup+0x2d4>
    3ace:	00 c0       	rjmp	.+0      	; 0x3ad0 <adjust_for_pickup+0x2de>
    3ad0:	00 00       	nop
		_delay_ms(300);
		stop();
    3ad2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3ad6:	8f ef       	ldi	r24, 0xFF	; 255
    3ad8:	9f e3       	ldi	r25, 0x3F	; 63
    3ada:	ab e0       	ldi	r26, 0x0B	; 11
    3adc:	81 50       	subi	r24, 0x01	; 1
    3ade:	90 40       	sbci	r25, 0x00	; 0
    3ae0:	a0 40       	sbci	r26, 0x00	; 0
    3ae2:	e1 f7       	brne	.-8      	; 0x3adc <adjust_for_pickup+0x2ea>
    3ae4:	00 c0       	rjmp	.+0      	; 0x3ae6 <adjust_for_pickup+0x2f4>
    3ae6:	00 00       	nop
		_delay_ms(250);
		right_turn_wls();
    3ae8:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
		stop();
    3aec:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3af0:	8f ef       	ldi	r24, 0xFF	; 255
    3af2:	9f e3       	ldi	r25, 0x3F	; 63
    3af4:	ab e0       	ldi	r26, 0x0B	; 11
    3af6:	81 50       	subi	r24, 0x01	; 1
    3af8:	90 40       	sbci	r25, 0x00	; 0
    3afa:	a0 40       	sbci	r26, 0x00	; 0
    3afc:	e1 f7       	brne	.-8      	; 0x3af6 <adjust_for_pickup+0x304>
    3afe:	00 c0       	rjmp	.+0      	; 0x3b00 <adjust_for_pickup+0x30e>
    3b00:	00 00       	nop
    3b02:	08 95       	ret
		_delay_ms(250);
	}
	else
	{
		stop();
    3b04:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    3b08:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3b0c:	8f ef       	ldi	r24, 0xFF	; 255
    3b0e:	9f e7       	ldi	r25, 0x7F	; 127
    3b10:	ad e0       	ldi	r26, 0x0D	; 13
    3b12:	81 50       	subi	r24, 0x01	; 1
    3b14:	90 40       	sbci	r25, 0x00	; 0
    3b16:	a0 40       	sbci	r26, 0x00	; 0
    3b18:	e1 f7       	brne	.-8      	; 0x3b12 <adjust_for_pickup+0x320>
    3b1a:	00 c0       	rjmp	.+0      	; 0x3b1c <adjust_for_pickup+0x32a>
    3b1c:	00 00       	nop
		_delay_ms(300);
		stop();
    3b1e:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3b22:	8f ef       	ldi	r24, 0xFF	; 255
    3b24:	9f e3       	ldi	r25, 0x3F	; 63
    3b26:	ab e0       	ldi	r26, 0x0B	; 11
    3b28:	81 50       	subi	r24, 0x01	; 1
    3b2a:	90 40       	sbci	r25, 0x00	; 0
    3b2c:	a0 40       	sbci	r26, 0x00	; 0
    3b2e:	e1 f7       	brne	.-8      	; 0x3b28 <adjust_for_pickup+0x336>
    3b30:	00 c0       	rjmp	.+0      	; 0x3b32 <adjust_for_pickup+0x340>
    3b32:	00 00       	nop
    3b34:	08 95       	ret

00003b36 <adjust_for_place>:
* Example Call: adjust_for_place();
*
*/
void adjust_for_place()
{
	if(current_node == 6)
    3b36:	80 91 86 09 	lds	r24, 0x0986
    3b3a:	90 91 87 09 	lds	r25, 0x0987
    3b3e:	86 30       	cpi	r24, 0x06	; 6
    3b40:	91 05       	cpc	r25, r1
    3b42:	21 f5       	brne	.+72     	; 0x3b8c <adjust_for_place+0x56>
	{
		stop();
    3b44:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    3b48:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3b4c:	86 e6       	ldi	r24, 0x66	; 102
    3b4e:	96 ee       	ldi	r25, 0xE6	; 230
    3b50:	a9 e0       	ldi	r26, 0x09	; 9
    3b52:	81 50       	subi	r24, 0x01	; 1
    3b54:	90 40       	sbci	r25, 0x00	; 0
    3b56:	a0 40       	sbci	r26, 0x00	; 0
    3b58:	e1 f7       	brne	.-8      	; 0x3b52 <adjust_for_place+0x1c>
		_delay_ms(220);
		stop();
    3b5a:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3b5e:	8f ef       	ldi	r24, 0xFF	; 255
    3b60:	9f e7       	ldi	r25, 0x7F	; 127
    3b62:	a4 e0       	ldi	r26, 0x04	; 4
    3b64:	81 50       	subi	r24, 0x01	; 1
    3b66:	90 40       	sbci	r25, 0x00	; 0
    3b68:	a0 40       	sbci	r26, 0x00	; 0
    3b6a:	e1 f7       	brne	.-8      	; 0x3b64 <adjust_for_place+0x2e>
    3b6c:	00 c0       	rjmp	.+0      	; 0x3b6e <adjust_for_place+0x38>
    3b6e:	00 00       	nop
		_delay_ms(100);
		left_turn_wls();
    3b70:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		stop();
    3b74:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3b78:	8f ef       	ldi	r24, 0xFF	; 255
    3b7a:	9f e7       	ldi	r25, 0x7F	; 127
    3b7c:	a4 e0       	ldi	r26, 0x04	; 4
    3b7e:	81 50       	subi	r24, 0x01	; 1
    3b80:	90 40       	sbci	r25, 0x00	; 0
    3b82:	a0 40       	sbci	r26, 0x00	; 0
    3b84:	e1 f7       	brne	.-8      	; 0x3b7e <adjust_for_place+0x48>
    3b86:	00 c0       	rjmp	.+0      	; 0x3b88 <adjust_for_place+0x52>
    3b88:	00 00       	nop
    3b8a:	08 95       	ret
		_delay_ms(100);
	}
	else if(current_node == 16)
    3b8c:	80 31       	cpi	r24, 0x10	; 16
    3b8e:	91 05       	cpc	r25, r1
    3b90:	29 f5       	brne	.+74     	; 0x3bdc <adjust_for_place+0xa6>
	{
		stop();
    3b92:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
		forward();
    3b96:	0e 94 37 05 	call	0xa6e	; 0xa6e <forward>
    3b9a:	82 e3       	ldi	r24, 0x32	; 50
    3b9c:	93 eb       	ldi	r25, 0xB3	; 179
    3b9e:	ab e0       	ldi	r26, 0x0B	; 11
    3ba0:	81 50       	subi	r24, 0x01	; 1
    3ba2:	90 40       	sbci	r25, 0x00	; 0
    3ba4:	a0 40       	sbci	r26, 0x00	; 0
    3ba6:	e1 f7       	brne	.-8      	; 0x3ba0 <adjust_for_place+0x6a>
    3ba8:	00 c0       	rjmp	.+0      	; 0x3baa <adjust_for_place+0x74>
    3baa:	00 c0       	rjmp	.+0      	; 0x3bac <adjust_for_place+0x76>
		_delay_ms(260);
		stop();
    3bac:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3bb0:	8f ef       	ldi	r24, 0xFF	; 255
    3bb2:	9f e7       	ldi	r25, 0x7F	; 127
    3bb4:	a4 e0       	ldi	r26, 0x04	; 4
    3bb6:	81 50       	subi	r24, 0x01	; 1
    3bb8:	90 40       	sbci	r25, 0x00	; 0
    3bba:	a0 40       	sbci	r26, 0x00	; 0
    3bbc:	e1 f7       	brne	.-8      	; 0x3bb6 <adjust_for_place+0x80>
    3bbe:	00 c0       	rjmp	.+0      	; 0x3bc0 <adjust_for_place+0x8a>
    3bc0:	00 00       	nop
		_delay_ms(100);
		left_turn_wls();
    3bc2:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		stop();
    3bc6:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3bca:	8f ef       	ldi	r24, 0xFF	; 255
    3bcc:	9f e7       	ldi	r25, 0x7F	; 127
    3bce:	a4 e0       	ldi	r26, 0x04	; 4
    3bd0:	81 50       	subi	r24, 0x01	; 1
    3bd2:	90 40       	sbci	r25, 0x00	; 0
    3bd4:	a0 40       	sbci	r26, 0x00	; 0
    3bd6:	e1 f7       	brne	.-8      	; 0x3bd0 <adjust_for_place+0x9a>
    3bd8:	00 c0       	rjmp	.+0      	; 0x3bda <adjust_for_place+0xa4>
    3bda:	00 00       	nop
    3bdc:	08 95       	ret

00003bde <adjust_after_pickup>:
    3bde:	8f ef       	ldi	r24, 0xFF	; 255
    3be0:	9f e7       	ldi	r25, 0x7F	; 127
    3be2:	a4 e0       	ldi	r26, 0x04	; 4
    3be4:	81 50       	subi	r24, 0x01	; 1
    3be6:	90 40       	sbci	r25, 0x00	; 0
    3be8:	a0 40       	sbci	r26, 0x00	; 0
    3bea:	e1 f7       	brne	.-8      	; 0x3be4 <adjust_after_pickup+0x6>
    3bec:	00 c0       	rjmp	.+0      	; 0x3bee <adjust_after_pickup+0x10>
    3bee:	00 00       	nop
*
*/
void adjust_after_pickup()
{
	_delay_ms(100);
	backward();
    3bf0:	0e 94 3c 05 	call	0xa78	; 0xa78 <backward>
    3bf4:	8f ef       	ldi	r24, 0xFF	; 255
    3bf6:	9f e7       	ldi	r25, 0x7F	; 127
    3bf8:	ad e0       	ldi	r26, 0x0D	; 13
    3bfa:	81 50       	subi	r24, 0x01	; 1
    3bfc:	90 40       	sbci	r25, 0x00	; 0
    3bfe:	a0 40       	sbci	r26, 0x00	; 0
    3c00:	e1 f7       	brne	.-8      	; 0x3bfa <adjust_after_pickup+0x1c>
    3c02:	00 c0       	rjmp	.+0      	; 0x3c04 <adjust_after_pickup+0x26>
    3c04:	00 00       	nop
	_delay_ms(300);
	stop();
    3c06:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3c0a:	8f ef       	ldi	r24, 0xFF	; 255
    3c0c:	9f e7       	ldi	r25, 0x7F	; 127
    3c0e:	a4 e0       	ldi	r26, 0x04	; 4
    3c10:	81 50       	subi	r24, 0x01	; 1
    3c12:	90 40       	sbci	r25, 0x00	; 0
    3c14:	a0 40       	sbci	r26, 0x00	; 0
    3c16:	e1 f7       	brne	.-8      	; 0x3c10 <adjust_after_pickup+0x32>
    3c18:	00 c0       	rjmp	.+0      	; 0x3c1a <adjust_after_pickup+0x3c>
    3c1a:	00 00       	nop
	_delay_ms(100);
}
    3c1c:	08 95       	ret

00003c1e <adjust_after_place>:
    3c1e:	8f ef       	ldi	r24, 0xFF	; 255
    3c20:	9f e7       	ldi	r25, 0x7F	; 127
    3c22:	a4 e0       	ldi	r26, 0x04	; 4
    3c24:	81 50       	subi	r24, 0x01	; 1
    3c26:	90 40       	sbci	r25, 0x00	; 0
    3c28:	a0 40       	sbci	r26, 0x00	; 0
    3c2a:	e1 f7       	brne	.-8      	; 0x3c24 <adjust_after_place+0x6>
    3c2c:	00 c0       	rjmp	.+0      	; 0x3c2e <adjust_after_place+0x10>
    3c2e:	00 00       	nop
*
*/
void adjust_after_place()
{
	_delay_ms(100);
	backward();
    3c30:	0e 94 3c 05 	call	0xa78	; 0xa78 <backward>
    3c34:	8f ef       	ldi	r24, 0xFF	; 255
    3c36:	9f e7       	ldi	r25, 0x7F	; 127
    3c38:	ad e0       	ldi	r26, 0x0D	; 13
    3c3a:	81 50       	subi	r24, 0x01	; 1
    3c3c:	90 40       	sbci	r25, 0x00	; 0
    3c3e:	a0 40       	sbci	r26, 0x00	; 0
    3c40:	e1 f7       	brne	.-8      	; 0x3c3a <adjust_after_place+0x1c>
    3c42:	00 c0       	rjmp	.+0      	; 0x3c44 <adjust_after_place+0x26>
    3c44:	00 00       	nop
	_delay_ms(300);
	stop();
    3c46:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    3c4a:	8f ef       	ldi	r24, 0xFF	; 255
    3c4c:	9f e7       	ldi	r25, 0x7F	; 127
    3c4e:	a4 e0       	ldi	r26, 0x04	; 4
    3c50:	81 50       	subi	r24, 0x01	; 1
    3c52:	90 40       	sbci	r25, 0x00	; 0
    3c54:	a0 40       	sbci	r26, 0x00	; 0
    3c56:	e1 f7       	brne	.-8      	; 0x3c50 <adjust_after_place+0x32>
    3c58:	00 c0       	rjmp	.+0      	; 0x3c5a <adjust_after_place+0x3c>
    3c5a:	00 00       	nop
	_delay_ms(100);
}
    3c5c:	08 95       	ret

00003c5e <check_nut>:
*
*/
void check_nut()
{
	char c='W';
	current_nut_color = 'W';
    3c5e:	87 e5       	ldi	r24, 0x57	; 87
    3c60:	80 93 2a 02 	sts	0x022A, r24

	if (current_node == 11)
    3c64:	80 91 86 09 	lds	r24, 0x0986
    3c68:	90 91 87 09 	lds	r25, 0x0987
    3c6c:	8b 30       	cpi	r24, 0x0B	; 11
    3c6e:	91 05       	cpc	r25, r1
    3c70:	09 f0       	breq	.+2      	; 0x3c74 <check_nut+0x16>
    3c72:	4d c0       	rjmp	.+154    	; 0x3d0e <check_nut+0xb0>
	{
		
		if (path[path_length - 1] == 3)
    3c74:	e0 91 78 02 	lds	r30, 0x0278
    3c78:	f0 91 79 02 	lds	r31, 0x0279
    3c7c:	ee 0f       	add	r30, r30
    3c7e:	ff 1f       	adc	r31, r31
    3c80:	e8 5c       	subi	r30, 0xC8	; 200
    3c82:	fd 4f       	sbci	r31, 0xFD	; 253
    3c84:	80 81       	ld	r24, Z
    3c86:	91 81       	ldd	r25, Z+1	; 0x01
    3c88:	83 30       	cpi	r24, 0x03	; 3
    3c8a:	91 05       	cpc	r25, r1
    3c8c:	71 f4       	brne	.+28     	; 0x3caa <check_nut+0x4c>
		{
			sharp_left_turn_wls();
    3c8e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
    3c92:	8f ef       	ldi	r24, 0xFF	; 255
    3c94:	9f e7       	ldi	r25, 0x7F	; 127
    3c96:	a4 e0       	ldi	r26, 0x04	; 4
    3c98:	81 50       	subi	r24, 0x01	; 1
    3c9a:	90 40       	sbci	r25, 0x00	; 0
    3c9c:	a0 40       	sbci	r26, 0x00	; 0
    3c9e:	e1 f7       	brne	.-8      	; 0x3c98 <check_nut+0x3a>
    3ca0:	00 c0       	rjmp	.+0      	; 0x3ca2 <check_nut+0x44>
    3ca2:	00 00       	nop
			_delay_ms(100);	
			left_turn_wls();
    3ca4:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
    3ca8:	05 c0       	rjmp	.+10     	; 0x3cb4 <check_nut+0x56>
		}			
		else if (path[path_length - 1] == 12)
    3caa:	8c 30       	cpi	r24, 0x0C	; 12
    3cac:	91 05       	cpc	r25, r1
    3cae:	11 f4       	brne	.+4      	; 0x3cb4 <check_nut+0x56>
			sharp_right_turn_wls();
    3cb0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
    3cb4:	8f ef       	ldi	r24, 0xFF	; 255
    3cb6:	9f e3       	ldi	r25, 0x3F	; 63
    3cb8:	ab e0       	ldi	r26, 0x0B	; 11
    3cba:	81 50       	subi	r24, 0x01	; 1
    3cbc:	90 40       	sbci	r25, 0x00	; 0
    3cbe:	a0 40       	sbci	r26, 0x00	; 0
    3cc0:	e1 f7       	brne	.-8      	; 0x3cba <check_nut+0x5c>
    3cc2:	00 c0       	rjmp	.+0      	; 0x3cc4 <check_nut+0x66>
    3cc4:	00 00       	nop
			
		_delay_ms(250);
			
		adjust_for_pickup();
    3cc6:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <adjust_for_pickup>
		
		left_turn_wls();
    3cca:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>

		/*_delay_ms(1000);
		ckeck_color();
		_delay_ms(1000);*/
		//servo_color_pos();
		c=check_color();
    3cce:	0e 94 1c 03 	call	0x638	; 0x638 <check_color>
		 if ( c=='R')
    3cd2:	82 35       	cpi	r24, 0x52	; 82
    3cd4:	39 f4       	brne	.+14     	; 0x3ce4 <check_nut+0x86>
		{
			current_nut_color = 'R';
    3cd6:	80 93 2a 02 	sts	0x022A, r24
			//printf("\ncolor = %c", current_nut_color);
			pick();
    3cda:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			
			adjust_after_pickup();
    3cde:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3ce2:	08 95       	ret
		}
		else if ( c=='G')
    3ce4:	87 34       	cpi	r24, 0x47	; 71
    3ce6:	39 f4       	brne	.+14     	; 0x3cf6 <check_nut+0x98>
		{
			current_nut_color = 'G';
    3ce8:	80 93 2a 02 	sts	0x022A, r24
			//printf("\ncolor = %c", current_nut_color);
			pick();
    3cec:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			
			adjust_after_pickup();
    3cf0:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3cf4:	08 95       	ret
		}
		else if ( c=='B' )
    3cf6:	82 34       	cpi	r24, 0x42	; 66
    3cf8:	39 f4       	brne	.+14     	; 0x3d08 <check_nut+0xaa>
		{
			current_nut_color = 'B';
    3cfa:	80 93 2a 02 	sts	0x022A, r24
			pick();
    3cfe:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			adjust_after_pickup();
    3d02:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3d06:	08 95       	ret
		}
		else
		{
			adjust_after_pickup();
    3d08:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3d0c:	08 95       	ret
		}
	}

	else if (current_node == 12)
    3d0e:	8c 30       	cpi	r24, 0x0C	; 12
    3d10:	91 05       	cpc	r25, r1
    3d12:	b9 f5       	brne	.+110    	; 0x3d82 <check_nut+0x124>
	{
		if (path[path_length - 1] == 11)
    3d14:	e0 91 78 02 	lds	r30, 0x0278
    3d18:	f0 91 79 02 	lds	r31, 0x0279
    3d1c:	ee 0f       	add	r30, r30
    3d1e:	ff 1f       	adc	r31, r31
    3d20:	e8 5c       	subi	r30, 0xC8	; 200
    3d22:	fd 4f       	sbci	r31, 0xFD	; 253
    3d24:	80 81       	ld	r24, Z
    3d26:	91 81       	ldd	r25, Z+1	; 0x01
    3d28:	8b 30       	cpi	r24, 0x0B	; 11
    3d2a:	91 05       	cpc	r25, r1
    3d2c:	19 f4       	brne	.+6      	; 0x3d34 <check_nut+0xd6>
			sharp_left_turn_wls();	
    3d2e:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
    3d32:	05 c0       	rjmp	.+10     	; 0x3d3e <check_nut+0xe0>
		else if(path[path_length - 1] == 13)			
    3d34:	8d 30       	cpi	r24, 0x0D	; 13
    3d36:	91 05       	cpc	r25, r1
    3d38:	11 f4       	brne	.+4      	; 0x3d3e <check_nut+0xe0>
			sharp_right_turn_wls();	
    3d3a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
			
		adjust_for_pickup();
    3d3e:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <adjust_for_pickup>

		
		c=check_color();
    3d42:	0e 94 1c 03 	call	0x638	; 0x638 <check_color>
		if (c=='R')
    3d46:	82 35       	cpi	r24, 0x52	; 82
    3d48:	39 f4       	brne	.+14     	; 0x3d58 <check_nut+0xfa>
		{
			current_nut_color = 'R';
    3d4a:	80 93 2a 02 	sts	0x022A, r24
			//printf("\ncolor = %c", current_nut_color);
			pick();
    3d4e:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			
			adjust_after_pickup();
    3d52:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3d56:	08 95       	ret
			
			
		}
		else if (c=='G')
    3d58:	87 34       	cpi	r24, 0x47	; 71
    3d5a:	39 f4       	brne	.+14     	; 0x3d6a <check_nut+0x10c>
		{
			current_nut_color = 'G';
    3d5c:	80 93 2a 02 	sts	0x022A, r24
			//printf("\ncolor = %c", current_nut_color);
			pick();
    3d60:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			
			adjust_after_pickup();
    3d64:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3d68:	08 95       	ret
		}
		else if ( c=='B' )
    3d6a:	82 34       	cpi	r24, 0x42	; 66
    3d6c:	39 f4       	brne	.+14     	; 0x3d7c <check_nut+0x11e>
		{
			current_nut_color = 'B';
    3d6e:	80 93 2a 02 	sts	0x022A, r24
			pick();
    3d72:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			adjust_after_pickup();
    3d76:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3d7a:	08 95       	ret
		}
		else
		{
			adjust_after_pickup();
    3d7c:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3d80:	08 95       	ret
		}
	}

	else if (current_node == 13)
    3d82:	8d 30       	cpi	r24, 0x0D	; 13
    3d84:	91 05       	cpc	r25, r1
    3d86:	b9 f5       	brne	.+110    	; 0x3df6 <check_nut+0x198>
	{
		if (path[path_length - 1] == 12)
    3d88:	e0 91 78 02 	lds	r30, 0x0278
    3d8c:	f0 91 79 02 	lds	r31, 0x0279
    3d90:	ee 0f       	add	r30, r30
    3d92:	ff 1f       	adc	r31, r31
    3d94:	e8 5c       	subi	r30, 0xC8	; 200
    3d96:	fd 4f       	sbci	r31, 0xFD	; 253
    3d98:	80 81       	ld	r24, Z
    3d9a:	91 81       	ldd	r25, Z+1	; 0x01
    3d9c:	8c 30       	cpi	r24, 0x0C	; 12
    3d9e:	91 05       	cpc	r25, r1
    3da0:	19 f4       	brne	.+6      	; 0x3da8 <check_nut+0x14a>
			sharp_left_turn_wls();
    3da2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
    3da6:	05 c0       	rjmp	.+10     	; 0x3db2 <check_nut+0x154>
		else if(path[path_length - 1] == 10)
    3da8:	8a 30       	cpi	r24, 0x0A	; 10
    3daa:	91 05       	cpc	r25, r1
    3dac:	11 f4       	brne	.+4      	; 0x3db2 <check_nut+0x154>
			left_turn_wls();
    3dae:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
		
		adjust_for_pickup();
    3db2:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <adjust_for_pickup>
		/*_delay_ms(1000);
		ckeck_color();
		_delay_ms(1000);*/

		//servo_color_pos();
		c=check_color();
    3db6:	0e 94 1c 03 	call	0x638	; 0x638 <check_color>
		
		if (c=='R')
    3dba:	82 35       	cpi	r24, 0x52	; 82
    3dbc:	39 f4       	brne	.+14     	; 0x3dcc <check_nut+0x16e>
		{
			current_nut_color = 'R';
    3dbe:	80 93 2a 02 	sts	0x022A, r24
			//printf("\ncolor = %c", current_nut_color);
			pick();
    3dc2:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			
			adjust_after_pickup();
    3dc6:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3dca:	08 95       	ret
		}
		else if (c=='G')
    3dcc:	87 34       	cpi	r24, 0x47	; 71
    3dce:	39 f4       	brne	.+14     	; 0x3dde <check_nut+0x180>
		{
			current_nut_color = 'G';
    3dd0:	80 93 2a 02 	sts	0x022A, r24
			//printf("\ncolor = %c", current_nut_color);
			pick();
    3dd4:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			
			adjust_after_pickup();
    3dd8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3ddc:	08 95       	ret
		}
		else if ( c=='B' )
    3dde:	82 34       	cpi	r24, 0x42	; 66
    3de0:	39 f4       	brne	.+14     	; 0x3df0 <check_nut+0x192>
		{
			current_nut_color = 'B';
    3de2:	80 93 2a 02 	sts	0x022A, r24
			pick();
    3de6:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			adjust_after_pickup();
    3dea:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3dee:	08 95       	ret
		}
		else
		{
			adjust_after_pickup();
    3df0:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3df4:	08 95       	ret
		}
	}

	else if (current_node == 21 )
    3df6:	85 31       	cpi	r24, 0x15	; 21
    3df8:	91 05       	cpc	r25, r1
    3dfa:	a1 f5       	brne	.+104    	; 0x3e64 <check_nut+0x206>
	{
		if (path[path_length - 1] == 3)
    3dfc:	e0 91 78 02 	lds	r30, 0x0278
    3e00:	f0 91 79 02 	lds	r31, 0x0279
    3e04:	ee 0f       	add	r30, r30
    3e06:	ff 1f       	adc	r31, r31
    3e08:	e8 5c       	subi	r30, 0xC8	; 200
    3e0a:	fd 4f       	sbci	r31, 0xFD	; 253
    3e0c:	80 81       	ld	r24, Z
    3e0e:	91 81       	ldd	r25, Z+1	; 0x01
    3e10:	83 30       	cpi	r24, 0x03	; 3
    3e12:	91 05       	cpc	r25, r1
    3e14:	19 f4       	brne	.+6      	; 0x3e1c <check_nut+0x1be>
			sharp_right_turn_wls();
    3e16:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
    3e1a:	02 c0       	rjmp	.+4      	; 0x3e20 <check_nut+0x1c2>
		else
			sharp_left_turn_wls();
    3e1c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
		
		adjust_for_pickup();
    3e20:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <adjust_for_pickup>

		/*_delay_ms(1000);
		ckeck_color();
		_delay_ms(1000);*/
		//servo_color_pos();
		c=check_color();
    3e24:	0e 94 1c 03 	call	0x638	; 0x638 <check_color>
		if (c=='R')
    3e28:	82 35       	cpi	r24, 0x52	; 82
    3e2a:	39 f4       	brne	.+14     	; 0x3e3a <check_nut+0x1dc>
		{
			current_nut_color = 'R';
    3e2c:	80 93 2a 02 	sts	0x022A, r24
			//printf("\ncolor = %c", current_nut_color);
			pick();
    3e30:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			
			adjust_after_pickup();
    3e34:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3e38:	08 95       	ret
		}
		else if (c=='G')
    3e3a:	87 34       	cpi	r24, 0x47	; 71
    3e3c:	39 f4       	brne	.+14     	; 0x3e4c <check_nut+0x1ee>
		{
			current_nut_color = 'G';
    3e3e:	80 93 2a 02 	sts	0x022A, r24
			//printf("\ncolor = %c", current_nut_color);
			pick();
    3e42:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			
			adjust_after_pickup();
    3e46:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3e4a:	08 95       	ret
		}
		else if ( c=='B' )
    3e4c:	82 34       	cpi	r24, 0x42	; 66
    3e4e:	39 f4       	brne	.+14     	; 0x3e5e <check_nut+0x200>
		{
			current_nut_color = 'B';
    3e50:	80 93 2a 02 	sts	0x022A, r24
			pick();
    3e54:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
			adjust_after_pickup();
    3e58:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3e5c:	08 95       	ret
		}
		else
		{
			adjust_after_pickup();
    3e5e:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3e62:	08 95       	ret
		}
	}

	else if (current_node == 22)
    3e64:	86 31       	cpi	r24, 0x16	; 22
    3e66:	91 05       	cpc	r25, r1
    3e68:	b9 f5       	brne	.+110    	; 0x3ed8 <check_nut+0x27a>
	{
			if (path[path_length - 1] == 21)
    3e6a:	e0 91 78 02 	lds	r30, 0x0278
    3e6e:	f0 91 79 02 	lds	r31, 0x0279
    3e72:	ee 0f       	add	r30, r30
    3e74:	ff 1f       	adc	r31, r31
    3e76:	e8 5c       	subi	r30, 0xC8	; 200
    3e78:	fd 4f       	sbci	r31, 0xFD	; 253
    3e7a:	80 81       	ld	r24, Z
    3e7c:	91 81       	ldd	r25, Z+1	; 0x01
    3e7e:	85 31       	cpi	r24, 0x15	; 21
    3e80:	91 05       	cpc	r25, r1
    3e82:	19 f4       	brne	.+6      	; 0x3e8a <check_nut+0x22c>
				sharp_right_turn_wls();
    3e84:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
    3e88:	05 c0       	rjmp	.+10     	; 0x3e94 <check_nut+0x236>
			else if(path[path_length - 1] == 23)
    3e8a:	87 31       	cpi	r24, 0x17	; 23
    3e8c:	91 05       	cpc	r25, r1
    3e8e:	11 f4       	brne	.+4      	; 0x3e94 <check_nut+0x236>
				sharp_left_turn_wls();
    3e90:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
	
	
			adjust_for_pickup();
    3e94:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <adjust_for_pickup>
			/*_delay_ms(1000);
				ckeck_color();
				_delay_ms(1000);*/

			//servo_color_pos();
			c=check_color();
    3e98:	0e 94 1c 03 	call	0x638	; 0x638 <check_color>
			if (c=='R')
    3e9c:	82 35       	cpi	r24, 0x52	; 82
    3e9e:	39 f4       	brne	.+14     	; 0x3eae <check_nut+0x250>
			{
				current_nut_color = 'R';
    3ea0:	80 93 2a 02 	sts	0x022A, r24
				//printf("\ncolor = %c", current_nut_color);
				pick();
    3ea4:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
		
				adjust_after_pickup();
    3ea8:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3eac:	08 95       	ret
			}
			else if (c=='G')
    3eae:	87 34       	cpi	r24, 0x47	; 71
    3eb0:	39 f4       	brne	.+14     	; 0x3ec0 <check_nut+0x262>
			{
				current_nut_color = 'G';
    3eb2:	80 93 2a 02 	sts	0x022A, r24
				//printf("\ncolor = %c", current_nut_color);
				pick();
    3eb6:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
		
				adjust_after_pickup();
    3eba:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3ebe:	08 95       	ret
			}
			else if ( c=='B' )
    3ec0:	82 34       	cpi	r24, 0x42	; 66
    3ec2:	39 f4       	brne	.+14     	; 0x3ed2 <check_nut+0x274>
			{
				current_nut_color = 'B';
    3ec4:	80 93 2a 02 	sts	0x022A, r24
				pick();
    3ec8:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
				adjust_after_pickup();
    3ecc:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3ed0:	08 95       	ret
			}
			else
			{
				adjust_after_pickup();
    3ed2:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3ed6:	08 95       	ret
			}
	}

	else if (current_node == 23)
    3ed8:	87 31       	cpi	r24, 0x17	; 23
    3eda:	91 05       	cpc	r25, r1
    3edc:	b1 f5       	brne	.+108    	; 0x3f4a <check_nut+0x2ec>
	{
			if (path[path_length - 1] == 22)
    3ede:	e0 91 78 02 	lds	r30, 0x0278
    3ee2:	f0 91 79 02 	lds	r31, 0x0279
    3ee6:	ee 0f       	add	r30, r30
    3ee8:	ff 1f       	adc	r31, r31
    3eea:	e8 5c       	subi	r30, 0xC8	; 200
    3eec:	fd 4f       	sbci	r31, 0xFD	; 253
    3eee:	80 81       	ld	r24, Z
    3ef0:	91 81       	ldd	r25, Z+1	; 0x01
    3ef2:	86 31       	cpi	r24, 0x16	; 22
    3ef4:	91 05       	cpc	r25, r1
    3ef6:	19 f4       	brne	.+6      	; 0x3efe <check_nut+0x2a0>
				sharp_right_turn_wls();
    3ef8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
    3efc:	05 c0       	rjmp	.+10     	; 0x3f08 <check_nut+0x2aa>
			else if(path[path_length - 1] == 20)
    3efe:	84 31       	cpi	r24, 0x14	; 20
    3f00:	91 05       	cpc	r25, r1
    3f02:	11 f4       	brne	.+4      	; 0x3f08 <check_nut+0x2aa>
				right_turn_wls();
    3f04:	0e 94 bc 09 	call	0x1378	; 0x1378 <right_turn_wls>
	
			adjust_for_pickup();
    3f08:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <adjust_for_pickup>

			c=check_color();
    3f0c:	0e 94 1c 03 	call	0x638	; 0x638 <check_color>
	
			if (c=='R')
    3f10:	82 35       	cpi	r24, 0x52	; 82
    3f12:	39 f4       	brne	.+14     	; 0x3f22 <check_nut+0x2c4>
			{
				current_nut_color = 'R';
    3f14:	80 93 2a 02 	sts	0x022A, r24
				//printf("\ncolor = %c", current_nut_color);
				pick();
    3f18:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
		
				adjust_after_pickup();
    3f1c:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3f20:	08 95       	ret
			}
			else if (c=='G')
    3f22:	87 34       	cpi	r24, 0x47	; 71
    3f24:	39 f4       	brne	.+14     	; 0x3f34 <check_nut+0x2d6>
			{
				current_nut_color = 'G';
    3f26:	80 93 2a 02 	sts	0x022A, r24
				//printf("\ncolor = %c", current_nut_color);
				pick();
    3f2a:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
		
				adjust_after_pickup();
    3f2e:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3f32:	08 95       	ret
			}
			else if ( c=='B' )
    3f34:	82 34       	cpi	r24, 0x42	; 66
    3f36:	39 f4       	brne	.+14     	; 0x3f46 <check_nut+0x2e8>
			{
				current_nut_color = 'B';
    3f38:	80 93 2a 02 	sts	0x022A, r24
				pick();
    3f3c:	0e 94 ca 05 	call	0xb94	; 0xb94 <pick>
				adjust_after_pickup();
    3f40:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3f44:	08 95       	ret
			}
			else
			{
				adjust_after_pickup();
    3f46:	0e 94 ef 1d 	call	0x3bde	; 0x3bde <adjust_after_pickup>
    3f4a:	08 95       	ret

00003f4c <deal_with_obstacle>:
* Logic: finds new path and follows it if any obstacle is found
* Example Call: deal_with_obstacle();
*
*/
void deal_with_obstacle(int dest)
{
    3f4c:	cf 93       	push	r28
    3f4e:	df 93       	push	r29
    3f50:	ec 01       	movw	r28, r24
	if( current_node == 16 || path[path_counter+1] == 16 )
    3f52:	80 91 86 09 	lds	r24, 0x0986
    3f56:	90 91 87 09 	lds	r25, 0x0987
    3f5a:	80 31       	cpi	r24, 0x10	; 16
    3f5c:	91 05       	cpc	r25, r1
    3f5e:	79 f0       	breq	.+30     	; 0x3f7e <deal_with_obstacle+0x32>
    3f60:	e0 91 82 09 	lds	r30, 0x0982
    3f64:	f0 91 83 09 	lds	r31, 0x0983
    3f68:	ee 0f       	add	r30, r30
    3f6a:	ff 1f       	adc	r31, r31
    3f6c:	e4 5c       	subi	r30, 0xC4	; 196
    3f6e:	fd 4f       	sbci	r31, 0xFD	; 253
    3f70:	20 81       	ld	r18, Z
    3f72:	31 81       	ldd	r19, Z+1	; 0x01
    3f74:	20 31       	cpi	r18, 0x10	; 16
    3f76:	31 05       	cpc	r19, r1
    3f78:	09 f0       	breq	.+2      	; 0x3f7c <deal_with_obstacle+0x30>
    3f7a:	a8 c0       	rjmp	.+336    	; 0x40cc <deal_with_obstacle+0x180>
    3f7c:	16 c0       	rjmp	.+44     	; 0x3faa <deal_with_obstacle+0x5e>
	{
		if(current_node == 16 && path[path_counter+1] == 17)
    3f7e:	e0 91 82 09 	lds	r30, 0x0982
    3f82:	f0 91 83 09 	lds	r31, 0x0983
    3f86:	ee 0f       	add	r30, r30
    3f88:	ff 1f       	adc	r31, r31
    3f8a:	e4 5c       	subi	r30, 0xC4	; 196
    3f8c:	fd 4f       	sbci	r31, 0xFD	; 253
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	81 31       	cpi	r24, 0x11	; 17
    3f94:	91 05       	cpc	r25, r1
    3f96:	19 f4       	brne	.+6      	; 0x3f9e <deal_with_obstacle+0x52>
			sharp_right_turn_wls();				
    3f98:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
    3f9c:	34 c0       	rjmp	.+104    	; 0x4006 <deal_with_obstacle+0xba>
		else if(current_node == 16 && path[path_counter+1] == 15)
    3f9e:	8f 30       	cpi	r24, 0x0F	; 15
    3fa0:	91 05       	cpc	r25, r1
    3fa2:	89 f5       	brne	.+98     	; 0x4006 <deal_with_obstacle+0xba>
			sharp_left_turn_wls();
    3fa4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
    3fa8:	2e c0       	rjmp	.+92     	; 0x4006 <deal_with_obstacle+0xba>
		else if(current_node == 15 && path[path_counter+1] == 16)
    3faa:	8f 30       	cpi	r24, 0x0F	; 15
    3fac:	91 05       	cpc	r25, r1
    3fae:	71 f4       	brne	.+28     	; 0x3fcc <deal_with_obstacle+0x80>
		{
			sharp_right_turn_wls();
    3fb0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
			right();
    3fb4:	0e 94 48 05 	call	0xa90	; 0xa90 <right>
    3fb8:	8f ef       	ldi	r24, 0xFF	; 255
    3fba:	9f ef       	ldi	r25, 0xFF	; 255
    3fbc:	a3 e2       	ldi	r26, 0x23	; 35
    3fbe:	81 50       	subi	r24, 0x01	; 1
    3fc0:	90 40       	sbci	r25, 0x00	; 0
    3fc2:	a0 40       	sbci	r26, 0x00	; 0
    3fc4:	e1 f7       	brne	.-8      	; 0x3fbe <deal_with_obstacle+0x72>
    3fc6:	00 c0       	rjmp	.+0      	; 0x3fc8 <deal_with_obstacle+0x7c>
    3fc8:	00 00       	nop
    3fca:	1d c0       	rjmp	.+58     	; 0x4006 <deal_with_obstacle+0xba>
			_delay_ms(800);
		}
		else if(current_node == 17 && path[path_counter+1] == 16)
    3fcc:	81 31       	cpi	r24, 0x11	; 17
    3fce:	91 05       	cpc	r25, r1
    3fd0:	d1 f4       	brne	.+52     	; 0x4006 <deal_with_obstacle+0xba>
    3fd2:	e0 91 82 09 	lds	r30, 0x0982
    3fd6:	f0 91 83 09 	lds	r31, 0x0983
    3fda:	ee 0f       	add	r30, r30
    3fdc:	ff 1f       	adc	r31, r31
    3fde:	e4 5c       	subi	r30, 0xC4	; 196
    3fe0:	fd 4f       	sbci	r31, 0xFD	; 253
    3fe2:	80 81       	ld	r24, Z
    3fe4:	91 81       	ldd	r25, Z+1	; 0x01
    3fe6:	80 31       	cpi	r24, 0x10	; 16
    3fe8:	91 05       	cpc	r25, r1
    3fea:	69 f4       	brne	.+26     	; 0x4006 <deal_with_obstacle+0xba>
		{
			sharp_left_turn_wls();
    3fec:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
			left();
    3ff0:	0e 94 45 05 	call	0xa8a	; 0xa8a <left>
    3ff4:	8f ef       	ldi	r24, 0xFF	; 255
    3ff6:	9f ef       	ldi	r25, 0xFF	; 255
    3ff8:	a3 e2       	ldi	r26, 0x23	; 35
    3ffa:	81 50       	subi	r24, 0x01	; 1
    3ffc:	90 40       	sbci	r25, 0x00	; 0
    3ffe:	a0 40       	sbci	r26, 0x00	; 0
    4000:	e1 f7       	brne	.-8      	; 0x3ffa <deal_with_obstacle+0xae>
    4002:	00 c0       	rjmp	.+0      	; 0x4004 <deal_with_obstacle+0xb8>
    4004:	00 00       	nop
    4006:	8f ef       	ldi	r24, 0xFF	; 255
    4008:	9f e7       	ldi	r25, 0x7F	; 127
    400a:	a6 e1       	ldi	r26, 0x16	; 22
    400c:	81 50       	subi	r24, 0x01	; 1
    400e:	90 40       	sbci	r25, 0x00	; 0
    4010:	a0 40       	sbci	r26, 0x00	; 0
    4012:	e1 f7       	brne	.-8      	; 0x400c <deal_with_obstacle+0xc0>
    4014:	00 c0       	rjmp	.+0      	; 0x4016 <deal_with_obstacle+0xca>
    4016:	00 00       	nop
			_delay_ms(800);
		}
		
		
		_delay_ms(500);								//go forward until next node
		strt_node = current_node;					//make new starting node
    4018:	60 91 86 09 	lds	r22, 0x0986
    401c:	70 91 87 09 	lds	r23, 0x0987
    4020:	70 93 6d 02 	sts	0x026D, r23
    4024:	60 93 6c 02 	sts	0x026C, r22
		prev_node = path[path_counter+1];
    4028:	e0 91 82 09 	lds	r30, 0x0982
    402c:	f0 91 83 09 	lds	r31, 0x0983
    4030:	ee 0f       	add	r30, r30
    4032:	ff 1f       	adc	r31, r31
    4034:	e4 5c       	subi	r30, 0xC4	; 196
    4036:	fd 4f       	sbci	r31, 0xFD	; 253
    4038:	40 81       	ld	r20, Z
    403a:	51 81       	ldd	r21, Z+1	; 0x01
    403c:	50 93 69 02 	sts	0x0269, r21
    4040:	40 93 68 02 	sts	0x0268, r20
		graph[current_node][prev_node] = 0;			//make the edge with obstacle as 0 in graph[][]
    4044:	cb 01       	movw	r24, r22
    4046:	88 0f       	add	r24, r24
    4048:	99 1f       	adc	r25, r25
    404a:	86 0f       	add	r24, r22
    404c:	97 1f       	adc	r25, r23
    404e:	9c 01       	movw	r18, r24
    4050:	22 0f       	add	r18, r18
    4052:	33 1f       	adc	r19, r19
    4054:	22 0f       	add	r18, r18
    4056:	33 1f       	adc	r19, r19
    4058:	82 0f       	add	r24, r18
    405a:	93 1f       	adc	r25, r19
    405c:	fc 01       	movw	r30, r24
    405e:	ee 0f       	add	r30, r30
    4060:	ff 1f       	adc	r31, r31
    4062:	e4 0f       	add	r30, r20
    4064:	f5 1f       	adc	r31, r21
    4066:	aa e7       	ldi	r26, 0x7A	; 122
    4068:	b2 e0       	ldi	r27, 0x02	; 2
    406a:	ee 0f       	add	r30, r30
    406c:	ff 1f       	adc	r31, r31
    406e:	ea 0f       	add	r30, r26
    4070:	fb 1f       	adc	r31, r27
    4072:	11 82       	std	Z+1, r1	; 0x01
    4074:	10 82       	st	Z, r1
		graph[prev_node][current_node] = 0;			//make the edge with obstacle as 0 in graph[][]
    4076:	ca 01       	movw	r24, r20
    4078:	88 0f       	add	r24, r24
    407a:	99 1f       	adc	r25, r25
    407c:	84 0f       	add	r24, r20
    407e:	95 1f       	adc	r25, r21
    4080:	9c 01       	movw	r18, r24
    4082:	22 0f       	add	r18, r18
    4084:	33 1f       	adc	r19, r19
    4086:	22 0f       	add	r18, r18
    4088:	33 1f       	adc	r19, r19
    408a:	82 0f       	add	r24, r18
    408c:	93 1f       	adc	r25, r19
    408e:	88 0f       	add	r24, r24
    4090:	99 1f       	adc	r25, r25
    4092:	86 0f       	add	r24, r22
    4094:	97 1f       	adc	r25, r23
    4096:	88 0f       	add	r24, r24
    4098:	99 1f       	adc	r25, r25
    409a:	a8 0f       	add	r26, r24
    409c:	b9 1f       	adc	r27, r25
    409e:	1d 92       	st	X+, r1
    40a0:	1c 92       	st	X, r1
		breadth_first_search(current_node, dest);	//calculate new path
    40a2:	cb 01       	movw	r24, r22
    40a4:	be 01       	movw	r22, r28
    40a6:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
		obstacle_found = 0;
    40aa:	10 92 2f 02 	sts	0x022F, r1
    40ae:	10 92 2e 02 	sts	0x022E, r1
		path[0]=prev_node;							//the node which was next in the old path is made as first node in new path so as to determine orientation of bot
    40b2:	80 91 68 02 	lds	r24, 0x0268
    40b6:	90 91 69 02 	lds	r25, 0x0269
    40ba:	90 93 3b 02 	sts	0x023B, r25
    40be:	80 93 3a 02 	sts	0x023A, r24
		travel_path();								//travel the path
    40c2:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>
		stop();
    40c6:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    40ca:	06 c1       	rjmp	.+524    	; 0x42d8 <deal_with_obstacle+0x38c>
	}
	else if( current_node==6 || path[path_counter+1] == 6 )
    40cc:	86 30       	cpi	r24, 0x06	; 6
    40ce:	91 05       	cpc	r25, r1
    40d0:	29 f0       	breq	.+10     	; 0x40dc <deal_with_obstacle+0x190>
    40d2:	26 30       	cpi	r18, 0x06	; 6
    40d4:	31 05       	cpc	r19, r1
    40d6:	09 f0       	breq	.+2      	; 0x40da <deal_with_obstacle+0x18e>
    40d8:	98 c0       	rjmp	.+304    	; 0x420a <deal_with_obstacle+0x2be>
    40da:	0c c0       	rjmp	.+24     	; 0x40f4 <deal_with_obstacle+0x1a8>
	{
		
		if(current_node==6 && path[path_counter+1] == 7)
    40dc:	27 30       	cpi	r18, 0x07	; 7
    40de:	31 05       	cpc	r19, r1
    40e0:	19 f4       	brne	.+6      	; 0x40e8 <deal_with_obstacle+0x19c>
			sharp_left_turn_wls();								//make reverse turn
    40e2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
    40e6:	2e c0       	rjmp	.+92     	; 0x4144 <deal_with_obstacle+0x1f8>
		else if(current_node==6 && path[path_counter+1] == 5)
    40e8:	25 30       	cpi	r18, 0x05	; 5
    40ea:	31 05       	cpc	r19, r1
    40ec:	59 f5       	brne	.+86     	; 0x4144 <deal_with_obstacle+0x1f8>
			sharp_right_turn_wls();
    40ee:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
    40f2:	28 c0       	rjmp	.+80     	; 0x4144 <deal_with_obstacle+0x1f8>
		else if(current_node == 5 && path[path_counter+1] == 6)
    40f4:	85 30       	cpi	r24, 0x05	; 5
    40f6:	91 05       	cpc	r25, r1
    40f8:	81 f4       	brne	.+32     	; 0x411a <deal_with_obstacle+0x1ce>
		{
			sharp_right_turn_wls();
    40fa:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
			right();
    40fe:	0e 94 48 05 	call	0xa90	; 0xa90 <right>
    4102:	8f ef       	ldi	r24, 0xFF	; 255
    4104:	9f ef       	ldi	r25, 0xFF	; 255
    4106:	a3 e2       	ldi	r26, 0x23	; 35
    4108:	81 50       	subi	r24, 0x01	; 1
    410a:	90 40       	sbci	r25, 0x00	; 0
    410c:	a0 40       	sbci	r26, 0x00	; 0
    410e:	e1 f7       	brne	.-8      	; 0x4108 <deal_with_obstacle+0x1bc>
    4110:	00 c0       	rjmp	.+0      	; 0x4112 <deal_with_obstacle+0x1c6>
    4112:	00 00       	nop
			_delay_ms(800);
			stop();
    4114:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    4118:	15 c0       	rjmp	.+42     	; 0x4144 <deal_with_obstacle+0x1f8>
		}
		else if(current_node == 7 && path[path_counter+1] == 6)
    411a:	87 30       	cpi	r24, 0x07	; 7
    411c:	91 05       	cpc	r25, r1
    411e:	91 f4       	brne	.+36     	; 0x4144 <deal_with_obstacle+0x1f8>
    4120:	26 30       	cpi	r18, 0x06	; 6
    4122:	31 05       	cpc	r19, r1
    4124:	79 f4       	brne	.+30     	; 0x4144 <deal_with_obstacle+0x1f8>
		{
			sharp_right_turn_wls();
    4126:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
			right();
    412a:	0e 94 48 05 	call	0xa90	; 0xa90 <right>
    412e:	8f ef       	ldi	r24, 0xFF	; 255
    4130:	9f ef       	ldi	r25, 0xFF	; 255
    4132:	a3 e2       	ldi	r26, 0x23	; 35
    4134:	81 50       	subi	r24, 0x01	; 1
    4136:	90 40       	sbci	r25, 0x00	; 0
    4138:	a0 40       	sbci	r26, 0x00	; 0
    413a:	e1 f7       	brne	.-8      	; 0x4134 <deal_with_obstacle+0x1e8>
    413c:	00 c0       	rjmp	.+0      	; 0x413e <deal_with_obstacle+0x1f2>
    413e:	00 00       	nop
			_delay_ms(800);
			stop();
    4140:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    4144:	8f ef       	ldi	r24, 0xFF	; 255
    4146:	9f e7       	ldi	r25, 0x7F	; 127
    4148:	a6 e1       	ldi	r26, 0x16	; 22
    414a:	81 50       	subi	r24, 0x01	; 1
    414c:	90 40       	sbci	r25, 0x00	; 0
    414e:	a0 40       	sbci	r26, 0x00	; 0
    4150:	e1 f7       	brne	.-8      	; 0x414a <deal_with_obstacle+0x1fe>
    4152:	00 c0       	rjmp	.+0      	; 0x4154 <deal_with_obstacle+0x208>
    4154:	00 00       	nop
		
		
		
		//forward_wls(1);
		_delay_ms(500);								//go forward until next node
		strt_node = current_node;					//make new starting node
    4156:	60 91 86 09 	lds	r22, 0x0986
    415a:	70 91 87 09 	lds	r23, 0x0987
    415e:	70 93 6d 02 	sts	0x026D, r23
    4162:	60 93 6c 02 	sts	0x026C, r22
		prev_node = path[path_counter+1];
    4166:	e0 91 82 09 	lds	r30, 0x0982
    416a:	f0 91 83 09 	lds	r31, 0x0983
    416e:	ee 0f       	add	r30, r30
    4170:	ff 1f       	adc	r31, r31
    4172:	e4 5c       	subi	r30, 0xC4	; 196
    4174:	fd 4f       	sbci	r31, 0xFD	; 253
    4176:	40 81       	ld	r20, Z
    4178:	51 81       	ldd	r21, Z+1	; 0x01
    417a:	50 93 69 02 	sts	0x0269, r21
    417e:	40 93 68 02 	sts	0x0268, r20
		graph[current_node][prev_node] = 0;			//make the edge with obstacle as 0 in graph[][]
    4182:	cb 01       	movw	r24, r22
    4184:	88 0f       	add	r24, r24
    4186:	99 1f       	adc	r25, r25
    4188:	86 0f       	add	r24, r22
    418a:	97 1f       	adc	r25, r23
    418c:	9c 01       	movw	r18, r24
    418e:	22 0f       	add	r18, r18
    4190:	33 1f       	adc	r19, r19
    4192:	22 0f       	add	r18, r18
    4194:	33 1f       	adc	r19, r19
    4196:	82 0f       	add	r24, r18
    4198:	93 1f       	adc	r25, r19
    419a:	fc 01       	movw	r30, r24
    419c:	ee 0f       	add	r30, r30
    419e:	ff 1f       	adc	r31, r31
    41a0:	e4 0f       	add	r30, r20
    41a2:	f5 1f       	adc	r31, r21
    41a4:	aa e7       	ldi	r26, 0x7A	; 122
    41a6:	b2 e0       	ldi	r27, 0x02	; 2
    41a8:	ee 0f       	add	r30, r30
    41aa:	ff 1f       	adc	r31, r31
    41ac:	ea 0f       	add	r30, r26
    41ae:	fb 1f       	adc	r31, r27
    41b0:	11 82       	std	Z+1, r1	; 0x01
    41b2:	10 82       	st	Z, r1
		graph[prev_node][current_node] = 0;			//make the edge with obstacle as 0 in graph[][]
    41b4:	ca 01       	movw	r24, r20
    41b6:	88 0f       	add	r24, r24
    41b8:	99 1f       	adc	r25, r25
    41ba:	84 0f       	add	r24, r20
    41bc:	95 1f       	adc	r25, r21
    41be:	9c 01       	movw	r18, r24
    41c0:	22 0f       	add	r18, r18
    41c2:	33 1f       	adc	r19, r19
    41c4:	22 0f       	add	r18, r18
    41c6:	33 1f       	adc	r19, r19
    41c8:	82 0f       	add	r24, r18
    41ca:	93 1f       	adc	r25, r19
    41cc:	88 0f       	add	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	86 0f       	add	r24, r22
    41d2:	97 1f       	adc	r25, r23
    41d4:	88 0f       	add	r24, r24
    41d6:	99 1f       	adc	r25, r25
    41d8:	a8 0f       	add	r26, r24
    41da:	b9 1f       	adc	r27, r25
    41dc:	1d 92       	st	X+, r1
    41de:	1c 92       	st	X, r1
		breadth_first_search(current_node, dest);	//calculate new path
    41e0:	cb 01       	movw	r24, r22
    41e2:	be 01       	movw	r22, r28
    41e4:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
		obstacle_found = 0;
    41e8:	10 92 2f 02 	sts	0x022F, r1
    41ec:	10 92 2e 02 	sts	0x022E, r1
		path[0]=prev_node;							//the node which was next in the old path is made as first node in new path so as to determine orientation of bot
    41f0:	80 91 68 02 	lds	r24, 0x0268
    41f4:	90 91 69 02 	lds	r25, 0x0269
    41f8:	90 93 3b 02 	sts	0x023B, r25
    41fc:	80 93 3a 02 	sts	0x023A, r24
		travel_path();								//travel the path
    4200:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>
		stop();
    4204:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    4208:	67 c0       	rjmp	.+206    	; 0x42d8 <deal_with_obstacle+0x38c>
	}
	else
	{
		sharp_left_turn_wls();						//make reverse turn
    420a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
		forward_wls(1);								//go forward until next node
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <forward_wls>
    4214:	8f ef       	ldi	r24, 0xFF	; 255
    4216:	9f e7       	ldi	r25, 0x7F	; 127
    4218:	a6 e1       	ldi	r26, 0x16	; 22
    421a:	81 50       	subi	r24, 0x01	; 1
    421c:	90 40       	sbci	r25, 0x00	; 0
    421e:	a0 40       	sbci	r26, 0x00	; 0
    4220:	e1 f7       	brne	.-8      	; 0x421a <deal_with_obstacle+0x2ce>
    4222:	00 c0       	rjmp	.+0      	; 0x4224 <deal_with_obstacle+0x2d8>
    4224:	00 00       	nop
		_delay_ms(500);						
		strt_node = current_node;					//make new starting node
    4226:	60 91 86 09 	lds	r22, 0x0986
    422a:	70 91 87 09 	lds	r23, 0x0987
    422e:	70 93 6d 02 	sts	0x026D, r23
    4232:	60 93 6c 02 	sts	0x026C, r22
		prev_node = path[path_counter+1];
    4236:	e0 91 82 09 	lds	r30, 0x0982
    423a:	f0 91 83 09 	lds	r31, 0x0983
    423e:	ee 0f       	add	r30, r30
    4240:	ff 1f       	adc	r31, r31
    4242:	e4 5c       	subi	r30, 0xC4	; 196
    4244:	fd 4f       	sbci	r31, 0xFD	; 253
    4246:	40 81       	ld	r20, Z
    4248:	51 81       	ldd	r21, Z+1	; 0x01
    424a:	50 93 69 02 	sts	0x0269, r21
    424e:	40 93 68 02 	sts	0x0268, r20
		graph[current_node][prev_node] = 0;			//make the edge with obstacle as 0 in graph[][]
    4252:	cb 01       	movw	r24, r22
    4254:	88 0f       	add	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	86 0f       	add	r24, r22
    425a:	97 1f       	adc	r25, r23
    425c:	9c 01       	movw	r18, r24
    425e:	22 0f       	add	r18, r18
    4260:	33 1f       	adc	r19, r19
    4262:	22 0f       	add	r18, r18
    4264:	33 1f       	adc	r19, r19
    4266:	82 0f       	add	r24, r18
    4268:	93 1f       	adc	r25, r19
    426a:	fc 01       	movw	r30, r24
    426c:	ee 0f       	add	r30, r30
    426e:	ff 1f       	adc	r31, r31
    4270:	e4 0f       	add	r30, r20
    4272:	f5 1f       	adc	r31, r21
    4274:	aa e7       	ldi	r26, 0x7A	; 122
    4276:	b2 e0       	ldi	r27, 0x02	; 2
    4278:	ee 0f       	add	r30, r30
    427a:	ff 1f       	adc	r31, r31
    427c:	ea 0f       	add	r30, r26
    427e:	fb 1f       	adc	r31, r27
    4280:	11 82       	std	Z+1, r1	; 0x01
    4282:	10 82       	st	Z, r1
		graph[prev_node][current_node] = 0;			//make the edge with obstacle as 0 in graph[][]
    4284:	ca 01       	movw	r24, r20
    4286:	88 0f       	add	r24, r24
    4288:	99 1f       	adc	r25, r25
    428a:	84 0f       	add	r24, r20
    428c:	95 1f       	adc	r25, r21
    428e:	9c 01       	movw	r18, r24
    4290:	22 0f       	add	r18, r18
    4292:	33 1f       	adc	r19, r19
    4294:	22 0f       	add	r18, r18
    4296:	33 1f       	adc	r19, r19
    4298:	82 0f       	add	r24, r18
    429a:	93 1f       	adc	r25, r19
    429c:	88 0f       	add	r24, r24
    429e:	99 1f       	adc	r25, r25
    42a0:	86 0f       	add	r24, r22
    42a2:	97 1f       	adc	r25, r23
    42a4:	88 0f       	add	r24, r24
    42a6:	99 1f       	adc	r25, r25
    42a8:	a8 0f       	add	r26, r24
    42aa:	b9 1f       	adc	r27, r25
    42ac:	1d 92       	st	X+, r1
    42ae:	1c 92       	st	X, r1
		breadth_first_search(current_node, dest);	//calculate new path
    42b0:	cb 01       	movw	r24, r22
    42b2:	be 01       	movw	r22, r28
    42b4:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
		obstacle_found = 0;
    42b8:	10 92 2f 02 	sts	0x022F, r1
    42bc:	10 92 2e 02 	sts	0x022E, r1
		path[0]=prev_node;							//the node which was next in the old path is made as first node in new path so as to determine orientation of bot
    42c0:	80 91 68 02 	lds	r24, 0x0268
    42c4:	90 91 69 02 	lds	r25, 0x0269
    42c8:	90 93 3b 02 	sts	0x023B, r25
    42cc:	80 93 3a 02 	sts	0x023A, r24
		travel_path();								//travel the path
    42d0:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>
		stop();
    42d4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
	}
	
}
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	08 95       	ret

000042de <Task_4>:
* Output: void
* Logic: contains full theme implementation logic
* Example Call: Task_4();
*/
void Task_4(void)
{
    42de:	6f 92       	push	r6
    42e0:	7f 92       	push	r7
    42e2:	8f 92       	push	r8
    42e4:	9f 92       	push	r9
    42e6:	af 92       	push	r10
    42e8:	bf 92       	push	r11
    42ea:	cf 92       	push	r12
    42ec:	df 92       	push	r13
    42ee:	ef 92       	push	r14
    42f0:	ff 92       	push	r15
    42f2:	0f 93       	push	r16
    42f4:	1f 93       	push	r17
    42f6:	cf 93       	push	r28
    42f8:	df 93       	push	r29
	int pickup_count = 0;		//counter for pickup nodes 		
	int red_count = 0;			//counter for red nuts
	int green_count = 0;		//counter for green nuts
	int blue_count = 0;			//counter for blue nuts
	
	create_adjacency_matrix(29);					//form matrix of arena
    42fa:	8d e1       	ldi	r24, 0x1D	; 29
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <create_adjacency_matrix>
	
	breadth_first_search(0, pickup_nodes[0]);		// find path between start and first pickup node
    4302:	60 91 1e 02 	lds	r22, 0x021E
    4306:	70 91 1f 02 	lds	r23, 0x021F
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
	travel_path();									//travel the path
    4312:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>
	stop();
    4316:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>

	if (obstacle_found == 1)						//if obstacle is found in path
    431a:	80 91 2e 02 	lds	r24, 0x022E
    431e:	90 91 2f 02 	lds	r25, 0x022F
    4322:	81 30       	cpi	r24, 0x01	; 1
    4324:	91 05       	cpc	r25, r1
    4326:	61 f4       	brne	.+24     	; 0x4340 <Task_4+0x62>
	{
		while (obstacle_found != 0)					//while obstacle is present in path
		{
			deal_with_obstacle(pickup_nodes[0]);	//find new path up to first pickup node
    4328:	ce e1       	ldi	r28, 0x1E	; 30
    432a:	d2 e0       	ldi	r29, 0x02	; 2
    432c:	88 81       	ld	r24, Y
    432e:	99 81       	ldd	r25, Y+1	; 0x01
    4330:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
	travel_path();									//travel the path
	stop();

	if (obstacle_found == 1)						//if obstacle is found in path
	{
		while (obstacle_found != 0)					//while obstacle is present in path
    4334:	80 91 2e 02 	lds	r24, 0x022E
    4338:	90 91 2f 02 	lds	r25, 0x022F
    433c:	00 97       	sbiw	r24, 0x00	; 0
    433e:	b1 f7       	brne	.-20     	; 0x432c <Task_4+0x4e>
* Output: void
* Logic: contains full theme implementation logic
* Example Call: Task_4();
*/
void Task_4(void)
{
    4340:	88 24       	eor	r8, r8
    4342:	99 24       	eor	r9, r9
    4344:	aa 24       	eor	r10, r10
    4346:	bb 24       	eor	r11, r11
    4348:	cc 24       	eor	r12, r12
    434a:	dd 24       	eor	r13, r13
    434c:	00 e0       	ldi	r16, 0x00	; 0
    434e:	10 e0       	ldi	r17, 0x00	; 0
	{
		check_nut();	//check if nut is present

		if (current_nut_color == 'W')	//if no nut
		{
			breadth_first_search(pickup_nodes[pickup_count], pickup_nodes[pickup_count + 1]);	//calculate path for next pickup node
    4350:	0f 2e       	mov	r0, r31
    4352:	fe e1       	ldi	r31, 0x1E	; 30
    4354:	ef 2e       	mov	r14, r31
    4356:	f2 e0       	ldi	r31, 0x02	; 2
    4358:	ff 2e       	mov	r15, r31
    435a:	f0 2d       	mov	r31, r0
				}
			}

			if (green_count == 1)
			{
				if (path[path_length - 1] == 15)
    435c:	0f 2e       	mov	r0, r31
    435e:	fa e3       	ldi	r31, 0x3A	; 58
    4360:	6f 2e       	mov	r6, r31
    4362:	f2 e0       	ldi	r31, 0x02	; 2
    4364:	7f 2e       	mov	r7, r31
    4366:	f0 2d       	mov	r31, r0
		}
	}

	while (1)
	{
		check_nut();	//check if nut is present
    4368:	0e 94 2f 1e 	call	0x3c5e	; 0x3c5e <check_nut>

		if (current_nut_color == 'W')	//if no nut
    436c:	80 91 2a 02 	lds	r24, 0x022A
    4370:	87 35       	cpi	r24, 0x57	; 87
    4372:	69 f5       	brne	.+90     	; 0x43ce <Task_4+0xf0>
		{
			breadth_first_search(pickup_nodes[pickup_count], pickup_nodes[pickup_count + 1]);	//calculate path for next pickup node
    4374:	c8 01       	movw	r24, r16
    4376:	88 0f       	add	r24, r24
    4378:	99 1f       	adc	r25, r25
    437a:	f7 01       	movw	r30, r14
    437c:	e8 0f       	add	r30, r24
    437e:	f9 1f       	adc	r31, r25
    4380:	0f 5f       	subi	r16, 0xFF	; 255
    4382:	1f 4f       	sbci	r17, 0xFF	; 255
    4384:	c8 01       	movw	r24, r16
    4386:	88 0f       	add	r24, r24
    4388:	99 1f       	adc	r25, r25
    438a:	8e 0d       	add	r24, r14
    438c:	9f 1d       	adc	r25, r15
    438e:	dc 01       	movw	r26, r24
    4390:	6d 91       	ld	r22, X+
    4392:	7c 91       	ld	r23, X
    4394:	80 81       	ld	r24, Z
    4396:	91 81       	ldd	r25, Z+1	; 0x01
    4398:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
			travel_path();//go to next pickup node
    439c:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>

			if (obstacle_found == 1)		//for dealing with obstacle
    43a0:	80 91 2e 02 	lds	r24, 0x022E
    43a4:	90 91 2f 02 	lds	r25, 0x022F
    43a8:	81 30       	cpi	r24, 0x01	; 1
    43aa:	91 05       	cpc	r25, r1
    43ac:	e9 f6       	brne	.-70     	; 0x4368 <Task_4+0x8a>
			{
				while (obstacle_found != 0)
				{					
					deal_with_obstacle(pickup_nodes[pickup_count+1]);	//find new path up to next pickup node
    43ae:	e8 01       	movw	r28, r16
    43b0:	cc 0f       	add	r28, r28
    43b2:	dd 1f       	adc	r29, r29
    43b4:	ce 0d       	add	r28, r14
    43b6:	df 1d       	adc	r29, r15
    43b8:	88 81       	ld	r24, Y
    43ba:	99 81       	ldd	r25, Y+1	; 0x01
    43bc:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
			breadth_first_search(pickup_nodes[pickup_count], pickup_nodes[pickup_count + 1]);	//calculate path for next pickup node
			travel_path();//go to next pickup node

			if (obstacle_found == 1)		//for dealing with obstacle
			{
				while (obstacle_found != 0)
    43c0:	80 91 2e 02 	lds	r24, 0x022E
    43c4:	90 91 2f 02 	lds	r25, 0x022F
    43c8:	00 97       	sbiw	r24, 0x00	; 0
    43ca:	b1 f7       	brne	.-20     	; 0x43b8 <Task_4+0xda>
    43cc:	cd cf       	rjmp	.-102    	; 0x4368 <Task_4+0x8a>
				}
			}
			pickup_count++;	//increment counter of pickup nodes by 1
		}

		else if (current_nut_color == 'R')		//if red nut is present
    43ce:	82 35       	cpi	r24, 0x52	; 82
    43d0:	09 f0       	breq	.+2      	; 0x43d4 <Task_4+0xf6>
    43d2:	8d c0       	rjmp	.+282    	; 0x44ee <Task_4+0x210>
		{
			breadth_first_search(current_node, deposit_node_red[red_count]);//find path for red deposit zone node
    43d4:	c6 01       	movw	r24, r12
    43d6:	88 0f       	add	r24, r24
    43d8:	99 1f       	adc	r25, r25
    43da:	86 5e       	subi	r24, 0xE6	; 230
    43dc:	9d 4f       	sbci	r25, 0xFD	; 253
    43de:	fc 01       	movw	r30, r24
    43e0:	60 81       	ld	r22, Z
    43e2:	71 81       	ldd	r23, Z+1	; 0x01
    43e4:	80 91 86 09 	lds	r24, 0x0986
    43e8:	90 91 87 09 	lds	r25, 0x0987
    43ec:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
			travel_path();//go to red deposit zone node
    43f0:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>
			stop();
    43f4:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>

			if (obstacle_found == 1)			//for dealing with obstacles 
    43f8:	80 91 2e 02 	lds	r24, 0x022E
    43fc:	90 91 2f 02 	lds	r25, 0x022F
    4400:	81 30       	cpi	r24, 0x01	; 1
    4402:	91 05       	cpc	r25, r1
    4404:	79 f4       	brne	.+30     	; 0x4424 <Task_4+0x146>
			{
				while (obstacle_found != 0)
				{
					deal_with_obstacle(deposit_node_red[red_count]);	//find new path for red deposit zone node
    4406:	e6 01       	movw	r28, r12
    4408:	cc 0f       	add	r28, r28
    440a:	dd 1f       	adc	r29, r29
    440c:	c6 5e       	subi	r28, 0xE6	; 230
    440e:	dd 4f       	sbci	r29, 0xFD	; 253
    4410:	88 81       	ld	r24, Y
    4412:	99 81       	ldd	r25, Y+1	; 0x01
    4414:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
			travel_path();//go to red deposit zone node
			stop();

			if (obstacle_found == 1)			//for dealing with obstacles 
			{
				while (obstacle_found != 0)
    4418:	80 91 2e 02 	lds	r24, 0x022E
    441c:	90 91 2f 02 	lds	r25, 0x022F
    4420:	00 97       	sbiw	r24, 0x00	; 0
    4422:	b1 f7       	brne	.-20     	; 0x4410 <Task_4+0x132>
					deal_with_obstacle(deposit_node_red[red_count]);	//find new path for red deposit zone node
				}
			}


			if ( red_count == 0 )
    4424:	c1 14       	cp	r12, r1
    4426:	d1 04       	cpc	r13, r1
    4428:	a9 f4       	brne	.+42     	; 0x4454 <Task_4+0x176>
			{
				if (path[path_length - 1] == 7)
    442a:	80 91 78 02 	lds	r24, 0x0278
    442e:	90 91 79 02 	lds	r25, 0x0279
    4432:	01 97       	sbiw	r24, 0x01	; 1
    4434:	88 0f       	add	r24, r24
    4436:	99 1f       	adc	r25, r25
    4438:	86 0d       	add	r24, r6
    443a:	97 1d       	adc	r25, r7
    443c:	dc 01       	movw	r26, r24
    443e:	8d 91       	ld	r24, X+
    4440:	9c 91       	ld	r25, X
    4442:	11 97       	sbiw	r26, 0x01	; 1
    4444:	87 30       	cpi	r24, 0x07	; 7
    4446:	91 05       	cpc	r25, r1
    4448:	19 f4       	brne	.+6      	; 0x4450 <Task_4+0x172>
					sharp_left_turn_wls();
    444a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
    444e:	02 c0       	rjmp	.+4      	; 0x4454 <Task_4+0x176>
				else
					sharp_right_turn_wls();
    4450:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
			}

			adjust_for_place();			//adjust for placing the nut
    4454:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <adjust_for_place>
				forward();
				_delay_ms(400);
				stop();
			}*/
			
			stop();
    4458:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    445c:	8f ef       	ldi	r24, 0xFF	; 255
    445e:	9f ef       	ldi	r25, 0xFF	; 255
    4460:	ac e2       	ldi	r26, 0x2C	; 44
    4462:	81 50       	subi	r24, 0x01	; 1
    4464:	90 40       	sbci	r25, 0x00	; 0
    4466:	a0 40       	sbci	r26, 0x00	; 0
    4468:	e1 f7       	brne	.-8      	; 0x4462 <Task_4+0x184>
    446a:	00 c0       	rjmp	.+0      	; 0x446c <Task_4+0x18e>
    446c:	00 00       	nop
			_delay_ms(1000);
			place();					//place the nut
    446e:	0e 94 24 06 	call	0xc48	; 0xc48 <place>
    4472:	8f ef       	ldi	r24, 0xFF	; 255
    4474:	9f ef       	ldi	r25, 0xFF	; 255
    4476:	ac e2       	ldi	r26, 0x2C	; 44
    4478:	81 50       	subi	r24, 0x01	; 1
    447a:	90 40       	sbci	r25, 0x00	; 0
    447c:	a0 40       	sbci	r26, 0x00	; 0
    447e:	e1 f7       	brne	.-8      	; 0x4478 <Task_4+0x19a>
    4480:	00 c0       	rjmp	.+0      	; 0x4482 <Task_4+0x1a4>
    4482:	00 00       	nop
			_delay_ms(1000);
			
			adjust_after_place();
    4484:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <adjust_after_place>
			
			red_count++;				//increment red counter by 1
    4488:	08 94       	sec
    448a:	c1 1c       	adc	r12, r1
    448c:	d1 1c       	adc	r13, r1

			if (pickup_count + 1 > 5)//if all pickup nodes are covered then finish by breaking out of loop
    448e:	0f 5f       	subi	r16, 0xFF	; 255
    4490:	1f 4f       	sbci	r17, 0xFF	; 255
    4492:	06 30       	cpi	r16, 0x06	; 6
    4494:	11 05       	cpc	r17, r1
    4496:	0c f0       	brlt	.+2      	; 0x449a <Task_4+0x1bc>
    4498:	2e c1       	rjmp	.+604    	; 0x46f6 <Task_4+0x418>
				break;

			breadth_first_search(current_node, pickup_nodes[pickup_count + 1]);		//find path to next pickup node
    449a:	c8 01       	movw	r24, r16
    449c:	88 0f       	add	r24, r24
    449e:	99 1f       	adc	r25, r25
    44a0:	8e 0d       	add	r24, r14
    44a2:	9f 1d       	adc	r25, r15
    44a4:	dc 01       	movw	r26, r24
    44a6:	6d 91       	ld	r22, X+
    44a8:	7c 91       	ld	r23, X
    44aa:	80 91 86 09 	lds	r24, 0x0986
    44ae:	90 91 87 09 	lds	r25, 0x0987
    44b2:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
				
			travel_path();//go to next pickup node
    44b6:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>
			stop();
    44ba:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>

			if (obstacle_found == 1)//for dealing with obstacle
    44be:	80 91 2e 02 	lds	r24, 0x022E
    44c2:	90 91 2f 02 	lds	r25, 0x022F
    44c6:	81 30       	cpi	r24, 0x01	; 1
    44c8:	91 05       	cpc	r25, r1
    44ca:	09 f0       	breq	.+2      	; 0x44ce <Task_4+0x1f0>
    44cc:	4d cf       	rjmp	.-358    	; 0x4368 <Task_4+0x8a>
			{
				while (obstacle_found != 0)				//until obstacle is present
				{
					deal_with_obstacle(pickup_nodes[pickup_count+1]);	//find new path to next pickup node
    44ce:	e8 01       	movw	r28, r16
    44d0:	cc 0f       	add	r28, r28
    44d2:	dd 1f       	adc	r29, r29
    44d4:	ce 0d       	add	r28, r14
    44d6:	df 1d       	adc	r29, r15
    44d8:	88 81       	ld	r24, Y
    44da:	99 81       	ldd	r25, Y+1	; 0x01
    44dc:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
			travel_path();//go to next pickup node
			stop();

			if (obstacle_found == 1)//for dealing with obstacle
			{
				while (obstacle_found != 0)				//until obstacle is present
    44e0:	80 91 2e 02 	lds	r24, 0x022E
    44e4:	90 91 2f 02 	lds	r25, 0x022F
    44e8:	00 97       	sbiw	r24, 0x00	; 0
    44ea:	b1 f7       	brne	.-20     	; 0x44d8 <Task_4+0x1fa>
    44ec:	3d cf       	rjmp	.-390    	; 0x4368 <Task_4+0x8a>
				}
			}
			pickup_count++;							//increment pickup counter after reaching pickup node
		}

		else if (current_nut_color == 'G')			//if green nut is present
    44ee:	87 34       	cpi	r24, 0x47	; 71
    44f0:	09 f0       	breq	.+2      	; 0x44f4 <Task_4+0x216>
    44f2:	8c c0       	rjmp	.+280    	; 0x460c <Task_4+0x32e>
		{
			breadth_first_search(current_node, deposit_node_green[green_count]);//find path for green deposit zone node
    44f4:	c5 01       	movw	r24, r10
    44f6:	88 0f       	add	r24, r24
    44f8:	99 1f       	adc	r25, r25
    44fa:	8a 5e       	subi	r24, 0xEA	; 234
    44fc:	9d 4f       	sbci	r25, 0xFD	; 253
    44fe:	fc 01       	movw	r30, r24
    4500:	60 81       	ld	r22, Z
    4502:	71 81       	ldd	r23, Z+1	; 0x01
    4504:	80 91 86 09 	lds	r24, 0x0986
    4508:	90 91 87 09 	lds	r25, 0x0987
    450c:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
			travel_path();//go to green deposit zone node
    4510:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>

			if (obstacle_found == 1)
    4514:	80 91 2e 02 	lds	r24, 0x022E
    4518:	90 91 2f 02 	lds	r25, 0x022F
    451c:	81 30       	cpi	r24, 0x01	; 1
    451e:	91 05       	cpc	r25, r1
    4520:	79 f4       	brne	.+30     	; 0x4540 <Task_4+0x262>
			{
				while (obstacle_found != 0)			//for dealing with obstacles 
				{
					deal_with_obstacle(deposit_node_green[green_count]);
    4522:	e5 01       	movw	r28, r10
    4524:	cc 0f       	add	r28, r28
    4526:	dd 1f       	adc	r29, r29
    4528:	ca 5e       	subi	r28, 0xEA	; 234
    452a:	dd 4f       	sbci	r29, 0xFD	; 253
    452c:	88 81       	ld	r24, Y
    452e:	99 81       	ldd	r25, Y+1	; 0x01
    4530:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
			breadth_first_search(current_node, deposit_node_green[green_count]);//find path for green deposit zone node
			travel_path();//go to green deposit zone node

			if (obstacle_found == 1)
			{
				while (obstacle_found != 0)			//for dealing with obstacles 
    4534:	80 91 2e 02 	lds	r24, 0x022E
    4538:	90 91 2f 02 	lds	r25, 0x022F
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	b1 f7       	brne	.-20     	; 0x452c <Task_4+0x24e>
					deal_with_obstacle(deposit_node_green[green_count]);
					
				}
			}

			if (green_count == 1)
    4540:	f1 e0       	ldi	r31, 0x01	; 1
    4542:	af 16       	cp	r10, r31
    4544:	b1 04       	cpc	r11, r1
    4546:	a9 f4       	brne	.+42     	; 0x4572 <Task_4+0x294>
			{
				if (path[path_length - 1] == 15)
    4548:	80 91 78 02 	lds	r24, 0x0278
    454c:	90 91 79 02 	lds	r25, 0x0279
    4550:	01 97       	sbiw	r24, 0x01	; 1
    4552:	88 0f       	add	r24, r24
    4554:	99 1f       	adc	r25, r25
    4556:	86 0d       	add	r24, r6
    4558:	97 1d       	adc	r25, r7
    455a:	dc 01       	movw	r26, r24
    455c:	8d 91       	ld	r24, X+
    455e:	9c 91       	ld	r25, X
    4560:	11 97       	sbiw	r26, 0x01	; 1
    4562:	8f 30       	cpi	r24, 0x0F	; 15
    4564:	91 05       	cpc	r25, r1
    4566:	19 f4       	brne	.+6      	; 0x456e <Task_4+0x290>
					sharp_left_turn_wls();
    4568:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <sharp_left_turn_wls>
    456c:	02 c0       	rjmp	.+4      	; 0x4572 <Task_4+0x294>
				else
					sharp_right_turn_wls();
    456e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <sharp_right_turn_wls>
			}
					
			adjust_for_place();
    4572:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <adjust_for_place>
			
			
			
			stop();
    4576:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    457a:	8f ef       	ldi	r24, 0xFF	; 255
    457c:	9f ef       	ldi	r25, 0xFF	; 255
    457e:	ac e2       	ldi	r26, 0x2C	; 44
    4580:	81 50       	subi	r24, 0x01	; 1
    4582:	90 40       	sbci	r25, 0x00	; 0
    4584:	a0 40       	sbci	r26, 0x00	; 0
    4586:	e1 f7       	brne	.-8      	; 0x4580 <Task_4+0x2a2>
    4588:	00 c0       	rjmp	.+0      	; 0x458a <Task_4+0x2ac>
    458a:	00 00       	nop
			_delay_ms(1000);
			place();				//place the nut
    458c:	0e 94 24 06 	call	0xc48	; 0xc48 <place>
    4590:	8f ef       	ldi	r24, 0xFF	; 255
    4592:	9f ef       	ldi	r25, 0xFF	; 255
    4594:	ac e2       	ldi	r26, 0x2C	; 44
    4596:	81 50       	subi	r24, 0x01	; 1
    4598:	90 40       	sbci	r25, 0x00	; 0
    459a:	a0 40       	sbci	r26, 0x00	; 0
    459c:	e1 f7       	brne	.-8      	; 0x4596 <Task_4+0x2b8>
    459e:	00 c0       	rjmp	.+0      	; 0x45a0 <Task_4+0x2c2>
    45a0:	00 00       	nop
			_delay_ms(1000);
			
			adjust_after_place();
    45a2:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <adjust_after_place>
			
			green_count++;			//increment green counter by 1
    45a6:	08 94       	sec
    45a8:	a1 1c       	adc	r10, r1
    45aa:	b1 1c       	adc	r11, r1

			if (pickup_count+1 > 5)//if both green and both red nuts are placed and all pickup nodes are covered then finish by breaking out of loop
    45ac:	0f 5f       	subi	r16, 0xFF	; 255
    45ae:	1f 4f       	sbci	r17, 0xFF	; 255
    45b0:	06 30       	cpi	r16, 0x06	; 6
    45b2:	11 05       	cpc	r17, r1
    45b4:	0c f0       	brlt	.+2      	; 0x45b8 <Task_4+0x2da>
    45b6:	9f c0       	rjmp	.+318    	; 0x46f6 <Task_4+0x418>
				break;

			breadth_first_search(current_node, pickup_nodes[pickup_count + 1]);//find path to next pickup node
    45b8:	c8 01       	movw	r24, r16
    45ba:	88 0f       	add	r24, r24
    45bc:	99 1f       	adc	r25, r25
    45be:	8e 0d       	add	r24, r14
    45c0:	9f 1d       	adc	r25, r15
    45c2:	dc 01       	movw	r26, r24
    45c4:	6d 91       	ld	r22, X+
    45c6:	7c 91       	ld	r23, X
    45c8:	80 91 86 09 	lds	r24, 0x0986
    45cc:	90 91 87 09 	lds	r25, 0x0987
    45d0:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
			
			travel_path();//go to next pickup node
    45d4:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>
			stop();
    45d8:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>

			if (obstacle_found == 1)				//for dealing with obstacle
    45dc:	80 91 2e 02 	lds	r24, 0x022E
    45e0:	90 91 2f 02 	lds	r25, 0x022F
    45e4:	81 30       	cpi	r24, 0x01	; 1
    45e6:	91 05       	cpc	r25, r1
    45e8:	09 f0       	breq	.+2      	; 0x45ec <Task_4+0x30e>
    45ea:	be ce       	rjmp	.-644    	; 0x4368 <Task_4+0x8a>
			{
				while (obstacle_found != 0)			//until obstacle is present in path	
				{
					
					deal_with_obstacle(pickup_nodes[pickup_count+1]);	//find new path to next pickup node
    45ec:	e8 01       	movw	r28, r16
    45ee:	cc 0f       	add	r28, r28
    45f0:	dd 1f       	adc	r29, r29
    45f2:	ce 0d       	add	r28, r14
    45f4:	df 1d       	adc	r29, r15
    45f6:	88 81       	ld	r24, Y
    45f8:	99 81       	ldd	r25, Y+1	; 0x01
    45fa:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
			travel_path();//go to next pickup node
			stop();

			if (obstacle_found == 1)				//for dealing with obstacle
			{
				while (obstacle_found != 0)			//until obstacle is present in path	
    45fe:	80 91 2e 02 	lds	r24, 0x022E
    4602:	90 91 2f 02 	lds	r25, 0x022F
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	b1 f7       	brne	.-20     	; 0x45f6 <Task_4+0x318>
    460a:	ae ce       	rjmp	.-676    	; 0x4368 <Task_4+0x8a>
			}
			pickup_count++;				//increment pickup counter after reaching pickup node
		}
		
		
		else if (current_nut_color == 'B')			//if blue nut is present
    460c:	82 34       	cpi	r24, 0x42	; 66
    460e:	09 f0       	breq	.+2      	; 0x4612 <Task_4+0x334>
    4610:	ab ce       	rjmp	.-682    	; 0x4368 <Task_4+0x8a>
		{
			breadth_first_search(current_node, deposit_node_blue[blue_count]);//find path for blue deposit zone node
    4612:	c4 01       	movw	r24, r8
    4614:	88 0f       	add	r24, r24
    4616:	99 1f       	adc	r25, r25
    4618:	8e 5e       	subi	r24, 0xEE	; 238
    461a:	9d 4f       	sbci	r25, 0xFD	; 253
    461c:	fc 01       	movw	r30, r24
    461e:	60 81       	ld	r22, Z
    4620:	71 81       	ldd	r23, Z+1	; 0x01
    4622:	80 91 86 09 	lds	r24, 0x0986
    4626:	90 91 87 09 	lds	r25, 0x0987
    462a:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
			travel_path();//go to blue deposit zone node
    462e:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>

			if (obstacle_found == 1)
    4632:	80 91 2e 02 	lds	r24, 0x022E
    4636:	90 91 2f 02 	lds	r25, 0x022F
    463a:	81 30       	cpi	r24, 0x01	; 1
    463c:	91 05       	cpc	r25, r1
    463e:	79 f4       	brne	.+30     	; 0x465e <Task_4+0x380>
			{
				while (obstacle_found != 0)			//for dealing with obstacles
				{
					deal_with_obstacle(deposit_node_blue[blue_count]);
    4640:	e4 01       	movw	r28, r8
    4642:	cc 0f       	add	r28, r28
    4644:	dd 1f       	adc	r29, r29
    4646:	ce 5e       	subi	r28, 0xEE	; 238
    4648:	dd 4f       	sbci	r29, 0xFD	; 253
    464a:	88 81       	ld	r24, Y
    464c:	99 81       	ldd	r25, Y+1	; 0x01
    464e:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
			breadth_first_search(current_node, deposit_node_blue[blue_count]);//find path for blue deposit zone node
			travel_path();//go to blue deposit zone node

			if (obstacle_found == 1)
			{
				while (obstacle_found != 0)			//for dealing with obstacles
    4652:	80 91 2e 02 	lds	r24, 0x022E
    4656:	90 91 2f 02 	lds	r25, 0x022F
    465a:	00 97       	sbiw	r24, 0x00	; 0
    465c:	b1 f7       	brne	.-20     	; 0x464a <Task_4+0x36c>
				}
			}
			
			
			
			adjust_for_place();
    465e:	0e 94 9b 1d 	call	0x3b36	; 0x3b36 <adjust_for_place>
				forward();
				_delay_ms(400);
				stop();
			}*/
			
			stop();
    4662:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    4666:	8f ef       	ldi	r24, 0xFF	; 255
    4668:	9f ef       	ldi	r25, 0xFF	; 255
    466a:	ac e2       	ldi	r26, 0x2C	; 44
    466c:	81 50       	subi	r24, 0x01	; 1
    466e:	90 40       	sbci	r25, 0x00	; 0
    4670:	a0 40       	sbci	r26, 0x00	; 0
    4672:	e1 f7       	brne	.-8      	; 0x466c <Task_4+0x38e>
    4674:	00 c0       	rjmp	.+0      	; 0x4676 <Task_4+0x398>
    4676:	00 00       	nop
			_delay_ms(1000);
			place();				//place the nut
    4678:	0e 94 24 06 	call	0xc48	; 0xc48 <place>
    467c:	8f ef       	ldi	r24, 0xFF	; 255
    467e:	9f ef       	ldi	r25, 0xFF	; 255
    4680:	ac e2       	ldi	r26, 0x2C	; 44
    4682:	81 50       	subi	r24, 0x01	; 1
    4684:	90 40       	sbci	r25, 0x00	; 0
    4686:	a0 40       	sbci	r26, 0x00	; 0
    4688:	e1 f7       	brne	.-8      	; 0x4682 <Task_4+0x3a4>
    468a:	00 c0       	rjmp	.+0      	; 0x468c <Task_4+0x3ae>
    468c:	00 00       	nop
			_delay_ms(1000);
			
			adjust_after_place();
    468e:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <adjust_after_place>
			
			blue_count++;			//increment green counter by 1
    4692:	08 94       	sec
    4694:	81 1c       	adc	r8, r1
    4696:	91 1c       	adc	r9, r1

			if (pickup_count+1 > 5)//if all pickup nodes are covered then finish by breaking out of loop
    4698:	0f 5f       	subi	r16, 0xFF	; 255
    469a:	1f 4f       	sbci	r17, 0xFF	; 255
    469c:	06 30       	cpi	r16, 0x06	; 6
    469e:	11 05       	cpc	r17, r1
    46a0:	54 f5       	brge	.+84     	; 0x46f6 <Task_4+0x418>
				break;

			breadth_first_search(current_node, pickup_nodes[pickup_count + 1]);//find path to next pickup node
    46a2:	c8 01       	movw	r24, r16
    46a4:	88 0f       	add	r24, r24
    46a6:	99 1f       	adc	r25, r25
    46a8:	8e 0d       	add	r24, r14
    46aa:	9f 1d       	adc	r25, r15
    46ac:	dc 01       	movw	r26, r24
    46ae:	6d 91       	ld	r22, X+
    46b0:	7c 91       	ld	r23, X
    46b2:	80 91 86 09 	lds	r24, 0x0986
    46b6:	90 91 87 09 	lds	r25, 0x0987
    46ba:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
			
			travel_path();//go to next pickup node
    46be:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>
			stop();
    46c2:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>

			if (obstacle_found == 1)//for dealing with obstacle
    46c6:	80 91 2e 02 	lds	r24, 0x022E
    46ca:	90 91 2f 02 	lds	r25, 0x022F
    46ce:	81 30       	cpi	r24, 0x01	; 1
    46d0:	91 05       	cpc	r25, r1
    46d2:	09 f0       	breq	.+2      	; 0x46d6 <Task_4+0x3f8>
    46d4:	49 ce       	rjmp	.-878    	; 0x4368 <Task_4+0x8a>
			{
				while (obstacle_found != 0)				//
				{
					
					deal_with_obstacle(pickup_nodes[pickup_count+1]);
    46d6:	e8 01       	movw	r28, r16
    46d8:	cc 0f       	add	r28, r28
    46da:	dd 1f       	adc	r29, r29
    46dc:	ce 0d       	add	r28, r14
    46de:	df 1d       	adc	r29, r15
    46e0:	88 81       	ld	r24, Y
    46e2:	99 81       	ldd	r25, Y+1	; 0x01
    46e4:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
			travel_path();//go to next pickup node
			stop();

			if (obstacle_found == 1)//for dealing with obstacle
			{
				while (obstacle_found != 0)				//
    46e8:	80 91 2e 02 	lds	r24, 0x022E
    46ec:	90 91 2f 02 	lds	r25, 0x022F
    46f0:	00 97       	sbiw	r24, 0x00	; 0
    46f2:	b1 f7       	brne	.-20     	; 0x46e0 <Task_4+0x402>
    46f4:	39 ce       	rjmp	.-910    	; 0x4368 <Task_4+0x8a>
		}

		
	}

	breadth_first_search(current_node, 0);		//find path up to start node(node 0)
    46f6:	80 91 86 09 	lds	r24, 0x0986
    46fa:	90 91 87 09 	lds	r25, 0x0987
    46fe:	60 e0       	ldi	r22, 0x00	; 0
    4700:	70 e0       	ldi	r23, 0x00	; 0
    4702:	0e 94 2d 08 	call	0x105a	; 0x105a <breadth_first_search>
	travel_path();//go to start node
    4706:	0e 94 41 0c 	call	0x1882	; 0x1882 <travel_path>

	if (obstacle_found == 1)//for dealing with obstacles
    470a:	80 91 2e 02 	lds	r24, 0x022E
    470e:	90 91 2f 02 	lds	r25, 0x022F
    4712:	81 30       	cpi	r24, 0x01	; 1
    4714:	91 05       	cpc	r25, r1
    4716:	51 f4       	brne	.+20     	; 0x472c <Task_4+0x44e>
	{
		while (obstacle_found != 0)			//until obstacle is present
		{
			
			deal_with_obstacle(0);			// find new path up to starting node
    4718:	80 e0       	ldi	r24, 0x00	; 0
    471a:	90 e0       	ldi	r25, 0x00	; 0
    471c:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <deal_with_obstacle>
	breadth_first_search(current_node, 0);		//find path up to start node(node 0)
	travel_path();//go to start node

	if (obstacle_found == 1)//for dealing with obstacles
	{
		while (obstacle_found != 0)			//until obstacle is present
    4720:	80 91 2e 02 	lds	r24, 0x022E
    4724:	90 91 2f 02 	lds	r25, 0x022F
    4728:	00 97       	sbiw	r24, 0x00	; 0
    472a:	b1 f7       	brne	.-20     	; 0x4718 <Task_4+0x43a>
			deal_with_obstacle(0);			// find new path up to starting node
			
		}
	}

	left_turn_wls();//turn reverse
    472c:	0e 94 a6 09 	call	0x134c	; 0x134c <left_turn_wls>
    4730:	8f ef       	ldi	r24, 0xFF	; 255
    4732:	9f e7       	ldi	r25, 0x7F	; 127
    4734:	ad e0       	ldi	r26, 0x0D	; 13
    4736:	81 50       	subi	r24, 0x01	; 1
    4738:	90 40       	sbci	r25, 0x00	; 0
    473a:	a0 40       	sbci	r26, 0x00	; 0
    473c:	e1 f7       	brne	.-8      	; 0x4736 <Task_4+0x458>
    473e:	00 c0       	rjmp	.+0      	; 0x4740 <Task_4+0x462>
    4740:	00 00       	nop
	_delay_ms(300);

	stop();//stop the bot
    4742:	0e 94 3a 05 	call	0xa74	; 0xa74 <stop>
    4746:	8f ef       	ldi	r24, 0xFF	; 255
    4748:	9f ef       	ldi	r25, 0xFF	; 255
    474a:	a9 e5       	ldi	r26, 0x59	; 89
    474c:	81 50       	subi	r24, 0x01	; 1
    474e:	90 40       	sbci	r25, 0x00	; 0
    4750:	a0 40       	sbci	r26, 0x00	; 0
    4752:	e1 f7       	brne	.-8      	; 0x474c <Task_4+0x46e>
    4754:	00 c0       	rjmp	.+0      	; 0x4756 <Task_4+0x478>
    4756:	00 00       	nop


	
	

}
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	1f 91       	pop	r17
    475e:	0f 91       	pop	r16
    4760:	ff 90       	pop	r15
    4762:	ef 90       	pop	r14
    4764:	df 90       	pop	r13
    4766:	cf 90       	pop	r12
    4768:	bf 90       	pop	r11
    476a:	af 90       	pop	r10
    476c:	9f 90       	pop	r9
    476e:	8f 90       	pop	r8
    4770:	7f 90       	pop	r7
    4772:	6f 90       	pop	r6
    4774:	08 95       	ret

00004776 <main>:



int main(void)
{
	init_devices();
    4776:	0e 94 a8 05 	call	0xb50	; 0xb50 <init_devices>
	
	
	lcd_cursor(2,1);
    477a:	82 e0       	ldi	r24, 0x02	; 2
    477c:	61 e0       	ldi	r22, 0x01	; 1
    477e:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
	lcd_string("Dist:");
    4782:	84 e0       	ldi	r24, 0x04	; 4
    4784:	92 e0       	ldi	r25, 0x02	; 2
    4786:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_string>
	
	lcd_cursor(2,11);
    478a:	82 e0       	ldi	r24, 0x02	; 2
    478c:	6b e0       	ldi	r22, 0x0B	; 11
    478e:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
	lcd_string("Nxt:");
    4792:	8a e0       	ldi	r24, 0x0A	; 10
    4794:	92 e0       	ldi	r25, 0x02	; 2
    4796:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_string>
	
	lcd_cursor(1,13);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	6d e0       	ldi	r22, 0x0D	; 13
    479e:	0e 94 94 01 	call	0x328	; 0x328 <lcd_cursor>
	lcd_string("C:");
    47a2:	8f e0       	ldi	r24, 0x0F	; 15
    47a4:	92 e0       	ldi	r25, 0x02	; 2
    47a6:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_string>
		
	Task_4();
    47aa:	0e 94 6f 21 	call	0x42de	; 0x42de <Task_4>
	buzzer_on();
    47ae:	0e 94 2e 04 	call	0x85c	; 0x85c <buzzer_on>
    47b2:	ff cf       	rjmp	.-2      	; 0x47b2 <main+0x3c>

000047b4 <__subsf3>:
    47b4:	50 58       	subi	r21, 0x80	; 128

000047b6 <__addsf3>:
    47b6:	bb 27       	eor	r27, r27
    47b8:	aa 27       	eor	r26, r26
    47ba:	0e d0       	rcall	.+28     	; 0x47d8 <__addsf3x>
    47bc:	4d c1       	rjmp	.+666    	; 0x4a58 <__fp_round>
    47be:	3e d1       	rcall	.+636    	; 0x4a3c <__fp_pscA>
    47c0:	30 f0       	brcs	.+12     	; 0x47ce <__addsf3+0x18>
    47c2:	43 d1       	rcall	.+646    	; 0x4a4a <__fp_pscB>
    47c4:	20 f0       	brcs	.+8      	; 0x47ce <__addsf3+0x18>
    47c6:	31 f4       	brne	.+12     	; 0x47d4 <__addsf3+0x1e>
    47c8:	9f 3f       	cpi	r25, 0xFF	; 255
    47ca:	11 f4       	brne	.+4      	; 0x47d0 <__addsf3+0x1a>
    47cc:	1e f4       	brtc	.+6      	; 0x47d4 <__addsf3+0x1e>
    47ce:	33 c1       	rjmp	.+614    	; 0x4a36 <__fp_nan>
    47d0:	0e f4       	brtc	.+2      	; 0x47d4 <__addsf3+0x1e>
    47d2:	e0 95       	com	r30
    47d4:	e7 fb       	bst	r30, 7
    47d6:	29 c1       	rjmp	.+594    	; 0x4a2a <__fp_inf>

000047d8 <__addsf3x>:
    47d8:	e9 2f       	mov	r30, r25
    47da:	4f d1       	rcall	.+670    	; 0x4a7a <__fp_split3>
    47dc:	80 f3       	brcs	.-32     	; 0x47be <__addsf3+0x8>
    47de:	ba 17       	cp	r27, r26
    47e0:	62 07       	cpc	r22, r18
    47e2:	73 07       	cpc	r23, r19
    47e4:	84 07       	cpc	r24, r20
    47e6:	95 07       	cpc	r25, r21
    47e8:	18 f0       	brcs	.+6      	; 0x47f0 <__addsf3x+0x18>
    47ea:	71 f4       	brne	.+28     	; 0x4808 <__addsf3x+0x30>
    47ec:	9e f5       	brtc	.+102    	; 0x4854 <__addsf3x+0x7c>
    47ee:	67 c1       	rjmp	.+718    	; 0x4abe <__fp_zero>
    47f0:	0e f4       	brtc	.+2      	; 0x47f4 <__addsf3x+0x1c>
    47f2:	e0 95       	com	r30
    47f4:	0b 2e       	mov	r0, r27
    47f6:	ba 2f       	mov	r27, r26
    47f8:	a0 2d       	mov	r26, r0
    47fa:	0b 01       	movw	r0, r22
    47fc:	b9 01       	movw	r22, r18
    47fe:	90 01       	movw	r18, r0
    4800:	0c 01       	movw	r0, r24
    4802:	ca 01       	movw	r24, r20
    4804:	a0 01       	movw	r20, r0
    4806:	11 24       	eor	r1, r1
    4808:	ff 27       	eor	r31, r31
    480a:	59 1b       	sub	r21, r25
    480c:	99 f0       	breq	.+38     	; 0x4834 <__addsf3x+0x5c>
    480e:	59 3f       	cpi	r21, 0xF9	; 249
    4810:	50 f4       	brcc	.+20     	; 0x4826 <__addsf3x+0x4e>
    4812:	50 3e       	cpi	r21, 0xE0	; 224
    4814:	68 f1       	brcs	.+90     	; 0x4870 <__addsf3x+0x98>
    4816:	1a 16       	cp	r1, r26
    4818:	f0 40       	sbci	r31, 0x00	; 0
    481a:	a2 2f       	mov	r26, r18
    481c:	23 2f       	mov	r18, r19
    481e:	34 2f       	mov	r19, r20
    4820:	44 27       	eor	r20, r20
    4822:	58 5f       	subi	r21, 0xF8	; 248
    4824:	f3 cf       	rjmp	.-26     	; 0x480c <__addsf3x+0x34>
    4826:	46 95       	lsr	r20
    4828:	37 95       	ror	r19
    482a:	27 95       	ror	r18
    482c:	a7 95       	ror	r26
    482e:	f0 40       	sbci	r31, 0x00	; 0
    4830:	53 95       	inc	r21
    4832:	c9 f7       	brne	.-14     	; 0x4826 <__addsf3x+0x4e>
    4834:	7e f4       	brtc	.+30     	; 0x4854 <__addsf3x+0x7c>
    4836:	1f 16       	cp	r1, r31
    4838:	ba 0b       	sbc	r27, r26
    483a:	62 0b       	sbc	r22, r18
    483c:	73 0b       	sbc	r23, r19
    483e:	84 0b       	sbc	r24, r20
    4840:	ba f0       	brmi	.+46     	; 0x4870 <__addsf3x+0x98>
    4842:	91 50       	subi	r25, 0x01	; 1
    4844:	a1 f0       	breq	.+40     	; 0x486e <__addsf3x+0x96>
    4846:	ff 0f       	add	r31, r31
    4848:	bb 1f       	adc	r27, r27
    484a:	66 1f       	adc	r22, r22
    484c:	77 1f       	adc	r23, r23
    484e:	88 1f       	adc	r24, r24
    4850:	c2 f7       	brpl	.-16     	; 0x4842 <__addsf3x+0x6a>
    4852:	0e c0       	rjmp	.+28     	; 0x4870 <__addsf3x+0x98>
    4854:	ba 0f       	add	r27, r26
    4856:	62 1f       	adc	r22, r18
    4858:	73 1f       	adc	r23, r19
    485a:	84 1f       	adc	r24, r20
    485c:	48 f4       	brcc	.+18     	; 0x4870 <__addsf3x+0x98>
    485e:	87 95       	ror	r24
    4860:	77 95       	ror	r23
    4862:	67 95       	ror	r22
    4864:	b7 95       	ror	r27
    4866:	f7 95       	ror	r31
    4868:	9e 3f       	cpi	r25, 0xFE	; 254
    486a:	08 f0       	brcs	.+2      	; 0x486e <__addsf3x+0x96>
    486c:	b3 cf       	rjmp	.-154    	; 0x47d4 <__addsf3+0x1e>
    486e:	93 95       	inc	r25
    4870:	88 0f       	add	r24, r24
    4872:	08 f0       	brcs	.+2      	; 0x4876 <__addsf3x+0x9e>
    4874:	99 27       	eor	r25, r25
    4876:	ee 0f       	add	r30, r30
    4878:	97 95       	ror	r25
    487a:	87 95       	ror	r24
    487c:	08 95       	ret

0000487e <__divsf3>:
    487e:	0c d0       	rcall	.+24     	; 0x4898 <__divsf3x>
    4880:	eb c0       	rjmp	.+470    	; 0x4a58 <__fp_round>
    4882:	e3 d0       	rcall	.+454    	; 0x4a4a <__fp_pscB>
    4884:	40 f0       	brcs	.+16     	; 0x4896 <__divsf3+0x18>
    4886:	da d0       	rcall	.+436    	; 0x4a3c <__fp_pscA>
    4888:	30 f0       	brcs	.+12     	; 0x4896 <__divsf3+0x18>
    488a:	21 f4       	brne	.+8      	; 0x4894 <__divsf3+0x16>
    488c:	5f 3f       	cpi	r21, 0xFF	; 255
    488e:	19 f0       	breq	.+6      	; 0x4896 <__divsf3+0x18>
    4890:	cc c0       	rjmp	.+408    	; 0x4a2a <__fp_inf>
    4892:	51 11       	cpse	r21, r1
    4894:	15 c1       	rjmp	.+554    	; 0x4ac0 <__fp_szero>
    4896:	cf c0       	rjmp	.+414    	; 0x4a36 <__fp_nan>

00004898 <__divsf3x>:
    4898:	f0 d0       	rcall	.+480    	; 0x4a7a <__fp_split3>
    489a:	98 f3       	brcs	.-26     	; 0x4882 <__divsf3+0x4>

0000489c <__divsf3_pse>:
    489c:	99 23       	and	r25, r25
    489e:	c9 f3       	breq	.-14     	; 0x4892 <__divsf3+0x14>
    48a0:	55 23       	and	r21, r21
    48a2:	b1 f3       	breq	.-20     	; 0x4890 <__divsf3+0x12>
    48a4:	95 1b       	sub	r25, r21
    48a6:	55 0b       	sbc	r21, r21
    48a8:	bb 27       	eor	r27, r27
    48aa:	aa 27       	eor	r26, r26
    48ac:	62 17       	cp	r22, r18
    48ae:	73 07       	cpc	r23, r19
    48b0:	84 07       	cpc	r24, r20
    48b2:	38 f0       	brcs	.+14     	; 0x48c2 <__divsf3_pse+0x26>
    48b4:	9f 5f       	subi	r25, 0xFF	; 255
    48b6:	5f 4f       	sbci	r21, 0xFF	; 255
    48b8:	22 0f       	add	r18, r18
    48ba:	33 1f       	adc	r19, r19
    48bc:	44 1f       	adc	r20, r20
    48be:	aa 1f       	adc	r26, r26
    48c0:	a9 f3       	breq	.-22     	; 0x48ac <__divsf3_pse+0x10>
    48c2:	33 d0       	rcall	.+102    	; 0x492a <__divsf3_pse+0x8e>
    48c4:	0e 2e       	mov	r0, r30
    48c6:	3a f0       	brmi	.+14     	; 0x48d6 <__divsf3_pse+0x3a>
    48c8:	e0 e8       	ldi	r30, 0x80	; 128
    48ca:	30 d0       	rcall	.+96     	; 0x492c <__divsf3_pse+0x90>
    48cc:	91 50       	subi	r25, 0x01	; 1
    48ce:	50 40       	sbci	r21, 0x00	; 0
    48d0:	e6 95       	lsr	r30
    48d2:	00 1c       	adc	r0, r0
    48d4:	ca f7       	brpl	.-14     	; 0x48c8 <__divsf3_pse+0x2c>
    48d6:	29 d0       	rcall	.+82     	; 0x492a <__divsf3_pse+0x8e>
    48d8:	fe 2f       	mov	r31, r30
    48da:	27 d0       	rcall	.+78     	; 0x492a <__divsf3_pse+0x8e>
    48dc:	66 0f       	add	r22, r22
    48de:	77 1f       	adc	r23, r23
    48e0:	88 1f       	adc	r24, r24
    48e2:	bb 1f       	adc	r27, r27
    48e4:	26 17       	cp	r18, r22
    48e6:	37 07       	cpc	r19, r23
    48e8:	48 07       	cpc	r20, r24
    48ea:	ab 07       	cpc	r26, r27
    48ec:	b0 e8       	ldi	r27, 0x80	; 128
    48ee:	09 f0       	breq	.+2      	; 0x48f2 <__divsf3_pse+0x56>
    48f0:	bb 0b       	sbc	r27, r27
    48f2:	80 2d       	mov	r24, r0
    48f4:	bf 01       	movw	r22, r30
    48f6:	ff 27       	eor	r31, r31
    48f8:	93 58       	subi	r25, 0x83	; 131
    48fa:	5f 4f       	sbci	r21, 0xFF	; 255
    48fc:	2a f0       	brmi	.+10     	; 0x4908 <__divsf3_pse+0x6c>
    48fe:	9e 3f       	cpi	r25, 0xFE	; 254
    4900:	51 05       	cpc	r21, r1
    4902:	68 f0       	brcs	.+26     	; 0x491e <__divsf3_pse+0x82>
    4904:	92 c0       	rjmp	.+292    	; 0x4a2a <__fp_inf>
    4906:	dc c0       	rjmp	.+440    	; 0x4ac0 <__fp_szero>
    4908:	5f 3f       	cpi	r21, 0xFF	; 255
    490a:	ec f3       	brlt	.-6      	; 0x4906 <__divsf3_pse+0x6a>
    490c:	98 3e       	cpi	r25, 0xE8	; 232
    490e:	dc f3       	brlt	.-10     	; 0x4906 <__divsf3_pse+0x6a>
    4910:	86 95       	lsr	r24
    4912:	77 95       	ror	r23
    4914:	67 95       	ror	r22
    4916:	b7 95       	ror	r27
    4918:	f7 95       	ror	r31
    491a:	9f 5f       	subi	r25, 0xFF	; 255
    491c:	c9 f7       	brne	.-14     	; 0x4910 <__divsf3_pse+0x74>
    491e:	88 0f       	add	r24, r24
    4920:	91 1d       	adc	r25, r1
    4922:	96 95       	lsr	r25
    4924:	87 95       	ror	r24
    4926:	97 f9       	bld	r25, 7
    4928:	08 95       	ret
    492a:	e1 e0       	ldi	r30, 0x01	; 1
    492c:	66 0f       	add	r22, r22
    492e:	77 1f       	adc	r23, r23
    4930:	88 1f       	adc	r24, r24
    4932:	bb 1f       	adc	r27, r27
    4934:	62 17       	cp	r22, r18
    4936:	73 07       	cpc	r23, r19
    4938:	84 07       	cpc	r24, r20
    493a:	ba 07       	cpc	r27, r26
    493c:	20 f0       	brcs	.+8      	; 0x4946 <__divsf3_pse+0xaa>
    493e:	62 1b       	sub	r22, r18
    4940:	73 0b       	sbc	r23, r19
    4942:	84 0b       	sbc	r24, r20
    4944:	ba 0b       	sbc	r27, r26
    4946:	ee 1f       	adc	r30, r30
    4948:	88 f7       	brcc	.-30     	; 0x492c <__divsf3_pse+0x90>
    494a:	e0 95       	com	r30
    494c:	08 95       	ret

0000494e <__fixsfsi>:
    494e:	04 d0       	rcall	.+8      	; 0x4958 <__fixunssfsi>
    4950:	68 94       	set
    4952:	b1 11       	cpse	r27, r1
    4954:	b5 c0       	rjmp	.+362    	; 0x4ac0 <__fp_szero>
    4956:	08 95       	ret

00004958 <__fixunssfsi>:
    4958:	98 d0       	rcall	.+304    	; 0x4a8a <__fp_splitA>
    495a:	88 f0       	brcs	.+34     	; 0x497e <__fixunssfsi+0x26>
    495c:	9f 57       	subi	r25, 0x7F	; 127
    495e:	90 f0       	brcs	.+36     	; 0x4984 <__fixunssfsi+0x2c>
    4960:	b9 2f       	mov	r27, r25
    4962:	99 27       	eor	r25, r25
    4964:	b7 51       	subi	r27, 0x17	; 23
    4966:	a0 f0       	brcs	.+40     	; 0x4990 <__fixunssfsi+0x38>
    4968:	d1 f0       	breq	.+52     	; 0x499e <__fixunssfsi+0x46>
    496a:	66 0f       	add	r22, r22
    496c:	77 1f       	adc	r23, r23
    496e:	88 1f       	adc	r24, r24
    4970:	99 1f       	adc	r25, r25
    4972:	1a f0       	brmi	.+6      	; 0x497a <__fixunssfsi+0x22>
    4974:	ba 95       	dec	r27
    4976:	c9 f7       	brne	.-14     	; 0x496a <__fixunssfsi+0x12>
    4978:	12 c0       	rjmp	.+36     	; 0x499e <__fixunssfsi+0x46>
    497a:	b1 30       	cpi	r27, 0x01	; 1
    497c:	81 f0       	breq	.+32     	; 0x499e <__fixunssfsi+0x46>
    497e:	9f d0       	rcall	.+318    	; 0x4abe <__fp_zero>
    4980:	b1 e0       	ldi	r27, 0x01	; 1
    4982:	08 95       	ret
    4984:	9c c0       	rjmp	.+312    	; 0x4abe <__fp_zero>
    4986:	67 2f       	mov	r22, r23
    4988:	78 2f       	mov	r23, r24
    498a:	88 27       	eor	r24, r24
    498c:	b8 5f       	subi	r27, 0xF8	; 248
    498e:	39 f0       	breq	.+14     	; 0x499e <__fixunssfsi+0x46>
    4990:	b9 3f       	cpi	r27, 0xF9	; 249
    4992:	cc f3       	brlt	.-14     	; 0x4986 <__fixunssfsi+0x2e>
    4994:	86 95       	lsr	r24
    4996:	77 95       	ror	r23
    4998:	67 95       	ror	r22
    499a:	b3 95       	inc	r27
    499c:	d9 f7       	brne	.-10     	; 0x4994 <__fixunssfsi+0x3c>
    499e:	3e f4       	brtc	.+14     	; 0x49ae <__fixunssfsi+0x56>
    49a0:	90 95       	com	r25
    49a2:	80 95       	com	r24
    49a4:	70 95       	com	r23
    49a6:	61 95       	neg	r22
    49a8:	7f 4f       	sbci	r23, 0xFF	; 255
    49aa:	8f 4f       	sbci	r24, 0xFF	; 255
    49ac:	9f 4f       	sbci	r25, 0xFF	; 255
    49ae:	08 95       	ret

000049b0 <__floatunsisf>:
    49b0:	e8 94       	clt
    49b2:	09 c0       	rjmp	.+18     	; 0x49c6 <__floatsisf+0x12>

000049b4 <__floatsisf>:
    49b4:	97 fb       	bst	r25, 7
    49b6:	3e f4       	brtc	.+14     	; 0x49c6 <__floatsisf+0x12>
    49b8:	90 95       	com	r25
    49ba:	80 95       	com	r24
    49bc:	70 95       	com	r23
    49be:	61 95       	neg	r22
    49c0:	7f 4f       	sbci	r23, 0xFF	; 255
    49c2:	8f 4f       	sbci	r24, 0xFF	; 255
    49c4:	9f 4f       	sbci	r25, 0xFF	; 255
    49c6:	99 23       	and	r25, r25
    49c8:	a9 f0       	breq	.+42     	; 0x49f4 <__floatsisf+0x40>
    49ca:	f9 2f       	mov	r31, r25
    49cc:	96 e9       	ldi	r25, 0x96	; 150
    49ce:	bb 27       	eor	r27, r27
    49d0:	93 95       	inc	r25
    49d2:	f6 95       	lsr	r31
    49d4:	87 95       	ror	r24
    49d6:	77 95       	ror	r23
    49d8:	67 95       	ror	r22
    49da:	b7 95       	ror	r27
    49dc:	f1 11       	cpse	r31, r1
    49de:	f8 cf       	rjmp	.-16     	; 0x49d0 <__floatsisf+0x1c>
    49e0:	fa f4       	brpl	.+62     	; 0x4a20 <__floatsisf+0x6c>
    49e2:	bb 0f       	add	r27, r27
    49e4:	11 f4       	brne	.+4      	; 0x49ea <__floatsisf+0x36>
    49e6:	60 ff       	sbrs	r22, 0
    49e8:	1b c0       	rjmp	.+54     	; 0x4a20 <__floatsisf+0x6c>
    49ea:	6f 5f       	subi	r22, 0xFF	; 255
    49ec:	7f 4f       	sbci	r23, 0xFF	; 255
    49ee:	8f 4f       	sbci	r24, 0xFF	; 255
    49f0:	9f 4f       	sbci	r25, 0xFF	; 255
    49f2:	16 c0       	rjmp	.+44     	; 0x4a20 <__floatsisf+0x6c>
    49f4:	88 23       	and	r24, r24
    49f6:	11 f0       	breq	.+4      	; 0x49fc <__floatsisf+0x48>
    49f8:	96 e9       	ldi	r25, 0x96	; 150
    49fa:	11 c0       	rjmp	.+34     	; 0x4a1e <__floatsisf+0x6a>
    49fc:	77 23       	and	r23, r23
    49fe:	21 f0       	breq	.+8      	; 0x4a08 <__floatsisf+0x54>
    4a00:	9e e8       	ldi	r25, 0x8E	; 142
    4a02:	87 2f       	mov	r24, r23
    4a04:	76 2f       	mov	r23, r22
    4a06:	05 c0       	rjmp	.+10     	; 0x4a12 <__floatsisf+0x5e>
    4a08:	66 23       	and	r22, r22
    4a0a:	71 f0       	breq	.+28     	; 0x4a28 <__floatsisf+0x74>
    4a0c:	96 e8       	ldi	r25, 0x86	; 134
    4a0e:	86 2f       	mov	r24, r22
    4a10:	70 e0       	ldi	r23, 0x00	; 0
    4a12:	60 e0       	ldi	r22, 0x00	; 0
    4a14:	2a f0       	brmi	.+10     	; 0x4a20 <__floatsisf+0x6c>
    4a16:	9a 95       	dec	r25
    4a18:	66 0f       	add	r22, r22
    4a1a:	77 1f       	adc	r23, r23
    4a1c:	88 1f       	adc	r24, r24
    4a1e:	da f7       	brpl	.-10     	; 0x4a16 <__floatsisf+0x62>
    4a20:	88 0f       	add	r24, r24
    4a22:	96 95       	lsr	r25
    4a24:	87 95       	ror	r24
    4a26:	97 f9       	bld	r25, 7
    4a28:	08 95       	ret

00004a2a <__fp_inf>:
    4a2a:	97 f9       	bld	r25, 7
    4a2c:	9f 67       	ori	r25, 0x7F	; 127
    4a2e:	80 e8       	ldi	r24, 0x80	; 128
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	60 e0       	ldi	r22, 0x00	; 0
    4a34:	08 95       	ret

00004a36 <__fp_nan>:
    4a36:	9f ef       	ldi	r25, 0xFF	; 255
    4a38:	80 ec       	ldi	r24, 0xC0	; 192
    4a3a:	08 95       	ret

00004a3c <__fp_pscA>:
    4a3c:	00 24       	eor	r0, r0
    4a3e:	0a 94       	dec	r0
    4a40:	16 16       	cp	r1, r22
    4a42:	17 06       	cpc	r1, r23
    4a44:	18 06       	cpc	r1, r24
    4a46:	09 06       	cpc	r0, r25
    4a48:	08 95       	ret

00004a4a <__fp_pscB>:
    4a4a:	00 24       	eor	r0, r0
    4a4c:	0a 94       	dec	r0
    4a4e:	12 16       	cp	r1, r18
    4a50:	13 06       	cpc	r1, r19
    4a52:	14 06       	cpc	r1, r20
    4a54:	05 06       	cpc	r0, r21
    4a56:	08 95       	ret

00004a58 <__fp_round>:
    4a58:	09 2e       	mov	r0, r25
    4a5a:	03 94       	inc	r0
    4a5c:	00 0c       	add	r0, r0
    4a5e:	11 f4       	brne	.+4      	; 0x4a64 <__fp_round+0xc>
    4a60:	88 23       	and	r24, r24
    4a62:	52 f0       	brmi	.+20     	; 0x4a78 <__fp_round+0x20>
    4a64:	bb 0f       	add	r27, r27
    4a66:	40 f4       	brcc	.+16     	; 0x4a78 <__fp_round+0x20>
    4a68:	bf 2b       	or	r27, r31
    4a6a:	11 f4       	brne	.+4      	; 0x4a70 <__fp_round+0x18>
    4a6c:	60 ff       	sbrs	r22, 0
    4a6e:	04 c0       	rjmp	.+8      	; 0x4a78 <__fp_round+0x20>
    4a70:	6f 5f       	subi	r22, 0xFF	; 255
    4a72:	7f 4f       	sbci	r23, 0xFF	; 255
    4a74:	8f 4f       	sbci	r24, 0xFF	; 255
    4a76:	9f 4f       	sbci	r25, 0xFF	; 255
    4a78:	08 95       	ret

00004a7a <__fp_split3>:
    4a7a:	57 fd       	sbrc	r21, 7
    4a7c:	90 58       	subi	r25, 0x80	; 128
    4a7e:	44 0f       	add	r20, r20
    4a80:	55 1f       	adc	r21, r21
    4a82:	59 f0       	breq	.+22     	; 0x4a9a <__fp_splitA+0x10>
    4a84:	5f 3f       	cpi	r21, 0xFF	; 255
    4a86:	71 f0       	breq	.+28     	; 0x4aa4 <__fp_splitA+0x1a>
    4a88:	47 95       	ror	r20

00004a8a <__fp_splitA>:
    4a8a:	88 0f       	add	r24, r24
    4a8c:	97 fb       	bst	r25, 7
    4a8e:	99 1f       	adc	r25, r25
    4a90:	61 f0       	breq	.+24     	; 0x4aaa <__fp_splitA+0x20>
    4a92:	9f 3f       	cpi	r25, 0xFF	; 255
    4a94:	79 f0       	breq	.+30     	; 0x4ab4 <__fp_splitA+0x2a>
    4a96:	87 95       	ror	r24
    4a98:	08 95       	ret
    4a9a:	12 16       	cp	r1, r18
    4a9c:	13 06       	cpc	r1, r19
    4a9e:	14 06       	cpc	r1, r20
    4aa0:	55 1f       	adc	r21, r21
    4aa2:	f2 cf       	rjmp	.-28     	; 0x4a88 <__fp_split3+0xe>
    4aa4:	46 95       	lsr	r20
    4aa6:	f1 df       	rcall	.-30     	; 0x4a8a <__fp_splitA>
    4aa8:	08 c0       	rjmp	.+16     	; 0x4aba <__fp_splitA+0x30>
    4aaa:	16 16       	cp	r1, r22
    4aac:	17 06       	cpc	r1, r23
    4aae:	18 06       	cpc	r1, r24
    4ab0:	99 1f       	adc	r25, r25
    4ab2:	f1 cf       	rjmp	.-30     	; 0x4a96 <__fp_splitA+0xc>
    4ab4:	86 95       	lsr	r24
    4ab6:	71 05       	cpc	r23, r1
    4ab8:	61 05       	cpc	r22, r1
    4aba:	08 94       	sec
    4abc:	08 95       	ret

00004abe <__fp_zero>:
    4abe:	e8 94       	clt

00004ac0 <__fp_szero>:
    4ac0:	bb 27       	eor	r27, r27
    4ac2:	66 27       	eor	r22, r22
    4ac4:	77 27       	eor	r23, r23
    4ac6:	cb 01       	movw	r24, r22
    4ac8:	97 f9       	bld	r25, 7
    4aca:	08 95       	ret

00004acc <__mulsf3>:
    4acc:	0b d0       	rcall	.+22     	; 0x4ae4 <__mulsf3x>
    4ace:	c4 cf       	rjmp	.-120    	; 0x4a58 <__fp_round>
    4ad0:	b5 df       	rcall	.-150    	; 0x4a3c <__fp_pscA>
    4ad2:	28 f0       	brcs	.+10     	; 0x4ade <__mulsf3+0x12>
    4ad4:	ba df       	rcall	.-140    	; 0x4a4a <__fp_pscB>
    4ad6:	18 f0       	brcs	.+6      	; 0x4ade <__mulsf3+0x12>
    4ad8:	95 23       	and	r25, r21
    4ada:	09 f0       	breq	.+2      	; 0x4ade <__mulsf3+0x12>
    4adc:	a6 cf       	rjmp	.-180    	; 0x4a2a <__fp_inf>
    4ade:	ab cf       	rjmp	.-170    	; 0x4a36 <__fp_nan>
    4ae0:	11 24       	eor	r1, r1
    4ae2:	ee cf       	rjmp	.-36     	; 0x4ac0 <__fp_szero>

00004ae4 <__mulsf3x>:
    4ae4:	ca df       	rcall	.-108    	; 0x4a7a <__fp_split3>
    4ae6:	a0 f3       	brcs	.-24     	; 0x4ad0 <__mulsf3+0x4>

00004ae8 <__mulsf3_pse>:
    4ae8:	95 9f       	mul	r25, r21
    4aea:	d1 f3       	breq	.-12     	; 0x4ae0 <__mulsf3+0x14>
    4aec:	95 0f       	add	r25, r21
    4aee:	50 e0       	ldi	r21, 0x00	; 0
    4af0:	55 1f       	adc	r21, r21
    4af2:	62 9f       	mul	r22, r18
    4af4:	f0 01       	movw	r30, r0
    4af6:	72 9f       	mul	r23, r18
    4af8:	bb 27       	eor	r27, r27
    4afa:	f0 0d       	add	r31, r0
    4afc:	b1 1d       	adc	r27, r1
    4afe:	63 9f       	mul	r22, r19
    4b00:	aa 27       	eor	r26, r26
    4b02:	f0 0d       	add	r31, r0
    4b04:	b1 1d       	adc	r27, r1
    4b06:	aa 1f       	adc	r26, r26
    4b08:	64 9f       	mul	r22, r20
    4b0a:	66 27       	eor	r22, r22
    4b0c:	b0 0d       	add	r27, r0
    4b0e:	a1 1d       	adc	r26, r1
    4b10:	66 1f       	adc	r22, r22
    4b12:	82 9f       	mul	r24, r18
    4b14:	22 27       	eor	r18, r18
    4b16:	b0 0d       	add	r27, r0
    4b18:	a1 1d       	adc	r26, r1
    4b1a:	62 1f       	adc	r22, r18
    4b1c:	73 9f       	mul	r23, r19
    4b1e:	b0 0d       	add	r27, r0
    4b20:	a1 1d       	adc	r26, r1
    4b22:	62 1f       	adc	r22, r18
    4b24:	83 9f       	mul	r24, r19
    4b26:	a0 0d       	add	r26, r0
    4b28:	61 1d       	adc	r22, r1
    4b2a:	22 1f       	adc	r18, r18
    4b2c:	74 9f       	mul	r23, r20
    4b2e:	33 27       	eor	r19, r19
    4b30:	a0 0d       	add	r26, r0
    4b32:	61 1d       	adc	r22, r1
    4b34:	23 1f       	adc	r18, r19
    4b36:	84 9f       	mul	r24, r20
    4b38:	60 0d       	add	r22, r0
    4b3a:	21 1d       	adc	r18, r1
    4b3c:	82 2f       	mov	r24, r18
    4b3e:	76 2f       	mov	r23, r22
    4b40:	6a 2f       	mov	r22, r26
    4b42:	11 24       	eor	r1, r1
    4b44:	9f 57       	subi	r25, 0x7F	; 127
    4b46:	50 40       	sbci	r21, 0x00	; 0
    4b48:	8a f0       	brmi	.+34     	; 0x4b6c <__mulsf3_pse+0x84>
    4b4a:	e1 f0       	breq	.+56     	; 0x4b84 <__mulsf3_pse+0x9c>
    4b4c:	88 23       	and	r24, r24
    4b4e:	4a f0       	brmi	.+18     	; 0x4b62 <__mulsf3_pse+0x7a>
    4b50:	ee 0f       	add	r30, r30
    4b52:	ff 1f       	adc	r31, r31
    4b54:	bb 1f       	adc	r27, r27
    4b56:	66 1f       	adc	r22, r22
    4b58:	77 1f       	adc	r23, r23
    4b5a:	88 1f       	adc	r24, r24
    4b5c:	91 50       	subi	r25, 0x01	; 1
    4b5e:	50 40       	sbci	r21, 0x00	; 0
    4b60:	a9 f7       	brne	.-22     	; 0x4b4c <__mulsf3_pse+0x64>
    4b62:	9e 3f       	cpi	r25, 0xFE	; 254
    4b64:	51 05       	cpc	r21, r1
    4b66:	70 f0       	brcs	.+28     	; 0x4b84 <__mulsf3_pse+0x9c>
    4b68:	60 cf       	rjmp	.-320    	; 0x4a2a <__fp_inf>
    4b6a:	aa cf       	rjmp	.-172    	; 0x4ac0 <__fp_szero>
    4b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    4b6e:	ec f3       	brlt	.-6      	; 0x4b6a <__mulsf3_pse+0x82>
    4b70:	98 3e       	cpi	r25, 0xE8	; 232
    4b72:	dc f3       	brlt	.-10     	; 0x4b6a <__mulsf3_pse+0x82>
    4b74:	86 95       	lsr	r24
    4b76:	77 95       	ror	r23
    4b78:	67 95       	ror	r22
    4b7a:	b7 95       	ror	r27
    4b7c:	f7 95       	ror	r31
    4b7e:	e7 95       	ror	r30
    4b80:	9f 5f       	subi	r25, 0xFF	; 255
    4b82:	c1 f7       	brne	.-16     	; 0x4b74 <__mulsf3_pse+0x8c>
    4b84:	fe 2b       	or	r31, r30
    4b86:	88 0f       	add	r24, r24
    4b88:	91 1d       	adc	r25, r1
    4b8a:	96 95       	lsr	r25
    4b8c:	87 95       	ror	r24
    4b8e:	97 f9       	bld	r25, 7
    4b90:	08 95       	ret

00004b92 <pow>:
    4b92:	fa 01       	movw	r30, r20
    4b94:	ee 0f       	add	r30, r30
    4b96:	ff 1f       	adc	r31, r31
    4b98:	30 96       	adiw	r30, 0x00	; 0
    4b9a:	21 05       	cpc	r18, r1
    4b9c:	31 05       	cpc	r19, r1
    4b9e:	99 f1       	breq	.+102    	; 0x4c06 <pow+0x74>
    4ba0:	61 15       	cp	r22, r1
    4ba2:	71 05       	cpc	r23, r1
    4ba4:	61 f4       	brne	.+24     	; 0x4bbe <pow+0x2c>
    4ba6:	80 38       	cpi	r24, 0x80	; 128
    4ba8:	bf e3       	ldi	r27, 0x3F	; 63
    4baa:	9b 07       	cpc	r25, r27
    4bac:	49 f1       	breq	.+82     	; 0x4c00 <pow+0x6e>
    4bae:	68 94       	set
    4bb0:	90 38       	cpi	r25, 0x80	; 128
    4bb2:	81 05       	cpc	r24, r1
    4bb4:	61 f0       	breq	.+24     	; 0x4bce <pow+0x3c>
    4bb6:	80 38       	cpi	r24, 0x80	; 128
    4bb8:	bf ef       	ldi	r27, 0xFF	; 255
    4bba:	9b 07       	cpc	r25, r27
    4bbc:	41 f0       	breq	.+16     	; 0x4bce <pow+0x3c>
    4bbe:	99 23       	and	r25, r25
    4bc0:	42 f5       	brpl	.+80     	; 0x4c12 <pow+0x80>
    4bc2:	ff 3f       	cpi	r31, 0xFF	; 255
    4bc4:	e1 05       	cpc	r30, r1
    4bc6:	31 05       	cpc	r19, r1
    4bc8:	21 05       	cpc	r18, r1
    4bca:	11 f1       	breq	.+68     	; 0x4c10 <pow+0x7e>
    4bcc:	e8 94       	clt
    4bce:	08 94       	sec
    4bd0:	e7 95       	ror	r30
    4bd2:	d9 01       	movw	r26, r18
    4bd4:	aa 23       	and	r26, r26
    4bd6:	29 f4       	brne	.+10     	; 0x4be2 <pow+0x50>
    4bd8:	ab 2f       	mov	r26, r27
    4bda:	be 2f       	mov	r27, r30
    4bdc:	f8 5f       	subi	r31, 0xF8	; 248
    4bde:	d0 f3       	brcs	.-12     	; 0x4bd4 <pow+0x42>
    4be0:	10 c0       	rjmp	.+32     	; 0x4c02 <pow+0x70>
    4be2:	ff 5f       	subi	r31, 0xFF	; 255
    4be4:	70 f4       	brcc	.+28     	; 0x4c02 <pow+0x70>
    4be6:	a6 95       	lsr	r26
    4be8:	e0 f7       	brcc	.-8      	; 0x4be2 <pow+0x50>
    4bea:	f7 39       	cpi	r31, 0x97	; 151
    4bec:	50 f0       	brcs	.+20     	; 0x4c02 <pow+0x70>
    4bee:	19 f0       	breq	.+6      	; 0x4bf6 <pow+0x64>
    4bf0:	ff 3a       	cpi	r31, 0xAF	; 175
    4bf2:	38 f4       	brcc	.+14     	; 0x4c02 <pow+0x70>
    4bf4:	9f 77       	andi	r25, 0x7F	; 127
    4bf6:	9f 93       	push	r25
    4bf8:	0c d0       	rcall	.+24     	; 0x4c12 <pow+0x80>
    4bfa:	0f 90       	pop	r0
    4bfc:	07 fc       	sbrc	r0, 7
    4bfe:	90 58       	subi	r25, 0x80	; 128
    4c00:	08 95       	ret
    4c02:	3e f0       	brts	.+14     	; 0x4c12 <pow+0x80>
    4c04:	18 cf       	rjmp	.-464    	; 0x4a36 <__fp_nan>
    4c06:	60 e0       	ldi	r22, 0x00	; 0
    4c08:	70 e0       	ldi	r23, 0x00	; 0
    4c0a:	80 e8       	ldi	r24, 0x80	; 128
    4c0c:	9f e3       	ldi	r25, 0x3F	; 63
    4c0e:	08 95       	ret
    4c10:	4f e7       	ldi	r20, 0x7F	; 127
    4c12:	9f 77       	andi	r25, 0x7F	; 127
    4c14:	5f 93       	push	r21
    4c16:	4f 93       	push	r20
    4c18:	3f 93       	push	r19
    4c1a:	2f 93       	push	r18
    4c1c:	9e d0       	rcall	.+316    	; 0x4d5a <log>
    4c1e:	2f 91       	pop	r18
    4c20:	3f 91       	pop	r19
    4c22:	4f 91       	pop	r20
    4c24:	5f 91       	pop	r21
    4c26:	52 df       	rcall	.-348    	; 0x4acc <__mulsf3>
    4c28:	05 c0       	rjmp	.+10     	; 0x4c34 <exp>
    4c2a:	19 f4       	brne	.+6      	; 0x4c32 <pow+0xa0>
    4c2c:	0e f0       	brts	.+2      	; 0x4c30 <pow+0x9e>
    4c2e:	fd ce       	rjmp	.-518    	; 0x4a2a <__fp_inf>
    4c30:	46 cf       	rjmp	.-372    	; 0x4abe <__fp_zero>
    4c32:	01 cf       	rjmp	.-510    	; 0x4a36 <__fp_nan>

00004c34 <exp>:
    4c34:	2a df       	rcall	.-428    	; 0x4a8a <__fp_splitA>
    4c36:	c8 f3       	brcs	.-14     	; 0x4c2a <pow+0x98>
    4c38:	96 38       	cpi	r25, 0x86	; 134
    4c3a:	c0 f7       	brcc	.-16     	; 0x4c2c <pow+0x9a>
    4c3c:	07 f8       	bld	r0, 7
    4c3e:	0f 92       	push	r0
    4c40:	e8 94       	clt
    4c42:	2b e3       	ldi	r18, 0x3B	; 59
    4c44:	3a ea       	ldi	r19, 0xAA	; 170
    4c46:	48 eb       	ldi	r20, 0xB8	; 184
    4c48:	5f e7       	ldi	r21, 0x7F	; 127
    4c4a:	4e df       	rcall	.-356    	; 0x4ae8 <__mulsf3_pse>
    4c4c:	0f 92       	push	r0
    4c4e:	0f 92       	push	r0
    4c50:	0f 92       	push	r0
    4c52:	4d b7       	in	r20, 0x3d	; 61
    4c54:	5e b7       	in	r21, 0x3e	; 62
    4c56:	0f 92       	push	r0
    4c58:	c0 d0       	rcall	.+384    	; 0x4dda <modf>
    4c5a:	e4 ee       	ldi	r30, 0xE4	; 228
    4c5c:	f0 e0       	ldi	r31, 0x00	; 0
    4c5e:	16 d0       	rcall	.+44     	; 0x4c8c <__fp_powser>
    4c60:	4f 91       	pop	r20
    4c62:	5f 91       	pop	r21
    4c64:	ef 91       	pop	r30
    4c66:	ff 91       	pop	r31
    4c68:	e5 95       	asr	r30
    4c6a:	ee 1f       	adc	r30, r30
    4c6c:	ff 1f       	adc	r31, r31
    4c6e:	49 f0       	breq	.+18     	; 0x4c82 <exp+0x4e>
    4c70:	fe 57       	subi	r31, 0x7E	; 126
    4c72:	e0 68       	ori	r30, 0x80	; 128
    4c74:	44 27       	eor	r20, r20
    4c76:	ee 0f       	add	r30, r30
    4c78:	44 1f       	adc	r20, r20
    4c7a:	fa 95       	dec	r31
    4c7c:	e1 f7       	brne	.-8      	; 0x4c76 <exp+0x42>
    4c7e:	41 95       	neg	r20
    4c80:	55 0b       	sbc	r21, r21
    4c82:	32 d0       	rcall	.+100    	; 0x4ce8 <ldexp>
    4c84:	0f 90       	pop	r0
    4c86:	07 fe       	sbrs	r0, 7
    4c88:	26 c0       	rjmp	.+76     	; 0x4cd6 <inverse>
    4c8a:	08 95       	ret

00004c8c <__fp_powser>:
    4c8c:	df 93       	push	r29
    4c8e:	cf 93       	push	r28
    4c90:	1f 93       	push	r17
    4c92:	0f 93       	push	r16
    4c94:	ff 92       	push	r15
    4c96:	ef 92       	push	r14
    4c98:	df 92       	push	r13
    4c9a:	7b 01       	movw	r14, r22
    4c9c:	8c 01       	movw	r16, r24
    4c9e:	68 94       	set
    4ca0:	05 c0       	rjmp	.+10     	; 0x4cac <__fp_powser+0x20>
    4ca2:	da 2e       	mov	r13, r26
    4ca4:	ef 01       	movw	r28, r30
    4ca6:	1e df       	rcall	.-452    	; 0x4ae4 <__mulsf3x>
    4ca8:	fe 01       	movw	r30, r28
    4caa:	e8 94       	clt
    4cac:	a5 91       	lpm	r26, Z+
    4cae:	25 91       	lpm	r18, Z+
    4cb0:	35 91       	lpm	r19, Z+
    4cb2:	45 91       	lpm	r20, Z+
    4cb4:	55 91       	lpm	r21, Z+
    4cb6:	ae f3       	brts	.-22     	; 0x4ca2 <__fp_powser+0x16>
    4cb8:	ef 01       	movw	r28, r30
    4cba:	8e dd       	rcall	.-1252   	; 0x47d8 <__addsf3x>
    4cbc:	fe 01       	movw	r30, r28
    4cbe:	97 01       	movw	r18, r14
    4cc0:	a8 01       	movw	r20, r16
    4cc2:	da 94       	dec	r13
    4cc4:	79 f7       	brne	.-34     	; 0x4ca4 <__fp_powser+0x18>
    4cc6:	df 90       	pop	r13
    4cc8:	ef 90       	pop	r14
    4cca:	ff 90       	pop	r15
    4ccc:	0f 91       	pop	r16
    4cce:	1f 91       	pop	r17
    4cd0:	cf 91       	pop	r28
    4cd2:	df 91       	pop	r29
    4cd4:	08 95       	ret

00004cd6 <inverse>:
    4cd6:	9b 01       	movw	r18, r22
    4cd8:	ac 01       	movw	r20, r24
    4cda:	60 e0       	ldi	r22, 0x00	; 0
    4cdc:	70 e0       	ldi	r23, 0x00	; 0
    4cde:	80 e8       	ldi	r24, 0x80	; 128
    4ce0:	9f e3       	ldi	r25, 0x3F	; 63
    4ce2:	cd cd       	rjmp	.-1126   	; 0x487e <__divsf3>
    4ce4:	a2 ce       	rjmp	.-700    	; 0x4a2a <__fp_inf>
    4ce6:	ac c0       	rjmp	.+344    	; 0x4e40 <__fp_mpack>

00004ce8 <ldexp>:
    4ce8:	d0 de       	rcall	.-608    	; 0x4a8a <__fp_splitA>
    4cea:	e8 f3       	brcs	.-6      	; 0x4ce6 <inverse+0x10>
    4cec:	99 23       	and	r25, r25
    4cee:	d9 f3       	breq	.-10     	; 0x4ce6 <inverse+0x10>
    4cf0:	94 0f       	add	r25, r20
    4cf2:	51 1d       	adc	r21, r1
    4cf4:	bb f3       	brvs	.-18     	; 0x4ce4 <inverse+0xe>
    4cf6:	91 50       	subi	r25, 0x01	; 1
    4cf8:	50 40       	sbci	r21, 0x00	; 0
    4cfa:	94 f0       	brlt	.+36     	; 0x4d20 <ldexp+0x38>
    4cfc:	59 f0       	breq	.+22     	; 0x4d14 <ldexp+0x2c>
    4cfe:	88 23       	and	r24, r24
    4d00:	32 f0       	brmi	.+12     	; 0x4d0e <ldexp+0x26>
    4d02:	66 0f       	add	r22, r22
    4d04:	77 1f       	adc	r23, r23
    4d06:	88 1f       	adc	r24, r24
    4d08:	91 50       	subi	r25, 0x01	; 1
    4d0a:	50 40       	sbci	r21, 0x00	; 0
    4d0c:	c1 f7       	brne	.-16     	; 0x4cfe <ldexp+0x16>
    4d0e:	9e 3f       	cpi	r25, 0xFE	; 254
    4d10:	51 05       	cpc	r21, r1
    4d12:	44 f7       	brge	.-48     	; 0x4ce4 <inverse+0xe>
    4d14:	88 0f       	add	r24, r24
    4d16:	91 1d       	adc	r25, r1
    4d18:	96 95       	lsr	r25
    4d1a:	87 95       	ror	r24
    4d1c:	97 f9       	bld	r25, 7
    4d1e:	08 95       	ret
    4d20:	5f 3f       	cpi	r21, 0xFF	; 255
    4d22:	ac f0       	brlt	.+42     	; 0x4d4e <ldexp+0x66>
    4d24:	98 3e       	cpi	r25, 0xE8	; 232
    4d26:	9c f0       	brlt	.+38     	; 0x4d4e <ldexp+0x66>
    4d28:	bb 27       	eor	r27, r27
    4d2a:	86 95       	lsr	r24
    4d2c:	77 95       	ror	r23
    4d2e:	67 95       	ror	r22
    4d30:	b7 95       	ror	r27
    4d32:	08 f4       	brcc	.+2      	; 0x4d36 <ldexp+0x4e>
    4d34:	b1 60       	ori	r27, 0x01	; 1
    4d36:	93 95       	inc	r25
    4d38:	c1 f7       	brne	.-16     	; 0x4d2a <ldexp+0x42>
    4d3a:	bb 0f       	add	r27, r27
    4d3c:	58 f7       	brcc	.-42     	; 0x4d14 <ldexp+0x2c>
    4d3e:	11 f4       	brne	.+4      	; 0x4d44 <ldexp+0x5c>
    4d40:	60 ff       	sbrs	r22, 0
    4d42:	e8 cf       	rjmp	.-48     	; 0x4d14 <ldexp+0x2c>
    4d44:	6f 5f       	subi	r22, 0xFF	; 255
    4d46:	7f 4f       	sbci	r23, 0xFF	; 255
    4d48:	8f 4f       	sbci	r24, 0xFF	; 255
    4d4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d4c:	e3 cf       	rjmp	.-58     	; 0x4d14 <ldexp+0x2c>
    4d4e:	b8 ce       	rjmp	.-656    	; 0x4ac0 <__fp_szero>
    4d50:	0e f0       	brts	.+2      	; 0x4d54 <ldexp+0x6c>
    4d52:	76 c0       	rjmp	.+236    	; 0x4e40 <__fp_mpack>
    4d54:	70 ce       	rjmp	.-800    	; 0x4a36 <__fp_nan>
    4d56:	68 94       	set
    4d58:	68 ce       	rjmp	.-816    	; 0x4a2a <__fp_inf>

00004d5a <log>:
    4d5a:	97 de       	rcall	.-722    	; 0x4a8a <__fp_splitA>
    4d5c:	c8 f3       	brcs	.-14     	; 0x4d50 <ldexp+0x68>
    4d5e:	99 23       	and	r25, r25
    4d60:	d1 f3       	breq	.-12     	; 0x4d56 <ldexp+0x6e>
    4d62:	c6 f3       	brts	.-16     	; 0x4d54 <ldexp+0x6c>
    4d64:	df 93       	push	r29
    4d66:	cf 93       	push	r28
    4d68:	1f 93       	push	r17
    4d6a:	0f 93       	push	r16
    4d6c:	ff 92       	push	r15
    4d6e:	c9 2f       	mov	r28, r25
    4d70:	dd 27       	eor	r29, r29
    4d72:	88 23       	and	r24, r24
    4d74:	2a f0       	brmi	.+10     	; 0x4d80 <log+0x26>
    4d76:	21 97       	sbiw	r28, 0x01	; 1
    4d78:	66 0f       	add	r22, r22
    4d7a:	77 1f       	adc	r23, r23
    4d7c:	88 1f       	adc	r24, r24
    4d7e:	da f7       	brpl	.-10     	; 0x4d76 <log+0x1c>
    4d80:	20 e0       	ldi	r18, 0x00	; 0
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	40 e8       	ldi	r20, 0x80	; 128
    4d86:	5f eb       	ldi	r21, 0xBF	; 191
    4d88:	9f e3       	ldi	r25, 0x3F	; 63
    4d8a:	88 39       	cpi	r24, 0x98	; 152
    4d8c:	20 f0       	brcs	.+8      	; 0x4d96 <log+0x3c>
    4d8e:	80 3e       	cpi	r24, 0xE0	; 224
    4d90:	30 f0       	brcs	.+12     	; 0x4d9e <log+0x44>
    4d92:	21 96       	adiw	r28, 0x01	; 1
    4d94:	8f 77       	andi	r24, 0x7F	; 127
    4d96:	0f dd       	rcall	.-1506   	; 0x47b6 <__addsf3>
    4d98:	ec e0       	ldi	r30, 0x0C	; 12
    4d9a:	f1 e0       	ldi	r31, 0x01	; 1
    4d9c:	03 c0       	rjmp	.+6      	; 0x4da4 <log+0x4a>
    4d9e:	0b dd       	rcall	.-1514   	; 0x47b6 <__addsf3>
    4da0:	e9 e3       	ldi	r30, 0x39	; 57
    4da2:	f1 e0       	ldi	r31, 0x01	; 1
    4da4:	73 df       	rcall	.-282    	; 0x4c8c <__fp_powser>
    4da6:	8b 01       	movw	r16, r22
    4da8:	be 01       	movw	r22, r28
    4daa:	ec 01       	movw	r28, r24
    4dac:	fb 2e       	mov	r15, r27
    4dae:	6f 57       	subi	r22, 0x7F	; 127
    4db0:	71 09       	sbc	r23, r1
    4db2:	75 95       	asr	r23
    4db4:	77 1f       	adc	r23, r23
    4db6:	88 0b       	sbc	r24, r24
    4db8:	99 0b       	sbc	r25, r25
    4dba:	fc dd       	rcall	.-1032   	; 0x49b4 <__floatsisf>
    4dbc:	28 e1       	ldi	r18, 0x18	; 24
    4dbe:	32 e7       	ldi	r19, 0x72	; 114
    4dc0:	41 e3       	ldi	r20, 0x31	; 49
    4dc2:	5f e3       	ldi	r21, 0x3F	; 63
    4dc4:	8f de       	rcall	.-738    	; 0x4ae4 <__mulsf3x>
    4dc6:	af 2d       	mov	r26, r15
    4dc8:	98 01       	movw	r18, r16
    4dca:	ae 01       	movw	r20, r28
    4dcc:	ff 90       	pop	r15
    4dce:	0f 91       	pop	r16
    4dd0:	1f 91       	pop	r17
    4dd2:	cf 91       	pop	r28
    4dd4:	df 91       	pop	r29
    4dd6:	00 dd       	rcall	.-1536   	; 0x47d8 <__addsf3x>
    4dd8:	3f ce       	rjmp	.-898    	; 0x4a58 <__fp_round>

00004dda <modf>:
    4dda:	fa 01       	movw	r30, r20
    4ddc:	dc 01       	movw	r26, r24
    4dde:	aa 0f       	add	r26, r26
    4de0:	bb 1f       	adc	r27, r27
    4de2:	9b 01       	movw	r18, r22
    4de4:	ac 01       	movw	r20, r24
    4de6:	bf 57       	subi	r27, 0x7F	; 127
    4de8:	28 f4       	brcc	.+10     	; 0x4df4 <modf+0x1a>
    4dea:	22 27       	eor	r18, r18
    4dec:	33 27       	eor	r19, r19
    4dee:	44 27       	eor	r20, r20
    4df0:	50 78       	andi	r21, 0x80	; 128
    4df2:	1f c0       	rjmp	.+62     	; 0x4e32 <modf+0x58>
    4df4:	b7 51       	subi	r27, 0x17	; 23
    4df6:	88 f4       	brcc	.+34     	; 0x4e1a <modf+0x40>
    4df8:	ab 2f       	mov	r26, r27
    4dfa:	00 24       	eor	r0, r0
    4dfc:	46 95       	lsr	r20
    4dfe:	37 95       	ror	r19
    4e00:	27 95       	ror	r18
    4e02:	01 1c       	adc	r0, r1
    4e04:	a3 95       	inc	r26
    4e06:	d2 f3       	brmi	.-12     	; 0x4dfc <modf+0x22>
    4e08:	00 20       	and	r0, r0
    4e0a:	69 f0       	breq	.+26     	; 0x4e26 <modf+0x4c>
    4e0c:	22 0f       	add	r18, r18
    4e0e:	33 1f       	adc	r19, r19
    4e10:	44 1f       	adc	r20, r20
    4e12:	b3 95       	inc	r27
    4e14:	da f3       	brmi	.-10     	; 0x4e0c <modf+0x32>
    4e16:	0d d0       	rcall	.+26     	; 0x4e32 <modf+0x58>
    4e18:	cd cc       	rjmp	.-1638   	; 0x47b4 <__subsf3>
    4e1a:	61 30       	cpi	r22, 0x01	; 1
    4e1c:	71 05       	cpc	r23, r1
    4e1e:	a0 e8       	ldi	r26, 0x80	; 128
    4e20:	8a 07       	cpc	r24, r26
    4e22:	b9 46       	sbci	r27, 0x69	; 105
    4e24:	30 f4       	brcc	.+12     	; 0x4e32 <modf+0x58>
    4e26:	9b 01       	movw	r18, r22
    4e28:	ac 01       	movw	r20, r24
    4e2a:	66 27       	eor	r22, r22
    4e2c:	77 27       	eor	r23, r23
    4e2e:	88 27       	eor	r24, r24
    4e30:	90 78       	andi	r25, 0x80	; 128
    4e32:	30 96       	adiw	r30, 0x00	; 0
    4e34:	21 f0       	breq	.+8      	; 0x4e3e <modf+0x64>
    4e36:	20 83       	st	Z, r18
    4e38:	31 83       	std	Z+1, r19	; 0x01
    4e3a:	42 83       	std	Z+2, r20	; 0x02
    4e3c:	53 83       	std	Z+3, r21	; 0x03
    4e3e:	08 95       	ret

00004e40 <__fp_mpack>:
    4e40:	9f 3f       	cpi	r25, 0xFF	; 255
    4e42:	31 f0       	breq	.+12     	; 0x4e50 <__fp_mpack_finite+0xc>

00004e44 <__fp_mpack_finite>:
    4e44:	91 50       	subi	r25, 0x01	; 1
    4e46:	20 f4       	brcc	.+8      	; 0x4e50 <__fp_mpack_finite+0xc>
    4e48:	87 95       	ror	r24
    4e4a:	77 95       	ror	r23
    4e4c:	67 95       	ror	r22
    4e4e:	b7 95       	ror	r27
    4e50:	88 0f       	add	r24, r24
    4e52:	91 1d       	adc	r25, r1
    4e54:	96 95       	lsr	r25
    4e56:	87 95       	ror	r24
    4e58:	97 f9       	bld	r25, 7
    4e5a:	08 95       	ret

00004e5c <__udivmodhi4>:
    4e5c:	aa 1b       	sub	r26, r26
    4e5e:	bb 1b       	sub	r27, r27
    4e60:	51 e1       	ldi	r21, 0x11	; 17
    4e62:	07 c0       	rjmp	.+14     	; 0x4e72 <__udivmodhi4_ep>

00004e64 <__udivmodhi4_loop>:
    4e64:	aa 1f       	adc	r26, r26
    4e66:	bb 1f       	adc	r27, r27
    4e68:	a6 17       	cp	r26, r22
    4e6a:	b7 07       	cpc	r27, r23
    4e6c:	10 f0       	brcs	.+4      	; 0x4e72 <__udivmodhi4_ep>
    4e6e:	a6 1b       	sub	r26, r22
    4e70:	b7 0b       	sbc	r27, r23

00004e72 <__udivmodhi4_ep>:
    4e72:	88 1f       	adc	r24, r24
    4e74:	99 1f       	adc	r25, r25
    4e76:	5a 95       	dec	r21
    4e78:	a9 f7       	brne	.-22     	; 0x4e64 <__udivmodhi4_loop>
    4e7a:	80 95       	com	r24
    4e7c:	90 95       	com	r25
    4e7e:	bc 01       	movw	r22, r24
    4e80:	cd 01       	movw	r24, r26
    4e82:	08 95       	ret

00004e84 <printf>:
    4e84:	cf 93       	push	r28
    4e86:	df 93       	push	r29
    4e88:	cd b7       	in	r28, 0x3d	; 61
    4e8a:	de b7       	in	r29, 0x3e	; 62
    4e8c:	fe 01       	movw	r30, r28
    4e8e:	36 96       	adiw	r30, 0x06	; 6
    4e90:	61 91       	ld	r22, Z+
    4e92:	71 91       	ld	r23, Z+
    4e94:	80 91 90 09 	lds	r24, 0x0990
    4e98:	90 91 91 09 	lds	r25, 0x0991
    4e9c:	af 01       	movw	r20, r30
    4e9e:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <vfprintf>
    4ea2:	df 91       	pop	r29
    4ea4:	cf 91       	pop	r28
    4ea6:	08 95       	ret

00004ea8 <putchar>:
    4ea8:	60 91 90 09 	lds	r22, 0x0990
    4eac:	70 91 91 09 	lds	r23, 0x0991
    4eb0:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    4eb4:	08 95       	ret

00004eb6 <vfprintf>:
    4eb6:	2f 92       	push	r2
    4eb8:	3f 92       	push	r3
    4eba:	4f 92       	push	r4
    4ebc:	5f 92       	push	r5
    4ebe:	6f 92       	push	r6
    4ec0:	7f 92       	push	r7
    4ec2:	8f 92       	push	r8
    4ec4:	9f 92       	push	r9
    4ec6:	af 92       	push	r10
    4ec8:	bf 92       	push	r11
    4eca:	cf 92       	push	r12
    4ecc:	df 92       	push	r13
    4ece:	ef 92       	push	r14
    4ed0:	ff 92       	push	r15
    4ed2:	0f 93       	push	r16
    4ed4:	1f 93       	push	r17
    4ed6:	cf 93       	push	r28
    4ed8:	df 93       	push	r29
    4eda:	cd b7       	in	r28, 0x3d	; 61
    4edc:	de b7       	in	r29, 0x3e	; 62
    4ede:	2d 97       	sbiw	r28, 0x0d	; 13
    4ee0:	0f b6       	in	r0, 0x3f	; 63
    4ee2:	f8 94       	cli
    4ee4:	de bf       	out	0x3e, r29	; 62
    4ee6:	0f be       	out	0x3f, r0	; 63
    4ee8:	cd bf       	out	0x3d, r28	; 61
    4eea:	3c 01       	movw	r6, r24
    4eec:	7d 87       	std	Y+13, r23	; 0x0d
    4eee:	6c 87       	std	Y+12, r22	; 0x0c
    4ef0:	5a 01       	movw	r10, r20
    4ef2:	fc 01       	movw	r30, r24
    4ef4:	17 82       	std	Z+7, r1	; 0x07
    4ef6:	16 82       	std	Z+6, r1	; 0x06
    4ef8:	83 81       	ldd	r24, Z+3	; 0x03
    4efa:	81 ff       	sbrs	r24, 1
    4efc:	c8 c1       	rjmp	.+912    	; 0x528e <vfprintf+0x3d8>
    4efe:	2e 01       	movw	r4, r28
    4f00:	08 94       	sec
    4f02:	41 1c       	adc	r4, r1
    4f04:	51 1c       	adc	r5, r1
    4f06:	f3 01       	movw	r30, r6
    4f08:	93 81       	ldd	r25, Z+3	; 0x03
    4f0a:	ec 85       	ldd	r30, Y+12	; 0x0c
    4f0c:	fd 85       	ldd	r31, Y+13	; 0x0d
    4f0e:	93 fd       	sbrc	r25, 3
    4f10:	85 91       	lpm	r24, Z+
    4f12:	93 ff       	sbrs	r25, 3
    4f14:	81 91       	ld	r24, Z+
    4f16:	fd 87       	std	Y+13, r31	; 0x0d
    4f18:	ec 87       	std	Y+12, r30	; 0x0c
    4f1a:	88 23       	and	r24, r24
    4f1c:	09 f4       	brne	.+2      	; 0x4f20 <vfprintf+0x6a>
    4f1e:	b3 c1       	rjmp	.+870    	; 0x5286 <vfprintf+0x3d0>
    4f20:	85 32       	cpi	r24, 0x25	; 37
    4f22:	41 f4       	brne	.+16     	; 0x4f34 <vfprintf+0x7e>
    4f24:	93 fd       	sbrc	r25, 3
    4f26:	85 91       	lpm	r24, Z+
    4f28:	93 ff       	sbrs	r25, 3
    4f2a:	81 91       	ld	r24, Z+
    4f2c:	fd 87       	std	Y+13, r31	; 0x0d
    4f2e:	ec 87       	std	Y+12, r30	; 0x0c
    4f30:	85 32       	cpi	r24, 0x25	; 37
    4f32:	29 f4       	brne	.+10     	; 0x4f3e <vfprintf+0x88>
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	b3 01       	movw	r22, r6
    4f38:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    4f3c:	e4 cf       	rjmp	.-56     	; 0x4f06 <vfprintf+0x50>
    4f3e:	ff 24       	eor	r15, r15
    4f40:	ee 24       	eor	r14, r14
    4f42:	10 e0       	ldi	r17, 0x00	; 0
    4f44:	10 32       	cpi	r17, 0x20	; 32
    4f46:	b0 f4       	brcc	.+44     	; 0x4f74 <vfprintf+0xbe>
    4f48:	8b 32       	cpi	r24, 0x2B	; 43
    4f4a:	69 f0       	breq	.+26     	; 0x4f66 <vfprintf+0xb0>
    4f4c:	8c 32       	cpi	r24, 0x2C	; 44
    4f4e:	28 f4       	brcc	.+10     	; 0x4f5a <vfprintf+0xa4>
    4f50:	80 32       	cpi	r24, 0x20	; 32
    4f52:	51 f0       	breq	.+20     	; 0x4f68 <vfprintf+0xb2>
    4f54:	83 32       	cpi	r24, 0x23	; 35
    4f56:	71 f4       	brne	.+28     	; 0x4f74 <vfprintf+0xbe>
    4f58:	0b c0       	rjmp	.+22     	; 0x4f70 <vfprintf+0xba>
    4f5a:	8d 32       	cpi	r24, 0x2D	; 45
    4f5c:	39 f0       	breq	.+14     	; 0x4f6c <vfprintf+0xb6>
    4f5e:	80 33       	cpi	r24, 0x30	; 48
    4f60:	49 f4       	brne	.+18     	; 0x4f74 <vfprintf+0xbe>
    4f62:	11 60       	ori	r17, 0x01	; 1
    4f64:	2c c0       	rjmp	.+88     	; 0x4fbe <vfprintf+0x108>
    4f66:	12 60       	ori	r17, 0x02	; 2
    4f68:	14 60       	ori	r17, 0x04	; 4
    4f6a:	29 c0       	rjmp	.+82     	; 0x4fbe <vfprintf+0x108>
    4f6c:	18 60       	ori	r17, 0x08	; 8
    4f6e:	27 c0       	rjmp	.+78     	; 0x4fbe <vfprintf+0x108>
    4f70:	10 61       	ori	r17, 0x10	; 16
    4f72:	25 c0       	rjmp	.+74     	; 0x4fbe <vfprintf+0x108>
    4f74:	17 fd       	sbrc	r17, 7
    4f76:	2e c0       	rjmp	.+92     	; 0x4fd4 <vfprintf+0x11e>
    4f78:	28 2f       	mov	r18, r24
    4f7a:	20 53       	subi	r18, 0x30	; 48
    4f7c:	2a 30       	cpi	r18, 0x0A	; 10
    4f7e:	98 f4       	brcc	.+38     	; 0x4fa6 <vfprintf+0xf0>
    4f80:	16 ff       	sbrs	r17, 6
    4f82:	08 c0       	rjmp	.+16     	; 0x4f94 <vfprintf+0xde>
    4f84:	8f 2d       	mov	r24, r15
    4f86:	88 0f       	add	r24, r24
    4f88:	f8 2e       	mov	r15, r24
    4f8a:	ff 0c       	add	r15, r15
    4f8c:	ff 0c       	add	r15, r15
    4f8e:	f8 0e       	add	r15, r24
    4f90:	f2 0e       	add	r15, r18
    4f92:	15 c0       	rjmp	.+42     	; 0x4fbe <vfprintf+0x108>
    4f94:	8e 2d       	mov	r24, r14
    4f96:	88 0f       	add	r24, r24
    4f98:	e8 2e       	mov	r14, r24
    4f9a:	ee 0c       	add	r14, r14
    4f9c:	ee 0c       	add	r14, r14
    4f9e:	e8 0e       	add	r14, r24
    4fa0:	e2 0e       	add	r14, r18
    4fa2:	10 62       	ori	r17, 0x20	; 32
    4fa4:	0c c0       	rjmp	.+24     	; 0x4fbe <vfprintf+0x108>
    4fa6:	8e 32       	cpi	r24, 0x2E	; 46
    4fa8:	21 f4       	brne	.+8      	; 0x4fb2 <vfprintf+0xfc>
    4faa:	16 fd       	sbrc	r17, 6
    4fac:	6c c1       	rjmp	.+728    	; 0x5286 <vfprintf+0x3d0>
    4fae:	10 64       	ori	r17, 0x40	; 64
    4fb0:	06 c0       	rjmp	.+12     	; 0x4fbe <vfprintf+0x108>
    4fb2:	8c 36       	cpi	r24, 0x6C	; 108
    4fb4:	11 f4       	brne	.+4      	; 0x4fba <vfprintf+0x104>
    4fb6:	10 68       	ori	r17, 0x80	; 128
    4fb8:	02 c0       	rjmp	.+4      	; 0x4fbe <vfprintf+0x108>
    4fba:	88 36       	cpi	r24, 0x68	; 104
    4fbc:	59 f4       	brne	.+22     	; 0x4fd4 <vfprintf+0x11e>
    4fbe:	ec 85       	ldd	r30, Y+12	; 0x0c
    4fc0:	fd 85       	ldd	r31, Y+13	; 0x0d
    4fc2:	93 fd       	sbrc	r25, 3
    4fc4:	85 91       	lpm	r24, Z+
    4fc6:	93 ff       	sbrs	r25, 3
    4fc8:	81 91       	ld	r24, Z+
    4fca:	fd 87       	std	Y+13, r31	; 0x0d
    4fcc:	ec 87       	std	Y+12, r30	; 0x0c
    4fce:	88 23       	and	r24, r24
    4fd0:	09 f0       	breq	.+2      	; 0x4fd4 <vfprintf+0x11e>
    4fd2:	b8 cf       	rjmp	.-144    	; 0x4f44 <vfprintf+0x8e>
    4fd4:	98 2f       	mov	r25, r24
    4fd6:	95 54       	subi	r25, 0x45	; 69
    4fd8:	93 30       	cpi	r25, 0x03	; 3
    4fda:	18 f0       	brcs	.+6      	; 0x4fe2 <vfprintf+0x12c>
    4fdc:	90 52       	subi	r25, 0x20	; 32
    4fde:	93 30       	cpi	r25, 0x03	; 3
    4fe0:	38 f4       	brcc	.+14     	; 0x4ff0 <vfprintf+0x13a>
    4fe2:	24 e0       	ldi	r18, 0x04	; 4
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	a2 0e       	add	r10, r18
    4fe8:	b3 1e       	adc	r11, r19
    4fea:	3f e3       	ldi	r19, 0x3F	; 63
    4fec:	39 83       	std	Y+1, r19	; 0x01
    4fee:	0f c0       	rjmp	.+30     	; 0x500e <vfprintf+0x158>
    4ff0:	83 36       	cpi	r24, 0x63	; 99
    4ff2:	31 f0       	breq	.+12     	; 0x5000 <vfprintf+0x14a>
    4ff4:	83 37       	cpi	r24, 0x73	; 115
    4ff6:	81 f0       	breq	.+32     	; 0x5018 <vfprintf+0x162>
    4ff8:	83 35       	cpi	r24, 0x53	; 83
    4ffa:	09 f0       	breq	.+2      	; 0x4ffe <vfprintf+0x148>
    4ffc:	5a c0       	rjmp	.+180    	; 0x50b2 <vfprintf+0x1fc>
    4ffe:	22 c0       	rjmp	.+68     	; 0x5044 <vfprintf+0x18e>
    5000:	f5 01       	movw	r30, r10
    5002:	80 81       	ld	r24, Z
    5004:	89 83       	std	Y+1, r24	; 0x01
    5006:	22 e0       	ldi	r18, 0x02	; 2
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	a2 0e       	add	r10, r18
    500c:	b3 1e       	adc	r11, r19
    500e:	21 e0       	ldi	r18, 0x01	; 1
    5010:	c2 2e       	mov	r12, r18
    5012:	d1 2c       	mov	r13, r1
    5014:	42 01       	movw	r8, r4
    5016:	14 c0       	rjmp	.+40     	; 0x5040 <vfprintf+0x18a>
    5018:	92 e0       	ldi	r25, 0x02	; 2
    501a:	29 2e       	mov	r2, r25
    501c:	31 2c       	mov	r3, r1
    501e:	2a 0c       	add	r2, r10
    5020:	3b 1c       	adc	r3, r11
    5022:	f5 01       	movw	r30, r10
    5024:	80 80       	ld	r8, Z
    5026:	91 80       	ldd	r9, Z+1	; 0x01
    5028:	16 ff       	sbrs	r17, 6
    502a:	03 c0       	rjmp	.+6      	; 0x5032 <vfprintf+0x17c>
    502c:	6f 2d       	mov	r22, r15
    502e:	70 e0       	ldi	r23, 0x00	; 0
    5030:	02 c0       	rjmp	.+4      	; 0x5036 <vfprintf+0x180>
    5032:	6f ef       	ldi	r22, 0xFF	; 255
    5034:	7f ef       	ldi	r23, 0xFF	; 255
    5036:	c4 01       	movw	r24, r8
    5038:	0e 94 6d 29 	call	0x52da	; 0x52da <strnlen>
    503c:	6c 01       	movw	r12, r24
    503e:	51 01       	movw	r10, r2
    5040:	1f 77       	andi	r17, 0x7F	; 127
    5042:	15 c0       	rjmp	.+42     	; 0x506e <vfprintf+0x1b8>
    5044:	82 e0       	ldi	r24, 0x02	; 2
    5046:	28 2e       	mov	r2, r24
    5048:	31 2c       	mov	r3, r1
    504a:	2a 0c       	add	r2, r10
    504c:	3b 1c       	adc	r3, r11
    504e:	f5 01       	movw	r30, r10
    5050:	80 80       	ld	r8, Z
    5052:	91 80       	ldd	r9, Z+1	; 0x01
    5054:	16 ff       	sbrs	r17, 6
    5056:	03 c0       	rjmp	.+6      	; 0x505e <vfprintf+0x1a8>
    5058:	6f 2d       	mov	r22, r15
    505a:	70 e0       	ldi	r23, 0x00	; 0
    505c:	02 c0       	rjmp	.+4      	; 0x5062 <vfprintf+0x1ac>
    505e:	6f ef       	ldi	r22, 0xFF	; 255
    5060:	7f ef       	ldi	r23, 0xFF	; 255
    5062:	c4 01       	movw	r24, r8
    5064:	0e 94 62 29 	call	0x52c4	; 0x52c4 <strnlen_P>
    5068:	6c 01       	movw	r12, r24
    506a:	10 68       	ori	r17, 0x80	; 128
    506c:	51 01       	movw	r10, r2
    506e:	13 fd       	sbrc	r17, 3
    5070:	1c c0       	rjmp	.+56     	; 0x50aa <vfprintf+0x1f4>
    5072:	06 c0       	rjmp	.+12     	; 0x5080 <vfprintf+0x1ca>
    5074:	80 e2       	ldi	r24, 0x20	; 32
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	b3 01       	movw	r22, r6
    507a:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    507e:	ea 94       	dec	r14
    5080:	8e 2d       	mov	r24, r14
    5082:	90 e0       	ldi	r25, 0x00	; 0
    5084:	c8 16       	cp	r12, r24
    5086:	d9 06       	cpc	r13, r25
    5088:	a8 f3       	brcs	.-22     	; 0x5074 <vfprintf+0x1be>
    508a:	0f c0       	rjmp	.+30     	; 0x50aa <vfprintf+0x1f4>
    508c:	f4 01       	movw	r30, r8
    508e:	17 fd       	sbrc	r17, 7
    5090:	85 91       	lpm	r24, Z+
    5092:	17 ff       	sbrs	r17, 7
    5094:	81 91       	ld	r24, Z+
    5096:	4f 01       	movw	r8, r30
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	b3 01       	movw	r22, r6
    509c:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    50a0:	e1 10       	cpse	r14, r1
    50a2:	ea 94       	dec	r14
    50a4:	08 94       	sec
    50a6:	c1 08       	sbc	r12, r1
    50a8:	d1 08       	sbc	r13, r1
    50aa:	c1 14       	cp	r12, r1
    50ac:	d1 04       	cpc	r13, r1
    50ae:	71 f7       	brne	.-36     	; 0x508c <vfprintf+0x1d6>
    50b0:	e7 c0       	rjmp	.+462    	; 0x5280 <vfprintf+0x3ca>
    50b2:	84 36       	cpi	r24, 0x64	; 100
    50b4:	11 f0       	breq	.+4      	; 0x50ba <vfprintf+0x204>
    50b6:	89 36       	cpi	r24, 0x69	; 105
    50b8:	51 f5       	brne	.+84     	; 0x510e <vfprintf+0x258>
    50ba:	f5 01       	movw	r30, r10
    50bc:	17 ff       	sbrs	r17, 7
    50be:	07 c0       	rjmp	.+14     	; 0x50ce <vfprintf+0x218>
    50c0:	80 81       	ld	r24, Z
    50c2:	91 81       	ldd	r25, Z+1	; 0x01
    50c4:	a2 81       	ldd	r26, Z+2	; 0x02
    50c6:	b3 81       	ldd	r27, Z+3	; 0x03
    50c8:	24 e0       	ldi	r18, 0x04	; 4
    50ca:	30 e0       	ldi	r19, 0x00	; 0
    50cc:	08 c0       	rjmp	.+16     	; 0x50de <vfprintf+0x228>
    50ce:	80 81       	ld	r24, Z
    50d0:	91 81       	ldd	r25, Z+1	; 0x01
    50d2:	aa 27       	eor	r26, r26
    50d4:	97 fd       	sbrc	r25, 7
    50d6:	a0 95       	com	r26
    50d8:	ba 2f       	mov	r27, r26
    50da:	22 e0       	ldi	r18, 0x02	; 2
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	a2 0e       	add	r10, r18
    50e0:	b3 1e       	adc	r11, r19
    50e2:	01 2f       	mov	r16, r17
    50e4:	0f 76       	andi	r16, 0x6F	; 111
    50e6:	b7 ff       	sbrs	r27, 7
    50e8:	08 c0       	rjmp	.+16     	; 0x50fa <vfprintf+0x244>
    50ea:	b0 95       	com	r27
    50ec:	a0 95       	com	r26
    50ee:	90 95       	com	r25
    50f0:	81 95       	neg	r24
    50f2:	9f 4f       	sbci	r25, 0xFF	; 255
    50f4:	af 4f       	sbci	r26, 0xFF	; 255
    50f6:	bf 4f       	sbci	r27, 0xFF	; 255
    50f8:	00 68       	ori	r16, 0x80	; 128
    50fa:	bc 01       	movw	r22, r24
    50fc:	cd 01       	movw	r24, r26
    50fe:	a2 01       	movw	r20, r4
    5100:	2a e0       	ldi	r18, 0x0A	; 10
    5102:	30 e0       	ldi	r19, 0x00	; 0
    5104:	0e 94 a4 29 	call	0x5348	; 0x5348 <__ultoa_invert>
    5108:	d8 2e       	mov	r13, r24
    510a:	d4 18       	sub	r13, r4
    510c:	3f c0       	rjmp	.+126    	; 0x518c <vfprintf+0x2d6>
    510e:	85 37       	cpi	r24, 0x75	; 117
    5110:	21 f4       	brne	.+8      	; 0x511a <vfprintf+0x264>
    5112:	1f 7e       	andi	r17, 0xEF	; 239
    5114:	2a e0       	ldi	r18, 0x0A	; 10
    5116:	30 e0       	ldi	r19, 0x00	; 0
    5118:	20 c0       	rjmp	.+64     	; 0x515a <vfprintf+0x2a4>
    511a:	19 7f       	andi	r17, 0xF9	; 249
    511c:	8f 36       	cpi	r24, 0x6F	; 111
    511e:	a9 f0       	breq	.+42     	; 0x514a <vfprintf+0x294>
    5120:	80 37       	cpi	r24, 0x70	; 112
    5122:	20 f4       	brcc	.+8      	; 0x512c <vfprintf+0x276>
    5124:	88 35       	cpi	r24, 0x58	; 88
    5126:	09 f0       	breq	.+2      	; 0x512a <vfprintf+0x274>
    5128:	ae c0       	rjmp	.+348    	; 0x5286 <vfprintf+0x3d0>
    512a:	0b c0       	rjmp	.+22     	; 0x5142 <vfprintf+0x28c>
    512c:	80 37       	cpi	r24, 0x70	; 112
    512e:	21 f0       	breq	.+8      	; 0x5138 <vfprintf+0x282>
    5130:	88 37       	cpi	r24, 0x78	; 120
    5132:	09 f0       	breq	.+2      	; 0x5136 <vfprintf+0x280>
    5134:	a8 c0       	rjmp	.+336    	; 0x5286 <vfprintf+0x3d0>
    5136:	01 c0       	rjmp	.+2      	; 0x513a <vfprintf+0x284>
    5138:	10 61       	ori	r17, 0x10	; 16
    513a:	14 ff       	sbrs	r17, 4
    513c:	09 c0       	rjmp	.+18     	; 0x5150 <vfprintf+0x29a>
    513e:	14 60       	ori	r17, 0x04	; 4
    5140:	07 c0       	rjmp	.+14     	; 0x5150 <vfprintf+0x29a>
    5142:	14 ff       	sbrs	r17, 4
    5144:	08 c0       	rjmp	.+16     	; 0x5156 <vfprintf+0x2a0>
    5146:	16 60       	ori	r17, 0x06	; 6
    5148:	06 c0       	rjmp	.+12     	; 0x5156 <vfprintf+0x2a0>
    514a:	28 e0       	ldi	r18, 0x08	; 8
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	05 c0       	rjmp	.+10     	; 0x515a <vfprintf+0x2a4>
    5150:	20 e1       	ldi	r18, 0x10	; 16
    5152:	30 e0       	ldi	r19, 0x00	; 0
    5154:	02 c0       	rjmp	.+4      	; 0x515a <vfprintf+0x2a4>
    5156:	20 e1       	ldi	r18, 0x10	; 16
    5158:	32 e0       	ldi	r19, 0x02	; 2
    515a:	f5 01       	movw	r30, r10
    515c:	17 ff       	sbrs	r17, 7
    515e:	07 c0       	rjmp	.+14     	; 0x516e <vfprintf+0x2b8>
    5160:	60 81       	ld	r22, Z
    5162:	71 81       	ldd	r23, Z+1	; 0x01
    5164:	82 81       	ldd	r24, Z+2	; 0x02
    5166:	93 81       	ldd	r25, Z+3	; 0x03
    5168:	44 e0       	ldi	r20, 0x04	; 4
    516a:	50 e0       	ldi	r21, 0x00	; 0
    516c:	06 c0       	rjmp	.+12     	; 0x517a <vfprintf+0x2c4>
    516e:	60 81       	ld	r22, Z
    5170:	71 81       	ldd	r23, Z+1	; 0x01
    5172:	80 e0       	ldi	r24, 0x00	; 0
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	42 e0       	ldi	r20, 0x02	; 2
    5178:	50 e0       	ldi	r21, 0x00	; 0
    517a:	a4 0e       	add	r10, r20
    517c:	b5 1e       	adc	r11, r21
    517e:	a2 01       	movw	r20, r4
    5180:	0e 94 a4 29 	call	0x5348	; 0x5348 <__ultoa_invert>
    5184:	d8 2e       	mov	r13, r24
    5186:	d4 18       	sub	r13, r4
    5188:	01 2f       	mov	r16, r17
    518a:	0f 77       	andi	r16, 0x7F	; 127
    518c:	06 ff       	sbrs	r16, 6
    518e:	09 c0       	rjmp	.+18     	; 0x51a2 <vfprintf+0x2ec>
    5190:	0e 7f       	andi	r16, 0xFE	; 254
    5192:	df 14       	cp	r13, r15
    5194:	30 f4       	brcc	.+12     	; 0x51a2 <vfprintf+0x2ec>
    5196:	04 ff       	sbrs	r16, 4
    5198:	06 c0       	rjmp	.+12     	; 0x51a6 <vfprintf+0x2f0>
    519a:	02 fd       	sbrc	r16, 2
    519c:	04 c0       	rjmp	.+8      	; 0x51a6 <vfprintf+0x2f0>
    519e:	0f 7e       	andi	r16, 0xEF	; 239
    51a0:	02 c0       	rjmp	.+4      	; 0x51a6 <vfprintf+0x2f0>
    51a2:	1d 2d       	mov	r17, r13
    51a4:	01 c0       	rjmp	.+2      	; 0x51a8 <vfprintf+0x2f2>
    51a6:	1f 2d       	mov	r17, r15
    51a8:	80 2f       	mov	r24, r16
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	04 ff       	sbrs	r16, 4
    51ae:	0c c0       	rjmp	.+24     	; 0x51c8 <vfprintf+0x312>
    51b0:	fe 01       	movw	r30, r28
    51b2:	ed 0d       	add	r30, r13
    51b4:	f1 1d       	adc	r31, r1
    51b6:	20 81       	ld	r18, Z
    51b8:	20 33       	cpi	r18, 0x30	; 48
    51ba:	11 f4       	brne	.+4      	; 0x51c0 <vfprintf+0x30a>
    51bc:	09 7e       	andi	r16, 0xE9	; 233
    51be:	09 c0       	rjmp	.+18     	; 0x51d2 <vfprintf+0x31c>
    51c0:	02 ff       	sbrs	r16, 2
    51c2:	06 c0       	rjmp	.+12     	; 0x51d0 <vfprintf+0x31a>
    51c4:	1e 5f       	subi	r17, 0xFE	; 254
    51c6:	05 c0       	rjmp	.+10     	; 0x51d2 <vfprintf+0x31c>
    51c8:	86 78       	andi	r24, 0x86	; 134
    51ca:	90 70       	andi	r25, 0x00	; 0
    51cc:	00 97       	sbiw	r24, 0x00	; 0
    51ce:	09 f0       	breq	.+2      	; 0x51d2 <vfprintf+0x31c>
    51d0:	1f 5f       	subi	r17, 0xFF	; 255
    51d2:	80 2e       	mov	r8, r16
    51d4:	99 24       	eor	r9, r9
    51d6:	03 fd       	sbrc	r16, 3
    51d8:	12 c0       	rjmp	.+36     	; 0x51fe <vfprintf+0x348>
    51da:	00 ff       	sbrs	r16, 0
    51dc:	0d c0       	rjmp	.+26     	; 0x51f8 <vfprintf+0x342>
    51de:	fd 2c       	mov	r15, r13
    51e0:	1e 15       	cp	r17, r14
    51e2:	50 f4       	brcc	.+20     	; 0x51f8 <vfprintf+0x342>
    51e4:	fe 0c       	add	r15, r14
    51e6:	f1 1a       	sub	r15, r17
    51e8:	1e 2d       	mov	r17, r14
    51ea:	06 c0       	rjmp	.+12     	; 0x51f8 <vfprintf+0x342>
    51ec:	80 e2       	ldi	r24, 0x20	; 32
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	b3 01       	movw	r22, r6
    51f2:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    51f6:	1f 5f       	subi	r17, 0xFF	; 255
    51f8:	1e 15       	cp	r17, r14
    51fa:	c0 f3       	brcs	.-16     	; 0x51ec <vfprintf+0x336>
    51fc:	04 c0       	rjmp	.+8      	; 0x5206 <vfprintf+0x350>
    51fe:	1e 15       	cp	r17, r14
    5200:	10 f4       	brcc	.+4      	; 0x5206 <vfprintf+0x350>
    5202:	e1 1a       	sub	r14, r17
    5204:	01 c0       	rjmp	.+2      	; 0x5208 <vfprintf+0x352>
    5206:	ee 24       	eor	r14, r14
    5208:	84 fe       	sbrs	r8, 4
    520a:	0f c0       	rjmp	.+30     	; 0x522a <vfprintf+0x374>
    520c:	80 e3       	ldi	r24, 0x30	; 48
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	b3 01       	movw	r22, r6
    5212:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    5216:	82 fe       	sbrs	r8, 2
    5218:	1f c0       	rjmp	.+62     	; 0x5258 <vfprintf+0x3a2>
    521a:	81 fe       	sbrs	r8, 1
    521c:	03 c0       	rjmp	.+6      	; 0x5224 <vfprintf+0x36e>
    521e:	88 e5       	ldi	r24, 0x58	; 88
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	10 c0       	rjmp	.+32     	; 0x5244 <vfprintf+0x38e>
    5224:	88 e7       	ldi	r24, 0x78	; 120
    5226:	90 e0       	ldi	r25, 0x00	; 0
    5228:	0d c0       	rjmp	.+26     	; 0x5244 <vfprintf+0x38e>
    522a:	c4 01       	movw	r24, r8
    522c:	86 78       	andi	r24, 0x86	; 134
    522e:	90 70       	andi	r25, 0x00	; 0
    5230:	00 97       	sbiw	r24, 0x00	; 0
    5232:	91 f0       	breq	.+36     	; 0x5258 <vfprintf+0x3a2>
    5234:	81 fc       	sbrc	r8, 1
    5236:	02 c0       	rjmp	.+4      	; 0x523c <vfprintf+0x386>
    5238:	80 e2       	ldi	r24, 0x20	; 32
    523a:	01 c0       	rjmp	.+2      	; 0x523e <vfprintf+0x388>
    523c:	8b e2       	ldi	r24, 0x2B	; 43
    523e:	07 fd       	sbrc	r16, 7
    5240:	8d e2       	ldi	r24, 0x2D	; 45
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	b3 01       	movw	r22, r6
    5246:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    524a:	06 c0       	rjmp	.+12     	; 0x5258 <vfprintf+0x3a2>
    524c:	80 e3       	ldi	r24, 0x30	; 48
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	b3 01       	movw	r22, r6
    5252:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    5256:	fa 94       	dec	r15
    5258:	df 14       	cp	r13, r15
    525a:	c0 f3       	brcs	.-16     	; 0x524c <vfprintf+0x396>
    525c:	da 94       	dec	r13
    525e:	f2 01       	movw	r30, r4
    5260:	ed 0d       	add	r30, r13
    5262:	f1 1d       	adc	r31, r1
    5264:	80 81       	ld	r24, Z
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	b3 01       	movw	r22, r6
    526a:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    526e:	dd 20       	and	r13, r13
    5270:	a9 f7       	brne	.-22     	; 0x525c <vfprintf+0x3a6>
    5272:	06 c0       	rjmp	.+12     	; 0x5280 <vfprintf+0x3ca>
    5274:	80 e2       	ldi	r24, 0x20	; 32
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	b3 01       	movw	r22, r6
    527a:	0e 94 78 29 	call	0x52f0	; 0x52f0 <fputc>
    527e:	ea 94       	dec	r14
    5280:	ee 20       	and	r14, r14
    5282:	c1 f7       	brne	.-16     	; 0x5274 <vfprintf+0x3be>
    5284:	40 ce       	rjmp	.-896    	; 0x4f06 <vfprintf+0x50>
    5286:	f3 01       	movw	r30, r6
    5288:	86 81       	ldd	r24, Z+6	; 0x06
    528a:	97 81       	ldd	r25, Z+7	; 0x07
    528c:	02 c0       	rjmp	.+4      	; 0x5292 <vfprintf+0x3dc>
    528e:	8f ef       	ldi	r24, 0xFF	; 255
    5290:	9f ef       	ldi	r25, 0xFF	; 255
    5292:	2d 96       	adiw	r28, 0x0d	; 13
    5294:	0f b6       	in	r0, 0x3f	; 63
    5296:	f8 94       	cli
    5298:	de bf       	out	0x3e, r29	; 62
    529a:	0f be       	out	0x3f, r0	; 63
    529c:	cd bf       	out	0x3d, r28	; 61
    529e:	df 91       	pop	r29
    52a0:	cf 91       	pop	r28
    52a2:	1f 91       	pop	r17
    52a4:	0f 91       	pop	r16
    52a6:	ff 90       	pop	r15
    52a8:	ef 90       	pop	r14
    52aa:	df 90       	pop	r13
    52ac:	cf 90       	pop	r12
    52ae:	bf 90       	pop	r11
    52b0:	af 90       	pop	r10
    52b2:	9f 90       	pop	r9
    52b4:	8f 90       	pop	r8
    52b6:	7f 90       	pop	r7
    52b8:	6f 90       	pop	r6
    52ba:	5f 90       	pop	r5
    52bc:	4f 90       	pop	r4
    52be:	3f 90       	pop	r3
    52c0:	2f 90       	pop	r2
    52c2:	08 95       	ret

000052c4 <strnlen_P>:
    52c4:	fc 01       	movw	r30, r24
    52c6:	05 90       	lpm	r0, Z+
    52c8:	61 50       	subi	r22, 0x01	; 1
    52ca:	70 40       	sbci	r23, 0x00	; 0
    52cc:	01 10       	cpse	r0, r1
    52ce:	d8 f7       	brcc	.-10     	; 0x52c6 <strnlen_P+0x2>
    52d0:	80 95       	com	r24
    52d2:	90 95       	com	r25
    52d4:	8e 0f       	add	r24, r30
    52d6:	9f 1f       	adc	r25, r31
    52d8:	08 95       	ret

000052da <strnlen>:
    52da:	fc 01       	movw	r30, r24
    52dc:	61 50       	subi	r22, 0x01	; 1
    52de:	70 40       	sbci	r23, 0x00	; 0
    52e0:	01 90       	ld	r0, Z+
    52e2:	01 10       	cpse	r0, r1
    52e4:	d8 f7       	brcc	.-10     	; 0x52dc <strnlen+0x2>
    52e6:	80 95       	com	r24
    52e8:	90 95       	com	r25
    52ea:	8e 0f       	add	r24, r30
    52ec:	9f 1f       	adc	r25, r31
    52ee:	08 95       	ret

000052f0 <fputc>:
    52f0:	0f 93       	push	r16
    52f2:	1f 93       	push	r17
    52f4:	cf 93       	push	r28
    52f6:	df 93       	push	r29
    52f8:	8c 01       	movw	r16, r24
    52fa:	eb 01       	movw	r28, r22
    52fc:	8b 81       	ldd	r24, Y+3	; 0x03
    52fe:	81 ff       	sbrs	r24, 1
    5300:	1b c0       	rjmp	.+54     	; 0x5338 <fputc+0x48>
    5302:	82 ff       	sbrs	r24, 2
    5304:	0d c0       	rjmp	.+26     	; 0x5320 <fputc+0x30>
    5306:	2e 81       	ldd	r18, Y+6	; 0x06
    5308:	3f 81       	ldd	r19, Y+7	; 0x07
    530a:	8c 81       	ldd	r24, Y+4	; 0x04
    530c:	9d 81       	ldd	r25, Y+5	; 0x05
    530e:	28 17       	cp	r18, r24
    5310:	39 07       	cpc	r19, r25
    5312:	64 f4       	brge	.+24     	; 0x532c <fputc+0x3c>
    5314:	e8 81       	ld	r30, Y
    5316:	f9 81       	ldd	r31, Y+1	; 0x01
    5318:	01 93       	st	Z+, r16
    531a:	f9 83       	std	Y+1, r31	; 0x01
    531c:	e8 83       	st	Y, r30
    531e:	06 c0       	rjmp	.+12     	; 0x532c <fputc+0x3c>
    5320:	e8 85       	ldd	r30, Y+8	; 0x08
    5322:	f9 85       	ldd	r31, Y+9	; 0x09
    5324:	80 2f       	mov	r24, r16
    5326:	19 95       	eicall
    5328:	00 97       	sbiw	r24, 0x00	; 0
    532a:	31 f4       	brne	.+12     	; 0x5338 <fputc+0x48>
    532c:	8e 81       	ldd	r24, Y+6	; 0x06
    532e:	9f 81       	ldd	r25, Y+7	; 0x07
    5330:	01 96       	adiw	r24, 0x01	; 1
    5332:	9f 83       	std	Y+7, r25	; 0x07
    5334:	8e 83       	std	Y+6, r24	; 0x06
    5336:	02 c0       	rjmp	.+4      	; 0x533c <fputc+0x4c>
    5338:	0f ef       	ldi	r16, 0xFF	; 255
    533a:	1f ef       	ldi	r17, 0xFF	; 255
    533c:	c8 01       	movw	r24, r16
    533e:	df 91       	pop	r29
    5340:	cf 91       	pop	r28
    5342:	1f 91       	pop	r17
    5344:	0f 91       	pop	r16
    5346:	08 95       	ret

00005348 <__ultoa_invert>:
    5348:	fa 01       	movw	r30, r20
    534a:	aa 27       	eor	r26, r26
    534c:	28 30       	cpi	r18, 0x08	; 8
    534e:	51 f1       	breq	.+84     	; 0x53a4 <__ultoa_invert+0x5c>
    5350:	20 31       	cpi	r18, 0x10	; 16
    5352:	81 f1       	breq	.+96     	; 0x53b4 <__ultoa_invert+0x6c>
    5354:	e8 94       	clt
    5356:	6f 93       	push	r22
    5358:	6e 7f       	andi	r22, 0xFE	; 254
    535a:	6e 5f       	subi	r22, 0xFE	; 254
    535c:	7f 4f       	sbci	r23, 0xFF	; 255
    535e:	8f 4f       	sbci	r24, 0xFF	; 255
    5360:	9f 4f       	sbci	r25, 0xFF	; 255
    5362:	af 4f       	sbci	r26, 0xFF	; 255
    5364:	b1 e0       	ldi	r27, 0x01	; 1
    5366:	3e d0       	rcall	.+124    	; 0x53e4 <__ultoa_invert+0x9c>
    5368:	b4 e0       	ldi	r27, 0x04	; 4
    536a:	3c d0       	rcall	.+120    	; 0x53e4 <__ultoa_invert+0x9c>
    536c:	67 0f       	add	r22, r23
    536e:	78 1f       	adc	r23, r24
    5370:	89 1f       	adc	r24, r25
    5372:	9a 1f       	adc	r25, r26
    5374:	a1 1d       	adc	r26, r1
    5376:	68 0f       	add	r22, r24
    5378:	79 1f       	adc	r23, r25
    537a:	8a 1f       	adc	r24, r26
    537c:	91 1d       	adc	r25, r1
    537e:	a1 1d       	adc	r26, r1
    5380:	6a 0f       	add	r22, r26
    5382:	71 1d       	adc	r23, r1
    5384:	81 1d       	adc	r24, r1
    5386:	91 1d       	adc	r25, r1
    5388:	a1 1d       	adc	r26, r1
    538a:	20 d0       	rcall	.+64     	; 0x53cc <__ultoa_invert+0x84>
    538c:	09 f4       	brne	.+2      	; 0x5390 <__ultoa_invert+0x48>
    538e:	68 94       	set
    5390:	3f 91       	pop	r19
    5392:	2a e0       	ldi	r18, 0x0A	; 10
    5394:	26 9f       	mul	r18, r22
    5396:	11 24       	eor	r1, r1
    5398:	30 19       	sub	r19, r0
    539a:	30 5d       	subi	r19, 0xD0	; 208
    539c:	31 93       	st	Z+, r19
    539e:	de f6       	brtc	.-74     	; 0x5356 <__ultoa_invert+0xe>
    53a0:	cf 01       	movw	r24, r30
    53a2:	08 95       	ret
    53a4:	46 2f       	mov	r20, r22
    53a6:	47 70       	andi	r20, 0x07	; 7
    53a8:	40 5d       	subi	r20, 0xD0	; 208
    53aa:	41 93       	st	Z+, r20
    53ac:	b3 e0       	ldi	r27, 0x03	; 3
    53ae:	0f d0       	rcall	.+30     	; 0x53ce <__ultoa_invert+0x86>
    53b0:	c9 f7       	brne	.-14     	; 0x53a4 <__ultoa_invert+0x5c>
    53b2:	f6 cf       	rjmp	.-20     	; 0x53a0 <__ultoa_invert+0x58>
    53b4:	46 2f       	mov	r20, r22
    53b6:	4f 70       	andi	r20, 0x0F	; 15
    53b8:	40 5d       	subi	r20, 0xD0	; 208
    53ba:	4a 33       	cpi	r20, 0x3A	; 58
    53bc:	18 f0       	brcs	.+6      	; 0x53c4 <__ultoa_invert+0x7c>
    53be:	49 5d       	subi	r20, 0xD9	; 217
    53c0:	31 fd       	sbrc	r19, 1
    53c2:	40 52       	subi	r20, 0x20	; 32
    53c4:	41 93       	st	Z+, r20
    53c6:	02 d0       	rcall	.+4      	; 0x53cc <__ultoa_invert+0x84>
    53c8:	a9 f7       	brne	.-22     	; 0x53b4 <__ultoa_invert+0x6c>
    53ca:	ea cf       	rjmp	.-44     	; 0x53a0 <__ultoa_invert+0x58>
    53cc:	b4 e0       	ldi	r27, 0x04	; 4
    53ce:	a6 95       	lsr	r26
    53d0:	97 95       	ror	r25
    53d2:	87 95       	ror	r24
    53d4:	77 95       	ror	r23
    53d6:	67 95       	ror	r22
    53d8:	ba 95       	dec	r27
    53da:	c9 f7       	brne	.-14     	; 0x53ce <__ultoa_invert+0x86>
    53dc:	00 97       	sbiw	r24, 0x00	; 0
    53de:	61 05       	cpc	r22, r1
    53e0:	71 05       	cpc	r23, r1
    53e2:	08 95       	ret
    53e4:	9b 01       	movw	r18, r22
    53e6:	ac 01       	movw	r20, r24
    53e8:	0a 2e       	mov	r0, r26
    53ea:	06 94       	lsr	r0
    53ec:	57 95       	ror	r21
    53ee:	47 95       	ror	r20
    53f0:	37 95       	ror	r19
    53f2:	27 95       	ror	r18
    53f4:	ba 95       	dec	r27
    53f6:	c9 f7       	brne	.-14     	; 0x53ea <__ultoa_invert+0xa2>
    53f8:	62 0f       	add	r22, r18
    53fa:	73 1f       	adc	r23, r19
    53fc:	84 1f       	adc	r24, r20
    53fe:	95 1f       	adc	r25, r21
    5400:	a0 1d       	adc	r26, r0
    5402:	08 95       	ret

00005404 <_exit>:
    5404:	f8 94       	cli

00005406 <__stop_program>:
    5406:	ff cf       	rjmp	.-2      	; 0x5406 <__stop_program>
