
NS_263_task_4_lift.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006e4  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  000009a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000486  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000016c  00000000  00000000  00000eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000362  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000064  00000000  00000000  0000137c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000015b  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e9  00000000  00000000  0000153b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 ee       	ldi	r30, 0xE4	; 228
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 30       	cpi	r26, 0x00	; 0
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
 122:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <init_devices>:
 * Logic: used to initialize the input and output pins
 * Example Call: init_devices()
*/
void init_devices(void)
{
	DDRB |= 0xFF;	//PORT B is set as output for motor
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	8f ef       	ldi	r24, 0xFF	; 255
 12e:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0x00;
 130:	95 b1       	in	r25, 0x05	; 5
 132:	15 b8       	out	0x05, r1	; 5
		
	DDRD &= 0x00;	//PORT D is set as input for IR Sensor and Limit Switches
 134:	9a b1       	in	r25, 0x0a	; 10
 136:	1a b8       	out	0x0a, r1	; 10
	PORTD |= 0xFF;
 138:	9b b1       	in	r25, 0x0b	; 11
 13a:	8b b9       	out	0x0b, r24	; 11
	}
 13c:	08 95       	ret

0000013e <lift_up>:
 * Logic: used to rotate motor in clockwise direction
 * Example Call: lift_up()
*/
void lift_up(void)
{
	PORTB &= 0x00;
 13e:	85 b1       	in	r24, 0x05	; 5
 140:	15 b8       	out	0x05, r1	; 5
	PORTB |= 0x18;	//PB4 and PB3 is made high
 142:	85 b1       	in	r24, 0x05	; 5
 144:	88 61       	ori	r24, 0x18	; 24
 146:	85 b9       	out	0x05, r24	; 5
}
 148:	08 95       	ret

0000014a <lift_down>:
 * Logic: used to rotate motor in anti-clockwise direction
 * Example Call: lift_down
*/
void lift_down(void) 
{
	PORTB &= 0x00;
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	15 b8       	out	0x05, r1	; 5
	PORTB |= 0x14;	//PB4 and PB2 is made high
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	84 61       	ori	r24, 0x14	; 20
 152:	85 b9       	out	0x05, r24	; 5
}
 154:	08 95       	ret

00000156 <motor_stop>:
 * Logic: used to stop the motor
 * Example Call: motor_stop()
*/
void motor_stop(void)
{
	PORTB &= 0x00;
 156:	85 b1       	in	r24, 0x05	; 5
 158:	15 b8       	out	0x05, r1	; 5
}
 15a:	08 95       	ret

0000015c <main>:

int main(void)
{
	unsigned int ir=1, limit_switch_1=1, limit_switch_2=1; // variables to store status of IR Sensor and Limit switches
	unsigned int up=0;
	init_devices();			//initialized all devices
 15c:	0e 94 95 00 	call	0x12a	; 0x12a <init_devices>
	motor_stop();			
 160:	0e 94 ab 00 	call	0x156	; 0x156 <motor_stop>
    {	
		
		ir=1; limit_switch_1=1; limit_switch_2=1;
				
		ir = PIND & 0x04;				//reading status of IR Sensor
		limit_switch_1 = PIND & 0x10;	//reading status of Limit Switch 1 (bottom limit switch)
 164:	09 b1       	in	r16, 0x09	; 9
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	00 71       	andi	r16, 0x10	; 16
 16a:	10 70       	andi	r17, 0x00	; 0
		limit_switch_2 = PIND & 0x08;	//reading status of Limit Switch 2 (upper limit switch)
 16c:	c9 b1       	in	r28, 0x09	; 9
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	c8 70       	andi	r28, 0x08	; 8
 172:	d0 70       	andi	r29, 0x00	; 0
		
		
		
		if( ir == 0 )									//check if bot is present on lift			
 174:	4a 99       	sbic	0x09, 2	; 9
 176:	f6 cf       	rjmp	.-20     	; 0x164 <main+0x8>
		{
			if( limit_switch_1 == 0 )					//check if lift is at ground level
 178:	01 15       	cp	r16, r1
 17a:	11 05       	cpc	r17, r1
 17c:	c9 f4       	brne	.+50     	; 0x1b0 <main+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	2f ef       	ldi	r18, 0xFF	; 255
 180:	3f ef       	ldi	r19, 0xFF	; 255
 182:	43 eb       	ldi	r20, 0xB3	; 179
 184:	21 50       	subi	r18, 0x01	; 1
 186:	30 40       	sbci	r19, 0x00	; 0
 188:	40 40       	sbci	r20, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <main+0x28>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x32>
 18e:	00 00       	nop
			{
				_delay_ms(4000);						//wait for 4 sec. and check again if bot is present on the lift
				ir = PIND & 0x04;
 190:	29 b1       	in	r18, 0x09	; 9
				while( limit_switch_2 != 0 && ir == 0)	//move the lift up until upper limit switch is pressed
 192:	20 97       	sbiw	r28, 0x00	; 0
 194:	59 f0       	breq	.+22     	; 0x1ac <main+0x50>
 196:	22 fd       	sbrc	r18, 2
 198:	09 c0       	rjmp	.+18     	; 0x1ac <main+0x50>
				{
					lift_up();
 19a:	0e 94 9f 00 	call	0x13e	; 0x13e <lift_up>
					limit_switch_2 = PIND & 0x08;
 19e:	89 b1       	in	r24, 0x09	; 9
 1a0:	90 e0       	ldi	r25, 0x00	; 0
		{
			if( limit_switch_1 == 0 )					//check if lift is at ground level
			{
				_delay_ms(4000);						//wait for 4 sec. and check again if bot is present on the lift
				ir = PIND & 0x04;
				while( limit_switch_2 != 0 && ir == 0)	//move the lift up until upper limit switch is pressed
 1a2:	ec 01       	movw	r28, r24
 1a4:	c8 70       	andi	r28, 0x08	; 8
 1a6:	d0 70       	andi	r29, 0x00	; 0
 1a8:	83 fd       	sbrc	r24, 3
 1aa:	f7 cf       	rjmp	.-18     	; 0x19a <main+0x3e>
				{
					lift_up();
					limit_switch_2 = PIND & 0x08;
				}
				motor_stop();
 1ac:	0e 94 ab 00 	call	0x156	; 0x156 <motor_stop>
			}	
			
			if( limit_switch_2 == 0 )					//check if lift is at upper position
 1b0:	20 97       	sbiw	r28, 0x00	; 0
 1b2:	c1 f6       	brne	.-80     	; 0x164 <main+0x8>
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	9f ef       	ldi	r25, 0xFF	; 255
 1b8:	a3 eb       	ldi	r26, 0xB3	; 179
 1ba:	81 50       	subi	r24, 0x01	; 1
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	a0 40       	sbci	r26, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x5e>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x68>
 1c4:	00 00       	nop
			{
				_delay_ms(4000);						//wait for 4 sec. and check again if bot is present on the lift
				ir = PIND & 0x04;
 1c6:	89 b1       	in	r24, 0x09	; 9
				while( limit_switch_1 !=0 && ir == 0)	//move the lift down until bottom limit switch is pressed
 1c8:	01 15       	cp	r16, r1
 1ca:	11 05       	cpc	r17, r1
 1cc:	31 f0       	breq	.+12     	; 0x1da <main+0x7e>
 1ce:	82 fd       	sbrc	r24, 2
 1d0:	04 c0       	rjmp	.+8      	; 0x1da <main+0x7e>
				{
					lift_down();
 1d2:	0e 94 a5 00 	call	0x14a	; 0x14a <lift_down>
			
			if( limit_switch_2 == 0 )					//check if lift is at upper position
			{
				_delay_ms(4000);						//wait for 4 sec. and check again if bot is present on the lift
				ir = PIND & 0x04;
				while( limit_switch_1 !=0 && ir == 0)	//move the lift down until bottom limit switch is pressed
 1d6:	4c 99       	sbic	0x09, 4	; 9
 1d8:	fc cf       	rjmp	.-8      	; 0x1d2 <main+0x76>
				{
					lift_down();
					limit_switch_1 = PIND & 0x10;
				}		
				motor_stop();			
 1da:	0e 94 ab 00 	call	0x156	; 0x156 <motor_stop>
 1de:	c2 cf       	rjmp	.-124    	; 0x164 <main+0x8>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
