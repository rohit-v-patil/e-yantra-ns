
Color Sensor Demo Code_6_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  0000066e  00000702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000066e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800212  00800212  00000714  2**0
                  ALLOC
  3 .stab         000006e4  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000e80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c42  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000247  00000000  00000000  00001b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ad  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002cf  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000302  00000000  00000000  000027eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e6       	ldi	r30, 0x6E	; 110
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 31       	cpi	r26, 0x12	; 18
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a2 e1       	ldi	r26, 0x12	; 18
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 32       	cpi	r26, 0x2E	; 46
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 c6 02 	call	0x58c	; 0x58c <main>
 122:	0c 94 35 03 	jmp	0x66a	; 0x66a <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	86 e6       	ldi	r24, 0x66	; 102
 12c:	9e e0       	ldi	r25, 0x0E	; 14
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
 132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 138:	80 e3       	ldi	r24, 0x30	; 48
 13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 13c:	42 9a       	sbi	0x08, 2	; 8
 13e:	ef ef       	ldi	r30, 0xFF	; 255
 140:	f7 e4       	ldi	r31, 0x47	; 71
 142:	31 97       	sbiw	r30, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
 148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 14a:	42 98       	cbi	0x08, 2	; 8
 14c:	e6 e6       	ldi	r30, 0x66	; 102
 14e:	fe e0       	ldi	r31, 0x0E	; 14
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
 154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 15c:	42 9a       	sbi	0x08, 2	; 8
 15e:	ef ef       	ldi	r30, 0xFF	; 255
 160:	f7 e4       	ldi	r31, 0x47	; 71
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
 168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 16a:	42 98       	cbi	0x08, 2	; 8
 16c:	e6 e6       	ldi	r30, 0x66	; 102
 16e:	fe e0       	ldi	r31, 0x0E	; 14
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
 174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 17c:	42 9a       	sbi	0x08, 2	; 8
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	97 e4       	ldi	r25, 0x47	; 71
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
 188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 18a:	42 98       	cbi	0x08, 2	; 8
 18c:	e6 e6       	ldi	r30, 0x66	; 102
 18e:	fe e0       	ldi	r31, 0x0E	; 14
 190:	31 97       	sbiw	r30, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
 194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 19a:	80 e2       	ldi	r24, 0x20	; 32
 19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 19e:	42 9a       	sbi	0x08, 2	; 8
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	97 e4       	ldi	r25, 0x47	; 71
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
 1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1ac:	42 98       	cbi	0x08, 2	; 8

	
}
 1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1b0:	98 b1       	in	r25, 0x08	; 8
 1b2:	9f 70       	andi	r25, 0x0F	; 15
 1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1b8:	28 2f       	mov	r18, r24
 1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1bc:	92 2b       	or	r25, r18
 1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1c4:	42 9a       	sbi	0x08, 2	; 8
 1c6:	ef ef       	ldi	r30, 0xFF	; 255
 1c8:	f7 e4       	ldi	r31, 0x47	; 71
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
 1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1d4:	98 b1       	in	r25, 0x08	; 8
 1d6:	9f 70       	andi	r25, 0x0F	; 15
 1d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1da:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1dc:	82 95       	swap	r24
 1de:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1e0:	89 2b       	or	r24, r25
 1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1e8:	42 9a       	sbi	0x08, 2	; 8
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	97 e4       	ldi	r25, 0x47	; 71
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
 1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1f6:	42 98       	cbi	0x08, 2	; 8
}
 1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
 206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 208:	88 e2       	ldi	r24, 0x28	; 40
 20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
 21a:	8e e0       	ldi	r24, 0x0E	; 14
 21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
 220:	80 e8       	ldi	r24, 0x80	; 128
 222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
 226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 228:	98 b1       	in	r25, 0x08	; 8
 22a:	9f 70       	andi	r25, 0x0F	; 15
 22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 230:	28 2f       	mov	r18, r24
 232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 234:	92 2b       	or	r25, r18
 236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 23c:	42 9a       	sbi	0x08, 2	; 8
 23e:	ef ef       	ldi	r30, 0xFF	; 255
 240:	f7 e4       	ldi	r31, 0x47	; 71
 242:	31 97       	sbiw	r30, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
 248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 24c:	98 b1       	in	r25, 0x08	; 8
 24e:	9f 70       	andi	r25, 0x0F	; 15
 250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 254:	82 95       	swap	r24
 256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 258:	89 2b       	or	r24, r25
 25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 260:	42 9a       	sbi	0x08, 2	; 8
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	97 e4       	ldi	r25, 0x47	; 71
 266:	01 97       	sbiw	r24, 0x01	; 1
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
 26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 26e:	42 98       	cbi	0x08, 2	; 8
}
 270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 272:	80 e8       	ldi	r24, 0x80	; 128
 274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
 278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
 280:	88 81       	ld	r24, Y
 282:	88 23       	and	r24, r24
 284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 28c:	89 91       	ld	r24, Y+
 28e:	88 23       	and	r24, r24
 290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 298:	82 30       	cpi	r24, 0x02	; 2
 29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
 2a6:	83 30       	cpi	r24, 0x03	; 3
 2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
 2aa:	84 30       	cpi	r24, 0x04	; 4
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
 2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b0:	86 2f       	mov	r24, r22
 2b2:	81 58       	subi	r24, 0x81	; 129
 2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2ba:	86 2f       	mov	r24, r22
 2bc:	81 54       	subi	r24, 0x41	; 65
 2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2c4:	86 2f       	mov	r24, r22
 2c6:	8d 56       	subi	r24, 0x6D	; 109
 2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ce:	86 2f       	mov	r24, r22
 2d0:	8d 52       	subi	r24, 0x2D	; 45
 2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
 2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2d8:	0f 93       	push	r16
 2da:	1f 93       	push	r17
 2dc:	cf 93       	push	r28
 2de:	df 93       	push	r29
 2e0:	8a 01       	movw	r16, r20
 2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2e4:	88 23       	and	r24, r24
 2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
 2e8:	66 23       	and	r22, r22
 2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
 2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2f6:	c5 30       	cpi	r28, 0x05	; 5
 2f8:	d1 05       	cpc	r29, r1
 2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
 2fc:	c8 01       	movw	r24, r16
 2fe:	60 e1       	ldi	r22, 0x10	; 16
 300:	77 e2       	ldi	r23, 0x27	; 39
 302:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodhi4>
 306:	cb 01       	movw	r24, r22
 308:	c0 96       	adiw	r24, 0x30	; 48
 30a:	90 93 1b 02 	sts	0x021B, r25
 30e:	80 93 1a 02 	sts	0x021A, r24
		lcd_wr_char(million);
 312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
 316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 318:	c4 30       	cpi	r28, 0x04	; 4
 31a:	d1 05       	cpc	r29, r1
 31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
 31e:	c8 01       	movw	r24, r16
 320:	68 ee       	ldi	r22, 0xE8	; 232
 322:	73 e0       	ldi	r23, 0x03	; 3
 324:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodhi4>
 328:	cb 01       	movw	r24, r22
 32a:	70 93 1d 02 	sts	0x021D, r23
 32e:	60 93 1c 02 	sts	0x021C, r22
		thousand = temp%10 + 48;
 332:	6a e0       	ldi	r22, 0x0A	; 10
 334:	70 e0       	ldi	r23, 0x00	; 0
 336:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodhi4>
 33a:	c0 96       	adiw	r24, 0x30	; 48
 33c:	90 93 2d 02 	sts	0x022D, r25
 340:	80 93 2c 02 	sts	0x022C, r24
		lcd_wr_char(thousand);
 344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 34e:	c3 30       	cpi	r28, 0x03	; 3
 350:	d1 05       	cpc	r29, r1
 352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
 358:	c8 01       	movw	r24, r16
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodhi4>
 362:	cb 01       	movw	r24, r22
 364:	70 93 1d 02 	sts	0x021D, r23
 368:	60 93 1c 02 	sts	0x021C, r22
		hundred = temp%10 + 48;
 36c:	6a e0       	ldi	r22, 0x0A	; 10
 36e:	70 e0       	ldi	r23, 0x00	; 0
 370:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodhi4>
 374:	c0 96       	adiw	r24, 0x30	; 48
 376:	90 93 29 02 	sts	0x0229, r25
 37a:	80 93 28 02 	sts	0x0228, r24
		lcd_wr_char(hundred);
 37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 384:	c2 30       	cpi	r28, 0x02	; 2
 386:	d1 05       	cpc	r29, r1
 388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
 38a:	81 30       	cpi	r24, 0x01	; 1
 38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	c8 01       	movw	r24, r16
 394:	b9 01       	movw	r22, r18
 396:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodhi4>
 39a:	cb 01       	movw	r24, r22
 39c:	70 93 1d 02 	sts	0x021D, r23
 3a0:	60 93 1c 02 	sts	0x021C, r22
		tens = temp%10 + 48;
 3a4:	b9 01       	movw	r22, r18
 3a6:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodhi4>
 3aa:	c0 96       	adiw	r24, 0x30	; 48
 3ac:	90 93 27 02 	sts	0x0227, r25
 3b0:	80 93 26 02 	sts	0x0226, r24
		lcd_wr_char(tens);
 3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3ba:	c1 30       	cpi	r28, 0x01	; 1
 3bc:	d1 05       	cpc	r29, r1
 3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
 3c0:	81 30       	cpi	r24, 0x01	; 1
 3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3c4:	c8 01       	movw	r24, r16
 3c6:	6a e0       	ldi	r22, 0x0A	; 10
 3c8:	70 e0       	ldi	r23, 0x00	; 0
 3ca:	0e 94 21 03 	call	0x642	; 0x642 <__udivmodhi4>
 3ce:	c0 96       	adiw	r24, 0x30	; 48
 3d0:	90 93 2b 02 	sts	0x022B, r25
 3d4:	80 93 2a 02 	sts	0x022A, r24
		lcd_wr_char(unit);
 3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
 3dc:	c6 30       	cpi	r28, 0x06	; 6
 3de:	d1 05       	cpc	r29, r1
 3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3e2:	85 e4       	ldi	r24, 0x45	; 69
 3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <lcd_port_config>:
volatile unsigned long int green;     // green: variable to store the pulses when green filter is selected


void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 3f2:	87 b1       	in	r24, 0x07	; 7
 3f4:	87 6f       	ori	r24, 0xF7	; 247
 3f6:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 3f8:	88 b1       	in	r24, 0x08	; 8
 3fa:	80 78       	andi	r24, 0x80	; 128
 3fc:	88 b9       	out	0x08, r24	; 8
}
 3fe:	08 95       	ret

00000400 <rgb_port_config>:
void rgb_port_config (void)
{
	/*****************************************
	Define DDR and PORT values for the port on which RGB LED is connected
	******************************************/
	DDRB = DDRB| 0xFF; //01110000 setting PH4, PH5, PH6 as output for RGB led
 400:	84 b1       	in	r24, 0x04	; 4
 402:	8f ef       	ldi	r24, 0xFF	; 255
 404:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | 0xFF; // initially all off
 406:	95 b1       	in	r25, 0x05	; 5
 408:	85 b9       	out	0x05, r24	; 5
}
 40a:	08 95       	ret

0000040c <color_sensor_pin_config>:
void color_sensor_pin_config(void)
{
	/*****************************************
	Define DDR and PORT values for the port on which Color sensor is connected
	******************************************/
	DDRD = DDRD & 0x00;
 40c:	8a b1       	in	r24, 0x0a	; 10
 40e:	1a b8       	out	0x0a, r1	; 10
	DDRD = DDRD | 0xFE; //11111110 //Set the direction of PORTD pin 0 as input
 410:	8a b1       	in	r24, 0x0a	; 10
 412:	8e 6f       	ori	r24, 0xFE	; 254
 414:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | 0x01; //enable internal pull-up for PORTD 0 pin
 416:	58 9a       	sbi	0x0b, 0	; 11
	
	DDRB = DDRB | 0xF0;		//set PORTB PB4,PB5,PB6,PB7 as output for S0,S1,S2,S3 of color sensor respectively
 418:	84 b1       	in	r24, 0x04	; 4
 41a:	80 6f       	ori	r24, 0xF0	; 240
 41c:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB & 0x00;	//initially all low
 41e:	85 b1       	in	r24, 0x05	; 5
 420:	15 b8       	out	0x05, r1	; 5
}
 422:	08 95       	ret

00000424 <color_sensor_pin_interrupt_init>:
		by setting bit 0 of External Interrupt Control Register A(EICRA) as 0 and bit 1 of EICRA as 1  
*Example Call: color_sensor_pin_interrupt_init()
*/
void color_sensor_pin_interrupt_init(void) //Interrupt 0 enable
{
	cli(); //Clears the global interrupt  
 424:	f8 94       	cli
	EICRA = EICRA | 0x02; // INT0 is set to trigger with falling edge
 426:	e9 e6       	ldi	r30, 0x69	; 105
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	80 81       	ld	r24, Z
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x01; // Enable Interrupt INT0 for color sensor
 430:	e8 9a       	sbi	0x1d, 0	; 29
	sei(); // Enables the global interrupt
 432:	78 94       	sei
}
 434:	08 95       	ret

00000436 <__vector_1>:
*Output: void
*Logic: This is the Interrupt Service Routine which increments pulse count by 1 each time it is called 
*Example Call: it is automatically called when an external interrupt is triggered on PD0/INT0
*/
ISR(INT0_vect) // Pass the timer number in place of n in INTn_vect
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	8f 93       	push	r24
 442:	9f 93       	push	r25
 444:	af 93       	push	r26
 446:	bf 93       	push	r27
	//increment on receiving pulse from the color sensor
	pulse++;
 448:	80 91 12 02 	lds	r24, 0x0212
 44c:	90 91 13 02 	lds	r25, 0x0213
 450:	a0 91 14 02 	lds	r26, 0x0214
 454:	b0 91 15 02 	lds	r27, 0x0215
 458:	01 96       	adiw	r24, 0x01	; 1
 45a:	a1 1d       	adc	r26, r1
 45c:	b1 1d       	adc	r27, r1
 45e:	80 93 12 02 	sts	0x0212, r24
 462:	90 93 13 02 	sts	0x0213, r25
 466:	a0 93 14 02 	sts	0x0214, r26
 46a:	b0 93 15 02 	sts	0x0215, r27
}
 46e:	bf 91       	pop	r27
 470:	af 91       	pop	r26
 472:	9f 91       	pop	r25
 474:	8f 91       	pop	r24
 476:	0f 90       	pop	r0
 478:	0f be       	out	0x3f, r0	; 63
 47a:	0f 90       	pop	r0
 47c:	1f 90       	pop	r1
 47e:	18 95       	reti

00000480 <init_devices>:
*Logic: initializes all devices by calling respective functions
*Example Call: init_devices()
*/
void init_devices(void)
{
	cli(); //Clears the global interrupt
 480:	f8 94       	cli
	//Initialize all the ports here
	//rgb_port_config(); //RGB led pin configuration
	lcd_port_config();
 482:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <lcd_port_config>
	lcd_init();
 486:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
	color_sensor_pin_config(); //color sensor pin configuration
 48a:	0e 94 06 02 	call	0x40c	; 0x40c <color_sensor_pin_config>
	color_sensor_pin_interrupt_init();
 48e:	0e 94 12 02 	call	0x424	; 0x424 <color_sensor_pin_interrupt_init>
	sei();   // Enables the global interrupt
 492:	78 94       	sei
}
 494:	08 95       	ret

00000496 <filter_red>:
*Example Call:filter_red()
*/
void filter_red(void)    //Used to select red filter
{
	//Filter Select - red filter
	 PORTB = PORTB & 0xBF;//set S2 low
 496:	2e 98       	cbi	0x05, 6	; 5
	 PORTB = PORTB & 0x7F;//set S3 low
 498:	2f 98       	cbi	0x05, 7	; 5
}
 49a:	08 95       	ret

0000049c <filter_green>:
*Example Call: filter_green()
*/
void filter_green(void)	//Used to select green filter
{
	//Filter Select - green filter
	PORTB = PORTB | 0x40;//set S2 High
 49c:	2e 9a       	sbi	0x05, 6	; 5
	PORTB = PORTB | 0x80;//set S3 High
 49e:	2f 9a       	sbi	0x05, 7	; 5
}
 4a0:	08 95       	ret

000004a2 <filter_blue>:
*Example Call: filter_blue()
*/
void filter_blue(void)	//Used to select blue filter
{
	//Filter Select - blue filter
	PORTB = PORTB & 0xBF;//set S2 low
 4a2:	2e 98       	cbi	0x05, 6	; 5
	PORTB = PORTB | 0x80;//set S3 High
 4a4:	2f 9a       	sbi	0x05, 7	; 5
}
 4a6:	08 95       	ret

000004a8 <filter_clear>:
*Example Call: filter_clear()
*/
void filter_clear(void)	//select no filter
{
	//Filter Select - no filter
	PORTB = PORTB | 0X40;//set S2 High
 4a8:	2e 9a       	sbi	0x05, 6	; 5
	PORTB = PORTB & 0x7F;//set S3 Low
 4aa:	2f 98       	cbi	0x05, 7	; 5
}
 4ac:	08 95       	ret

000004ae <color_sensor_scaling>:
*/
void color_sensor_scaling()		//This function is used to select the scaled down version of the original frequency of the output generated by the color sensor, generally 20% scaling is preferable, though you can change the values as per your application by referring datasheet
{
	//Output Scaling 20% from datasheet
	
	PORTB = PORTB | 0x10;//set S0 high
 4ae:	2c 9a       	sbi	0x05, 4	; 5
	PORTB = PORTB | 0x20;//set S1 high
 4b0:	2d 9a       	sbi	0x05, 5	; 5
}
 4b2:	08 95       	ret

000004b4 <red_read>:
*Example Call: red_read()
*/
void red_read(void)
{
	//Red
	filter_red(); //select red filter
 4b4:	0e 94 4b 02 	call	0x496	; 0x496 <filter_red>
	pulse = 0;//reset the count to 0
 4b8:	10 92 12 02 	sts	0x0212, r1
 4bc:	10 92 13 02 	sts	0x0213, r1
 4c0:	10 92 14 02 	sts	0x0214, r1
 4c4:	10 92 15 02 	sts	0x0215, r1
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	9f e7       	ldi	r25, 0x7F	; 127
 4cc:	a4 e0       	ldi	r26, 0x04	; 4
 4ce:	81 50       	subi	r24, 0x01	; 1
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	a0 40       	sbci	r26, 0x00	; 0
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <red_read+0x1a>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <red_read+0x24>
 4d8:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse; //store the count in variable called red
 4da:	80 91 12 02 	lds	r24, 0x0212
 4de:	90 91 13 02 	lds	r25, 0x0213
 4e2:	a0 91 14 02 	lds	r26, 0x0214
 4e6:	b0 91 15 02 	lds	r27, 0x0215
 4ea:	80 93 22 02 	sts	0x0222, r24
 4ee:	90 93 23 02 	sts	0x0223, r25
 4f2:	a0 93 24 02 	sts	0x0224, r26
 4f6:	b0 93 25 02 	sts	0x0225, r27
	
}
 4fa:	08 95       	ret

000004fc <green_read>:
*Example Call: green_read()
*/
void green_read(void) 
{
	//Green
	filter_green(); //select green filter
 4fc:	0e 94 4e 02 	call	0x49c	; 0x49c <filter_green>
	pulse = 0; //reset the count to 0
 500:	10 92 12 02 	sts	0x0212, r1
 504:	10 92 13 02 	sts	0x0213, r1
 508:	10 92 14 02 	sts	0x0214, r1
 50c:	10 92 15 02 	sts	0x0215, r1
 510:	8f ef       	ldi	r24, 0xFF	; 255
 512:	9f e7       	ldi	r25, 0x7F	; 127
 514:	a4 e0       	ldi	r26, 0x04	; 4
 516:	81 50       	subi	r24, 0x01	; 1
 518:	90 40       	sbci	r25, 0x00	; 0
 51a:	a0 40       	sbci	r26, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <green_read+0x1a>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <green_read+0x24>
 520:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse; //store the count in variable called green
 522:	80 91 12 02 	lds	r24, 0x0212
 526:	90 91 13 02 	lds	r25, 0x0213
 52a:	a0 91 14 02 	lds	r26, 0x0214
 52e:	b0 91 15 02 	lds	r27, 0x0215
 532:	80 93 1e 02 	sts	0x021E, r24
 536:	90 93 1f 02 	sts	0x021F, r25
 53a:	a0 93 20 02 	sts	0x0220, r26
 53e:	b0 93 21 02 	sts	0x0221, r27
	
}
 542:	08 95       	ret

00000544 <blue_read>:
*Example Call: blue_read()
*/
void blue_read(void)
{
	//Blue
	filter_blue(); //select blue filter
 544:	0e 94 51 02 	call	0x4a2	; 0x4a2 <filter_blue>
	pulse=0; //reset the count to 0
 548:	10 92 12 02 	sts	0x0212, r1
 54c:	10 92 13 02 	sts	0x0213, r1
 550:	10 92 14 02 	sts	0x0214, r1
 554:	10 92 15 02 	sts	0x0215, r1
 558:	8f ef       	ldi	r24, 0xFF	; 255
 55a:	9f e7       	ldi	r25, 0x7F	; 127
 55c:	a4 e0       	ldi	r26, 0x04	; 4
 55e:	81 50       	subi	r24, 0x01	; 1
 560:	90 40       	sbci	r25, 0x00	; 0
 562:	a0 40       	sbci	r26, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <blue_read+0x1a>
 566:	00 c0       	rjmp	.+0      	; 0x568 <blue_read+0x24>
 568:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
 56a:	80 91 12 02 	lds	r24, 0x0212
 56e:	90 91 13 02 	lds	r25, 0x0213
 572:	a0 91 14 02 	lds	r26, 0x0214
 576:	b0 91 15 02 	lds	r27, 0x0215
 57a:	80 93 16 02 	sts	0x0216, r24
 57e:	90 93 17 02 	sts	0x0217, r25
 582:	a0 93 18 02 	sts	0x0218, r26
 586:	b0 93 19 02 	sts	0x0219, r27
	
}
 58a:	08 95       	ret

0000058c <main>:

int main(void)
{
    init_devices();
 58c:	0e 94 40 02 	call	0x480	; 0x480 <init_devices>
	color_sensor_scaling();
 590:	0e 94 57 02 	call	0x4ae	; 0x4ae <color_sensor_scaling>
    {
      //Write your code here
	  red_read();	//read pulses after selecting red filter
	  
	  lcd_cursor(1,1);
	  lcd_string("Red:");
 594:	c0 e0       	ldi	r28, 0x00	; 0
 596:	d2 e0       	ldi	r29, 0x02	; 2
	  lcd_print(2,1,red,6);
	  
	  green_read();	//read pulses after selecting green filter
	  lcd_cursor(1,1);
	  lcd_string("Green:");
 598:	0f 2e       	mov	r0, r31
 59a:	f5 e0       	ldi	r31, 0x05	; 5
 59c:	ef 2e       	mov	r14, r31
 59e:	f2 e0       	ldi	r31, 0x02	; 2
 5a0:	ff 2e       	mov	r15, r31
 5a2:	f0 2d       	mov	r31, r0
	   lcd_print(2,1,green,6);
	   
	  blue_read();	//read pulses after selecting blue filter
	  lcd_cursor(1,1);
	  lcd_string("Blue:");
 5a4:	0f 2e       	mov	r0, r31
 5a6:	fc e0       	ldi	r31, 0x0C	; 12
 5a8:	cf 2e       	mov	r12, r31
 5aa:	f2 e0       	ldi	r31, 0x02	; 2
 5ac:	df 2e       	mov	r13, r31
 5ae:	f0 2d       	mov	r31, r0
	int black_color_threshold = 1500;
	
	while(1)
    {
      //Write your code here
	  red_read();	//read pulses after selecting red filter
 5b0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <red_read>
	  
	  lcd_cursor(1,1);
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	  lcd_string("Red:");
 5bc:	ce 01       	movw	r24, r28
 5be:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	  lcd_print(2,1,red,6);
 5c2:	00 91 22 02 	lds	r16, 0x0222
 5c6:	10 91 23 02 	lds	r17, 0x0223
 5ca:	20 91 24 02 	lds	r18, 0x0224
 5ce:	30 91 25 02 	lds	r19, 0x0225
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	61 e0       	ldi	r22, 0x01	; 1
 5d6:	a8 01       	movw	r20, r16
 5d8:	26 e0       	ldi	r18, 0x06	; 6
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	  
	  green_read();	//read pulses after selecting green filter
 5e0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <green_read>
	  lcd_cursor(1,1);
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	  lcd_string("Green:");
 5ec:	c7 01       	movw	r24, r14
 5ee:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	   lcd_print(2,1,green,6);
 5f2:	00 91 1e 02 	lds	r16, 0x021E
 5f6:	10 91 1f 02 	lds	r17, 0x021F
 5fa:	20 91 20 02 	lds	r18, 0x0220
 5fe:	30 91 21 02 	lds	r19, 0x0221
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	a8 01       	movw	r20, r16
 608:	26 e0       	ldi	r18, 0x06	; 6
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
	   
	  blue_read();	//read pulses after selecting blue filter
 610:	0e 94 a2 02 	call	0x544	; 0x544 <blue_read>
	  lcd_cursor(1,1);
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	  lcd_string("Blue:");
 61c:	c6 01       	movw	r24, r12
 61e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	  lcd_print(2,1,blue,6);
 622:	00 91 16 02 	lds	r16, 0x0216
 626:	10 91 17 02 	lds	r17, 0x0217
 62a:	20 91 18 02 	lds	r18, 0x0218
 62e:	30 91 19 02 	lds	r19, 0x0219
 632:	82 e0       	ldi	r24, 0x02	; 2
 634:	61 e0       	ldi	r22, 0x01	; 1
 636:	a8 01       	movw	r20, r16
 638:	26 e0       	ldi	r18, 0x06	; 6
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
 640:	b7 cf       	rjmp	.-146    	; 0x5b0 <main+0x24>

00000642 <__udivmodhi4>:
 642:	aa 1b       	sub	r26, r26
 644:	bb 1b       	sub	r27, r27
 646:	51 e1       	ldi	r21, 0x11	; 17
 648:	07 c0       	rjmp	.+14     	; 0x658 <__udivmodhi4_ep>

0000064a <__udivmodhi4_loop>:
 64a:	aa 1f       	adc	r26, r26
 64c:	bb 1f       	adc	r27, r27
 64e:	a6 17       	cp	r26, r22
 650:	b7 07       	cpc	r27, r23
 652:	10 f0       	brcs	.+4      	; 0x658 <__udivmodhi4_ep>
 654:	a6 1b       	sub	r26, r22
 656:	b7 0b       	sbc	r27, r23

00000658 <__udivmodhi4_ep>:
 658:	88 1f       	adc	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	5a 95       	dec	r21
 65e:	a9 f7       	brne	.-22     	; 0x64a <__udivmodhi4_loop>
 660:	80 95       	com	r24
 662:	90 95       	com	r25
 664:	bc 01       	movw	r22, r24
 666:	cd 01       	movw	r24, r26
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>
