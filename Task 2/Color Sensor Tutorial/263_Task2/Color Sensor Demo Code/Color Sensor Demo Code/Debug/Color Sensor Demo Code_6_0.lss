
Color Sensor Demo Code_6_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800200  00800200  000004de  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  000004e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000c50  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e6  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b7  00000000  00000000  000012b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d6  00000000  00000000  0000146d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000215  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00001b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_1>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e6       	ldi	r30, 0x6A	; 106
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 5e 01 	call	0x2bc	; 0x2bc <main>
 122:	0c 94 33 02 	jmp	0x466	; 0x466 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <rgb_port_config>:
void rgb_port_config (void)
{
	/*****************************************
	Define DDR and PORT values for the port on which RGB LED is connected
	******************************************/
	DDRH = DDRH | 0x70; //01110000 setting PH4, PH5, PH6 as output for RGB led
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	80 67       	ori	r24, 0x70	; 112
 132:	80 83       	st	Z, r24
	PORTH = PORTH | 0xFF; // initially all off
 134:	e2 e0       	ldi	r30, 0x02	; 2
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	80 81       	ld	r24, Z
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	80 83       	st	Z, r24
}
 13e:	08 95       	ret

00000140 <color_sensor_pin_config>:
void color_sensor_pin_config(void)
{
	/*****************************************
	Define DDR and PORT values for the port on which Color sensor is connected
	******************************************/
	DDRD = DDRD & 0x00;
 140:	8a b1       	in	r24, 0x0a	; 10
 142:	1a b8       	out	0x0a, r1	; 10
	DDRD = DDRD | 0xFE; //11111110 //Set the direction of PORTD pin 0 as input
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	8e 6f       	ori	r24, 0xFE	; 254
 148:	8a b9       	out	0x0a, r24	; 10
	PORTD = PORTD | 0x01; //enable internal pull-up for PORTD 0 pin
 14a:	58 9a       	sbi	0x0b, 0	; 11
	
	DDRB = DDRB | 0xF0;		//set PORTB PB4,PB5,PB6,PB7 as output for S0,S1,S2,S3 of color sensor respectively
 14c:	84 b1       	in	r24, 0x04	; 4
 14e:	80 6f       	ori	r24, 0xF0	; 240
 150:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB & 0x00;	//initially all low
 152:	85 b1       	in	r24, 0x05	; 5
 154:	15 b8       	out	0x05, r1	; 5
}
 156:	08 95       	ret

00000158 <color_sensor_pin_interrupt_init>:
		by setting bit 0 of External Interrupt Control Register A(EICRA) as 0 and bit 1 of EICRA as 1  
*Example Call: color_sensor_pin_interrupt_init()
*/
void color_sensor_pin_interrupt_init(void) //Interrupt 0 enable
{
	cli(); //Clears the global interrupt  
 158:	f8 94       	cli
	EICRA = EICRA | 0x02; // INT0 is set to trigger with falling edge
 15a:	e9 e6       	ldi	r30, 0x69	; 105
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	82 60       	ori	r24, 0x02	; 2
 162:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x01; // Enable Interrupt INT0 for color sensor
 164:	e8 9a       	sbi	0x1d, 0	; 29
	sei(); // Enables the global interrupt
 166:	78 94       	sei
}
 168:	08 95       	ret

0000016a <__vector_1>:
*Output: void
*Logic: This is the Interrupt Service Routine which increments pulse count by 1 each time it is called 
*Example Call: it is automatically called when an external interrupt is triggered on PD0/INT0
*/
ISR(INT0_vect) // Pass the timer number in place of n in INTn_vect
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	af 93       	push	r26
 17a:	bf 93       	push	r27
	//increment on receiving pulse from the color sensor
	pulse++;
 17c:	80 91 00 02 	lds	r24, 0x0200
 180:	90 91 01 02 	lds	r25, 0x0201
 184:	a0 91 02 02 	lds	r26, 0x0202
 188:	b0 91 03 02 	lds	r27, 0x0203
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	80 93 00 02 	sts	0x0200, r24
 196:	90 93 01 02 	sts	0x0201, r25
 19a:	a0 93 02 02 	sts	0x0202, r26
 19e:	b0 93 03 02 	sts	0x0203, r27
}
 1a2:	bf 91       	pop	r27
 1a4:	af 91       	pop	r26
 1a6:	9f 91       	pop	r25
 1a8:	8f 91       	pop	r24
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <init_devices>:
*Logic: initialises all devices by calling respective functions
*Example Call: init_devices()
*/
void init_devices(void)
{
	cli(); //Clears the global interrupt
 1b4:	f8 94       	cli
	//Initialize all the ports here
	rgb_port_config(); //RGB led pin configuration
 1b6:	0e 94 95 00 	call	0x12a	; 0x12a <rgb_port_config>
	color_sensor_pin_config(); //color sensor pin configuration
 1ba:	0e 94 a0 00 	call	0x140	; 0x140 <color_sensor_pin_config>
	color_sensor_pin_interrupt_init();
 1be:	0e 94 ac 00 	call	0x158	; 0x158 <color_sensor_pin_interrupt_init>
	sei();   // Enables the global interrupt
 1c2:	78 94       	sei
}
 1c4:	08 95       	ret

000001c6 <filter_red>:
*Example Call:filter_red()
*/
void filter_red(void)    //Used to select red filter
{
	//Filter Select - red filter
	 PORTB = PORTB & 0xBF;//set S2 low
 1c6:	2e 98       	cbi	0x05, 6	; 5
	 PORTB = PORTB & 0x7F;//set S3 low
 1c8:	2f 98       	cbi	0x05, 7	; 5
}
 1ca:	08 95       	ret

000001cc <filter_green>:
*Example Call: filter_green()
*/
void filter_green(void)	//Used to select green filter
{
	//Filter Select - green filter
	PORTB = PORTB | 0x40;//set S2 High
 1cc:	2e 9a       	sbi	0x05, 6	; 5
	PORTB = PORTB | 0x80;//set S3 High
 1ce:	2f 9a       	sbi	0x05, 7	; 5
}
 1d0:	08 95       	ret

000001d2 <filter_blue>:
*Example Call: filter_blue()
*/
void filter_blue(void)	//Used to select blue filter
{
	//Filter Select - blue filter
	PORTB = PORTB & 0xBF;//set S2 low
 1d2:	2e 98       	cbi	0x05, 6	; 5
	PORTB = PORTB | 0x80;//set S3 High
 1d4:	2f 9a       	sbi	0x05, 7	; 5
}
 1d6:	08 95       	ret

000001d8 <filter_clear>:
*Example Call: filter_clear()
*/
void filter_clear(void)	//select no filter
{
	//Filter Select - no filter
	PORTB = PORTB | 0X40;//set S2 High
 1d8:	2e 9a       	sbi	0x05, 6	; 5
	PORTB = PORTB & 0x7F;//set S3 Low
 1da:	2f 98       	cbi	0x05, 7	; 5
}
 1dc:	08 95       	ret

000001de <color_sensor_scaling>:
*/
void color_sensor_scaling()		//This function is used to select the scaled down version of the original frequency of the output generated by the color sensor, generally 20% scaling is preferable, though you can change the values as per your application by referring datasheet
{
	//Output Scaling 20% from datasheet
	
	PORTB = PORTB | 0x10;//set S0 high
 1de:	2c 9a       	sbi	0x05, 4	; 5
	PORTB = PORTB | 0x20;//set S1 high
 1e0:	2d 9a       	sbi	0x05, 5	; 5
}
 1e2:	08 95       	ret

000001e4 <red_read>:
*Example Call: red_read()
*/
void red_read(void)
{
	//Red
	filter_red(); //select red filter
 1e4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <filter_red>
	pulse = 0;//reset the count to 0
 1e8:	10 92 00 02 	sts	0x0200, r1
 1ec:	10 92 01 02 	sts	0x0201, r1
 1f0:	10 92 02 02 	sts	0x0202, r1
 1f4:	10 92 03 02 	sts	0x0203, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	91 ee       	ldi	r25, 0xE1	; 225
 1fc:	a4 e0       	ldi	r26, 0x04	; 4
 1fe:	81 50       	subi	r24, 0x01	; 1
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	a0 40       	sbci	r26, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <red_read+0x1a>
 206:	00 c0       	rjmp	.+0      	; 0x208 <red_read+0x24>
 208:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	red = pulse; //store the count in variable called red
 20a:	80 91 00 02 	lds	r24, 0x0200
 20e:	90 91 01 02 	lds	r25, 0x0201
 212:	a0 91 02 02 	lds	r26, 0x0202
 216:	b0 91 03 02 	lds	r27, 0x0203
 21a:	80 93 0c 02 	sts	0x020C, r24
 21e:	90 93 0d 02 	sts	0x020D, r25
 222:	a0 93 0e 02 	sts	0x020E, r26
 226:	b0 93 0f 02 	sts	0x020F, r27
}
 22a:	08 95       	ret

0000022c <green_read>:
*Example Call: green_read()
*/
void green_read(void) 
{
	//Green
	filter_green(); //select green filter
 22c:	0e 94 e6 00 	call	0x1cc	; 0x1cc <filter_green>
	pulse = 0; //reset the count to 0
 230:	10 92 00 02 	sts	0x0200, r1
 234:	10 92 01 02 	sts	0x0201, r1
 238:	10 92 02 02 	sts	0x0202, r1
 23c:	10 92 03 02 	sts	0x0203, r1
 240:	8f ef       	ldi	r24, 0xFF	; 255
 242:	91 ee       	ldi	r25, 0xE1	; 225
 244:	a4 e0       	ldi	r26, 0x04	; 4
 246:	81 50       	subi	r24, 0x01	; 1
 248:	90 40       	sbci	r25, 0x00	; 0
 24a:	a0 40       	sbci	r26, 0x00	; 0
 24c:	e1 f7       	brne	.-8      	; 0x246 <green_read+0x1a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <green_read+0x24>
 250:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	green = pulse; //store the count in variable called green
 252:	80 91 00 02 	lds	r24, 0x0200
 256:	90 91 01 02 	lds	r25, 0x0201
 25a:	a0 91 02 02 	lds	r26, 0x0202
 25e:	b0 91 03 02 	lds	r27, 0x0203
 262:	80 93 08 02 	sts	0x0208, r24
 266:	90 93 09 02 	sts	0x0209, r25
 26a:	a0 93 0a 02 	sts	0x020A, r26
 26e:	b0 93 0b 02 	sts	0x020B, r27
}
 272:	08 95       	ret

00000274 <blue_read>:
*Example Call: blue_read()
*/
void blue_read(void)
{
	//Blue
	filter_blue(); //select blue filter
 274:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <filter_blue>
	pulse=0; //reset the count to 0
 278:	10 92 00 02 	sts	0x0200, r1
 27c:	10 92 01 02 	sts	0x0201, r1
 280:	10 92 02 02 	sts	0x0202, r1
 284:	10 92 03 02 	sts	0x0203, r1
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	91 ee       	ldi	r25, 0xE1	; 225
 28c:	a4 e0       	ldi	r26, 0x04	; 4
 28e:	81 50       	subi	r24, 0x01	; 1
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	a0 40       	sbci	r26, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <blue_read+0x1a>
 296:	00 c0       	rjmp	.+0      	; 0x298 <blue_read+0x24>
 298:	00 00       	nop
	_delay_ms(100); //capture the pulses for 100 ms or 0.1 second
	blue = pulse;  //store the count in variable called blue
 29a:	80 91 00 02 	lds	r24, 0x0200
 29e:	90 91 01 02 	lds	r25, 0x0201
 2a2:	a0 91 02 02 	lds	r26, 0x0202
 2a6:	b0 91 03 02 	lds	r27, 0x0203
 2aa:	80 93 04 02 	sts	0x0204, r24
 2ae:	90 93 05 02 	sts	0x0205, r25
 2b2:	a0 93 06 02 	sts	0x0206, r26
 2b6:	b0 93 07 02 	sts	0x0207, r27
}
 2ba:	08 95       	ret

000002bc <main>:

int main(void)
{
    init_devices();
 2bc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <init_devices>
	color_sensor_scaling();
 2c0:	0e 94 ef 00 	call	0x1de	; 0x1de <color_sensor_scaling>
	  
	  //if all three pulse counts are less than the threshold value then color is black
	  if(red < black_color_threshold && green < black_color_threshold && blue < black_color_threshold)
	  {
		//black
		PORTH |= 0xFF; //first making all bits high to turn off led
 2c4:	c2 e0       	ldi	r28, 0x02	; 2
 2c6:	d1 e0       	ldi	r29, 0x01	; 1
 2c8:	1f ef       	ldi	r17, 0xFF	; 255
	int black_color_threshold = 1500;
	
	while(1)
    {
      //Write your code here
	  red_read();	//read pulses after selecting red filter
 2ca:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <red_read>
	  green_read();	//read pulses after selecting green filter
 2ce:	0e 94 16 01 	call	0x22c	; 0x22c <green_read>
	  blue_read();	//read pulses after selecting blue filter
 2d2:	0e 94 3a 01 	call	0x274	; 0x274 <blue_read>
	  
	  
	  //if all three pulse counts are less than the threshold value then color is black
	  if(red < black_color_threshold && green < black_color_threshold && blue < black_color_threshold)
 2d6:	80 91 0c 02 	lds	r24, 0x020C
 2da:	90 91 0d 02 	lds	r25, 0x020D
 2de:	a0 91 0e 02 	lds	r26, 0x020E
 2e2:	b0 91 0f 02 	lds	r27, 0x020F
 2e6:	8c 3d       	cpi	r24, 0xDC	; 220
 2e8:	25 e0       	ldi	r18, 0x05	; 5
 2ea:	92 07       	cpc	r25, r18
 2ec:	20 e0       	ldi	r18, 0x00	; 0
 2ee:	a2 07       	cpc	r26, r18
 2f0:	20 e0       	ldi	r18, 0x00	; 0
 2f2:	b2 07       	cpc	r27, r18
 2f4:	30 f5       	brcc	.+76     	; 0x342 <main+0x86>
 2f6:	80 91 08 02 	lds	r24, 0x0208
 2fa:	90 91 09 02 	lds	r25, 0x0209
 2fe:	a0 91 0a 02 	lds	r26, 0x020A
 302:	b0 91 0b 02 	lds	r27, 0x020B
 306:	8c 3d       	cpi	r24, 0xDC	; 220
 308:	25 e0       	ldi	r18, 0x05	; 5
 30a:	92 07       	cpc	r25, r18
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	a2 07       	cpc	r26, r18
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	b2 07       	cpc	r27, r18
 314:	b0 f4       	brcc	.+44     	; 0x342 <main+0x86>
 316:	80 91 04 02 	lds	r24, 0x0204
 31a:	90 91 05 02 	lds	r25, 0x0205
 31e:	a0 91 06 02 	lds	r26, 0x0206
 322:	b0 91 07 02 	lds	r27, 0x0207
 326:	8c 3d       	cpi	r24, 0xDC	; 220
 328:	25 e0       	ldi	r18, 0x05	; 5
 32a:	92 07       	cpc	r25, r18
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	a2 07       	cpc	r26, r18
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	b2 07       	cpc	r27, r18
 334:	30 f4       	brcc	.+12     	; 0x342 <main+0x86>
	  {
		//black
		PORTH |= 0xFF; //first making all bits high to turn off led
 336:	88 81       	ld	r24, Y
 338:	18 83       	st	Y, r17
		PORTH &= 0x8F; //glow white color on led by making PH4, PH5 and PH6 low
 33a:	88 81       	ld	r24, Y
 33c:	8f 78       	andi	r24, 0x8F	; 143
 33e:	88 83       	st	Y, r24
 340:	c4 cf       	rjmp	.-120    	; 0x2ca <main+0xe>
	  }
	  else
	  {
		  //if red pulse count is greater than green and blue
		  if(red > green && red > blue)
 342:	40 91 0c 02 	lds	r20, 0x020C
 346:	50 91 0d 02 	lds	r21, 0x020D
 34a:	60 91 0e 02 	lds	r22, 0x020E
 34e:	70 91 0f 02 	lds	r23, 0x020F
 352:	80 91 08 02 	lds	r24, 0x0208
 356:	90 91 09 02 	lds	r25, 0x0209
 35a:	a0 91 0a 02 	lds	r26, 0x020A
 35e:	b0 91 0b 02 	lds	r27, 0x020B
 362:	84 17       	cp	r24, r20
 364:	95 07       	cpc	r25, r21
 366:	a6 07       	cpc	r26, r22
 368:	b7 07       	cpc	r27, r23
 36a:	d8 f4       	brcc	.+54     	; 0x3a2 <main+0xe6>
 36c:	40 91 0c 02 	lds	r20, 0x020C
 370:	50 91 0d 02 	lds	r21, 0x020D
 374:	60 91 0e 02 	lds	r22, 0x020E
 378:	70 91 0f 02 	lds	r23, 0x020F
 37c:	80 91 04 02 	lds	r24, 0x0204
 380:	90 91 05 02 	lds	r25, 0x0205
 384:	a0 91 06 02 	lds	r26, 0x0206
 388:	b0 91 07 02 	lds	r27, 0x0207
 38c:	84 17       	cp	r24, r20
 38e:	95 07       	cpc	r25, r21
 390:	a6 07       	cpc	r26, r22
 392:	b7 07       	cpc	r27, r23
 394:	30 f4       	brcc	.+12     	; 0x3a2 <main+0xe6>
		  {
			//red-PH4;
			PORTH |= 0xFF;	//first making all bits high to turn off led
 396:	88 81       	ld	r24, Y
 398:	18 83       	st	Y, r17
			PORTH &= 0xEF;	//making PH4 low for red color diode
 39a:	88 81       	ld	r24, Y
 39c:	8f 7e       	andi	r24, 0xEF	; 239
 39e:	88 83       	st	Y, r24
 3a0:	94 cf       	rjmp	.-216    	; 0x2ca <main+0xe>
		  }
		  //if green pulse count is greater than red and blue
		  else if(green > blue && green > red)
 3a2:	40 91 08 02 	lds	r20, 0x0208
 3a6:	50 91 09 02 	lds	r21, 0x0209
 3aa:	60 91 0a 02 	lds	r22, 0x020A
 3ae:	70 91 0b 02 	lds	r23, 0x020B
 3b2:	80 91 04 02 	lds	r24, 0x0204
 3b6:	90 91 05 02 	lds	r25, 0x0205
 3ba:	a0 91 06 02 	lds	r26, 0x0206
 3be:	b0 91 07 02 	lds	r27, 0x0207
 3c2:	84 17       	cp	r24, r20
 3c4:	95 07       	cpc	r25, r21
 3c6:	a6 07       	cpc	r26, r22
 3c8:	b7 07       	cpc	r27, r23
 3ca:	d8 f4       	brcc	.+54     	; 0x402 <main+0x146>
 3cc:	40 91 08 02 	lds	r20, 0x0208
 3d0:	50 91 09 02 	lds	r21, 0x0209
 3d4:	60 91 0a 02 	lds	r22, 0x020A
 3d8:	70 91 0b 02 	lds	r23, 0x020B
 3dc:	80 91 0c 02 	lds	r24, 0x020C
 3e0:	90 91 0d 02 	lds	r25, 0x020D
 3e4:	a0 91 0e 02 	lds	r26, 0x020E
 3e8:	b0 91 0f 02 	lds	r27, 0x020F
 3ec:	84 17       	cp	r24, r20
 3ee:	95 07       	cpc	r25, r21
 3f0:	a6 07       	cpc	r26, r22
 3f2:	b7 07       	cpc	r27, r23
 3f4:	30 f4       	brcc	.+12     	; 0x402 <main+0x146>
		  {
			//green-PH5;
			PORTH |= 0xFF;	//first making all bits high to turn off led
 3f6:	88 81       	ld	r24, Y
 3f8:	18 83       	st	Y, r17
			PORTH &= 0xDF;	//making PH5 low for green color diode
 3fa:	88 81       	ld	r24, Y
 3fc:	8f 7d       	andi	r24, 0xDF	; 223
 3fe:	88 83       	st	Y, r24
 400:	64 cf       	rjmp	.-312    	; 0x2ca <main+0xe>
		  }
		  //if blue pulse count is greater than green and red
		  else if(blue > red && blue > green)
 402:	40 91 04 02 	lds	r20, 0x0204
 406:	50 91 05 02 	lds	r21, 0x0205
 40a:	60 91 06 02 	lds	r22, 0x0206
 40e:	70 91 07 02 	lds	r23, 0x0207
 412:	80 91 0c 02 	lds	r24, 0x020C
 416:	90 91 0d 02 	lds	r25, 0x020D
 41a:	a0 91 0e 02 	lds	r26, 0x020E
 41e:	b0 91 0f 02 	lds	r27, 0x020F
 422:	84 17       	cp	r24, r20
 424:	95 07       	cpc	r25, r21
 426:	a6 07       	cpc	r26, r22
 428:	b7 07       	cpc	r27, r23
 42a:	08 f0       	brcs	.+2      	; 0x42e <main+0x172>
 42c:	4e cf       	rjmp	.-356    	; 0x2ca <main+0xe>
 42e:	40 91 04 02 	lds	r20, 0x0204
 432:	50 91 05 02 	lds	r21, 0x0205
 436:	60 91 06 02 	lds	r22, 0x0206
 43a:	70 91 07 02 	lds	r23, 0x0207
 43e:	80 91 08 02 	lds	r24, 0x0208
 442:	90 91 09 02 	lds	r25, 0x0209
 446:	a0 91 0a 02 	lds	r26, 0x020A
 44a:	b0 91 0b 02 	lds	r27, 0x020B
 44e:	84 17       	cp	r24, r20
 450:	95 07       	cpc	r25, r21
 452:	a6 07       	cpc	r26, r22
 454:	b7 07       	cpc	r27, r23
 456:	08 f0       	brcs	.+2      	; 0x45a <main+0x19e>
 458:	38 cf       	rjmp	.-400    	; 0x2ca <main+0xe>
		  {
			//blue-PH6;
			PORTH |= 0xFF;	//first making all bits high to turn off led
 45a:	88 81       	ld	r24, Y
 45c:	18 83       	st	Y, r17
			PORTH &= 0xBF;	//making PH4 low for blue color diode
 45e:	88 81       	ld	r24, Y
 460:	8f 7b       	andi	r24, 0xBF	; 191
 462:	88 83       	st	Y, r24
 464:	32 cf       	rjmp	.-412    	; 0x2ca <main+0xe>

00000466 <_exit>:
 466:	f8 94       	cli

00000468 <__stop_program>:
 468:	ff cf       	rjmp	.-2      	; 0x468 <__stop_program>
